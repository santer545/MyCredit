@charset "UTF-8";
/*_____________custom variables______________*/
/**
 * Defaults variables for fonts, colors, etc
 */
/*
 * header variables
 */
/*
 * header variables responsive
 */
/*
 * section credit variables
 */
/*
 * section credit variables responsive
 */
/*
 * Main slider variables
 */
/*
 * Main slider variables responsive
 */
/*
 * Loan block on slider variables
 */
/**
 * Advantages block variables
 */
/**
 * Advantages block variables responsive
 */
/**
 * Number block variables
 */
/**
 * Number block variables responsive
 */
/**
 * Footer block variables
 */
/**
 * Footer variables responsive
 */
/**
 * How-It block variables
 */
/**
 * How-It block variables responsive
 */
/**
 * Adaptive block
 */
/**
 * Adaptive block responsive
 */
/**
 * Security Block variables
 */
/**
 * Security Block variables responsive
 */
/**
 * Seo Block variables
 */
/**
 * Main contacts Block variables
 */
/**
 * Main contacts Block variables responsive
 */
/**
 * Numeric list Block variables
 */
/**
 * Numeric list Block variables responsive
 */
/**
 * Back to top variables
 */
/*************************************************************
 * Buttons variables
 *
 *
 *
 *
 *
 ************************************************************/
/**
 * Authorize button
 */
/**
 * Authorize button variables responsive
 */
/**
 * Primary button
 */
/**
 * Primary button responsive
 */
/**
 * Info button
 */
/**
 * Success button
 */
/**
 * Warning button
 */
/**
 * Personal button
 */
/**
 * Size for buttons
 */
/**
 * Order button
 */
/**
 * Change button
 */
/**
 * Login button
 */
/**
 * Cancel button
 */
/********************************
 * Navbar variables
 *
 *
 *
 *
 *
 ***********************************/
/****************************************
 * Registration page components variables
 *
 *
 *
 *
 ***************************************/
/**
 * Loan panel variables
 */
/**
 * Registration tabs
 */
/**
 * Registration slider
 */
/**
 * Registration contacts variables
 */
/**
 * Registration bar variables
 */
/**
 * pay-data variables
 */
/**
 * Card block variables
 */
/**
 * Card form holder
 */
/**
 * Conditions variables
 */
/**
 *  Forms variables
 *
 *
 *
 */
/**
 * Navs variables
 *
 *
 *
 */
/**
 * Questions tabs
 *
 *
 *
 */
/**
 * Social variables
 *
 */
/**
 * Sidebar variables
 *
 *
 */
/**
 * Content bar
 *
 *
 */
/**
 * Document tabs
 *
 *
 */
/**
 * Breadcrumbs variables
 *
 *
 */
/**
 * Questions list variables
 *
 */
/**
 * Question detail variables
 *
 *
 */
/**
 * Question current variables
 *
 *
 */
/**
 * News variables
 *
 *
 */
/*_____________bootstrap 3.0_______________*/
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

body {
  margin: 0; }


figure,
footer,
header,
menu,
nav,
section {
  display: block; }


video {
  display: inline-block;
  vertical-align: baseline; }

[hidden] {
  display: none; }

a {
  background-color: transparent; }

a:active,
a:hover {
  outline: 0; }

b,
strong {
  font-weight: bold; }

h1 {
  font-size: 2em;
  margin: 0.67em 0; }

img {
  border: 0; }

svg:not(:root) {
  overflow: hidden; }

figure {
  margin: 1em 40px; }

code {
  font-family: monospace, monospace;
  font-size: 1em; }

button,
input,
textarea {
  color: inherit;
  font: inherit;
  margin: 0; }

button {
  overflow: visible; }

button {
  text-transform: none; }

button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer; }

button[disabled],
html input[disabled] {
  cursor: default; }

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

input {
  line-height: normal; }

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0; }

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

textarea {
  overflow: auto; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

td {
  padding: 0; }

/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */
@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]:after {
    content: " (" attr(href) ")"; }
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: ""; }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; }
  .navbar {
    display: none; }
  .label {
    border: 1px solid #000; }
  .table {
    border-collapse: collapse !important; }
    .table td {
      background-color: #fff !important; } }

@font-face {
  font-family: 'Glyphicons Halflings';
  src: url("../fonts/bootstrap/glyphicons-halflings-regular.eot");
  src: url("../fonts/bootstrap/glyphicons-halflings-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/bootstrap/glyphicons-halflings-regular.woff2") format("woff2"), url("../fonts/bootstrap/glyphicons-halflings-regular.woff") format("woff"), url("../fonts/bootstrap/glyphicons-halflings-regular.ttf") format("truetype"), url("../fonts/bootstrap/glyphicons-halflings-regular.svg#glyphicons_halflingsregular") format("svg"); }

* {
  box-sizing: border-box; }

*:before,
*:after {
  box-sizing: border-box; }

html {
  font-size: 10px;
  -webkit-tap-highlight-color: transparent; }

body {
  font-family: "HelveticaNeueCyr Light", Arial, sans-serif;
  font-size: 14px;
  line-height: 1.42857;
  color: #333333;
  background-color: #ffffff; }

input,
button,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit; }

a {
  color: #003764;
  text-decoration: none; }
  a:hover, a:focus {
    color: #000d18;
    text-decoration: underline; }
  a:focus {
    outline: thin dotted;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px; }

figure {
  margin: 0; }

img {
  vertical-align: middle; }

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0; }

[role="button"] {
  cursor: pointer; }

h1, h2, h3, h4,
.h1, .h2, .h3, .h4 {
  font-family: inherit;
  font-weight: 500;
  line-height: 1.1;
  color: inherit; }

h1, .h1,
h2, .h2,
h3, .h3 {
  margin-top: 20px;
  margin-bottom: 10px; }

h4, .h4 {
  margin-top: 10px;
  margin-bottom: 10px; }

h1, .h1 {
  font-size: 36px; }

h2, .h2 {
  font-size: 30px; }

h3, .h3 {
  font-size: 24px; }

h4, .h4 {
  font-size: 18px; }

p {
  margin: 0 0 10px; }

.text-right {
  text-align: right; }

.text-center {
  text-align: center; }

ul,
ol {
  margin-top: 0;
  margin-bottom: 10px; }
  ul ul,
  ul ol,
  ol ul,
  ol ol {
    margin-bottom: 0; }

code {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace; }

code {
  padding: 2px 4px;
  font-size: 90%;
  color: #c7254e;
  background-color: #f9f2f4;
  border-radius: 4px; }

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-left: 10px;
  padding-right: 10px; }
  .container-fluid:before, .container-fluid:after {
    content: " ";
    display: table; }
  .container-fluid:after {
    clear: both; }

.row {
  margin-left: -10px;
  margin-right: -10px; }
  .row:before, .row:after {
    content: " ";
    display: table; }
  .row:after {
    clear: both; }

 .col-sm-2, .col-md-2, .col-xs-3, .col-md-3, .col-sm-4, .col-md-4, .col-xs-5, .col-sm-5, .col-md-5, .col-sm-6, .col-md-6, .col-sm-7, .col-md-7, .col-sm-8, .col-md-8, .col-xs-9, .col-md-9, .col-xs-12, .col-md-12 {
  position: relative;
  min-height: 1px;
  padding-left: 10px;
  padding-right: 10px; }

 .col-xs-3, .col-xs-5, .col-xs-9, .col-xs-12 {
  float: left; }

.col-xs-3 {
  width: 25%; }

.col-xs-5 {
  width: 41.66667%; }

.col-xs-9 {
  width: 75%; }

.col-xs-12 {
  width: 100%; }

@media (min-width: 768px) {
   .col-sm-2, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8 {
    float: left; }
  .col-sm-2 {
    width: 16.66667%; }
  .col-sm-4 {
    width: 33.33333%; }
  .col-sm-5 {
    width: 41.66667%; }
  .col-sm-6 {
    width: 50%; }
  .col-sm-7 {
    width: 58.33333%; }
  .col-sm-8 {
    width: 66.66667%; }
  .col-sm-offset-2 {
    margin-left: 16.66667%; } }

@media (min-width: 992px) {
   .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-12 {
    float: left; }
  .col-md-2 {
    width: 16.66667%; }
  .col-md-3 {
    width: 25%; }
  .col-md-4 {
    width: 33.33333%; }
  .col-md-5 {
    width: 41.66667%; }
  .col-md-6 {
    width: 50%; }
  .col-md-7 {
    width: 58.33333%; }
  .col-md-8 {
    width: 66.66667%; }
  .col-md-9 {
    width: 75%; }
  .col-md-12 {
    width: 100%; }
  .col-md-pull-3 {
    right: 25%; }
  .col-md-push-6 {
    left: 50%; }
  .col-md-offset-0 {
    margin-left: 0%; }
  .col-md-offset-2 {
    margin-left: 16.66667%; } }

table {
  background-color: transparent; }

.table {
  width: 100%;
  max-width: 100%;
  margin-bottom: 20px; }
  .table .table {
    background-color: #ffffff; }

table col[class*="col-"] {
  position: static;
  float: none;
  display: table-column; }

table td[class*="col-"] {
  position: static;
  float: none;
  display: table-cell; }

label {
  display: inline-block;
  max-width: 100%;
  margin-bottom: 5px;
  font-weight: bold; }

input[type="search"] {
  box-sizing: border-box; }

input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9;
  line-height: normal; }

input[type="file"] {
  display: block; }

input[type="range"] {
  display: block;
  width: 100%; }

input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px; }

.form-control {
  display: block;
  width: 100%;
  height: 34px;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857;
  color: #555555;
  background-color: #fff;
  background-image: none;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s; }
  .form-control:focus {
    border-color: #66afe9;
    outline: 0;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6); }
  .form-control::-moz-placeholder {
    color: #999;
    opacity: 1; }
  .form-control:-ms-input-placeholder {
    color: #999; }
  .form-control::-webkit-input-placeholder {
    color: #999; }
  .form-control::-ms-expand {
    border: 0;
    background-color: transparent; }
  .form-control[disabled], .form-control[readonly] {
    background-color: #eeeeee;
    opacity: 1; }
  .form-control[disabled] {
    cursor: not-allowed; }

textarea.form-control {
  height: auto; }

input[type="search"] {
  -webkit-appearance: none; }

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"].form-control,
  input[type="time"].form-control,
  input[type="datetime-local"].form-control,
  input[type="month"].form-control {
    line-height: 34px; } }

.form-group {
  margin-bottom: 15px; }


.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px; }
  
  .checkbox label {
    min-height: 20px;
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer; }


.checkbox input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px \9; }


.checkbox + .checkbox {
  margin-top: -5px; }

input[type="radio"][disabled],
input[type="checkbox"][disabled] {
  cursor: not-allowed; }

.btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: normal;
  text-align: center;
  vertical-align: middle;
  -ms-touch-action: manipulation;
      touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857;
  border-radius: 4px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }
  .btn:focus, .btn:active:focus, .btn.active:focus {
    outline: thin dotted;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px; }
  .btn:hover, .btn:focus {
    color: #333;
    text-decoration: none; }
  .btn:active, .btn.active {
    outline: 0;
    background-image: none;
    box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125); }
   .btn[disabled] {
    cursor: not-allowed;
    opacity: 0.65;
    filter: alpha(opacity=65);
    box-shadow: none; }

.btn-success {
  color: #ffffff;
  background-color: #1f9bde;
  border-color: #1c8bc8; }
  .btn-success:focus {
    color: #ffffff;
    background-color: #197cb1;
    border-color: #0c3d58; }
  .btn-success:hover {
    color: #ffffff;
    background-color: #197cb1;
    border-color: #146692; }
  .btn-success:active, .btn-success.active {
    color: #ffffff;
    background-color: #197cb1;
    border-color: #146692; }
    .btn-success:active:hover, .btn-success:active:focus, .btn-success.active:hover, .btn-success.active:focus {
      color: #ffffff;
      background-color: #146692;
      border-color: #0c3d58; }
  .btn-success:active, .btn-success.active {
    background-image: none; }
   .btn-success[disabled]:hover, .btn-success[disabled]:focus {
    background-color: #1f9bde;
    border-color: #1c8bc8; }

.btn-sm {
  padding: 5px 10px;
  font-size: 12px;
  line-height: 1.5;
  border-radius: 3px; }

.btn-block {
  display: block;
  width: 100%; }

.btn-block + .btn-block {
  margin-top: 5px; }

input[type="submit"].btn-block,
input[type="reset"].btn-block,
input[type="button"].btn-block {
  width: 100%; }

.fade {
  opacity: 0;
  transition: opacity 0.15s linear; }

.collapse {
  display: none; }


.dropdown {
  position: relative; }

.dropdown-toggle:focus {
  outline: 0; }

.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 1000;
  display: none;
  float: left;
  min-width: 160px;
  padding: 5px 0;
  margin: 2px 0 0;
  list-style: none;
  font-size: 14px;
  text-align: left;
  background-color: #fff;
  border: 1px solid #ccc;
  border: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 4px;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
  background-clip: padding-box; }
  .dropdown-menu > li > a {
    display: block;
    padding: 3px 20px;
    clear: both;
    font-weight: normal;
    line-height: 1.42857;
    color: #333333;
    white-space: nowrap; }

.dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus {
  text-decoration: none;
  color: #262626;
  background-color: #f5f5f5; }

.dropdown-menu > .active > a, .dropdown-menu > .active > a:hover, .dropdown-menu > .active > a:focus {
  color: #fff;
  text-decoration: none;
  outline: 0;
  background-color: #003764; }

[data-toggle="buttons"] > .btn input[type="radio"],
[data-toggle="buttons"] > .btn input[type="checkbox"] {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  pointer-events: none; }

.nav {
  margin-bottom: 0;
  padding-left: 0;
  list-style: none; }
  .nav:before, .nav:after {
    content: " ";
    display: table; }
  .nav:after {
    clear: both; }
  .nav > li {
    position: relative;
    display: block; }
    .nav > li > a {
      position: relative;
      display: block;
      padding: 10px 15px; }
      .nav > li > a:hover, .nav > li > a:focus {
        text-decoration: none;
        background-color: #eeeeee; }
  .nav > li > a > img {
    max-width: none; }

.navbar {
  position: relative;
  min-height: 50px;
  margin-bottom: 20px;
  border: 1px solid transparent; }
  .navbar:before, .navbar:after {
    content: " ";
    display: table; }
  .navbar:after {
    clear: both; }
  @media (min-width: 767px) {
    .navbar {
      border-radius: 4px; } }

.navbar-collapse {
  overflow-x: visible;
  padding-right: 10px;
  padding-left: 10px;
  border-top: 1px solid transparent;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);
  -webkit-overflow-scrolling: touch; }
  .navbar-collapse:before, .navbar-collapse:after {
    content: " ";
    display: table; }
  .navbar-collapse:after {
    clear: both; }
  @media (min-width: 767px) {
    .navbar-collapse {
      width: auto;
      border-top: 0;
      box-shadow: none; }
      .navbar-collapse.collapse {
        display: block !important;
        height: auto !important;
        padding-bottom: 0;
        overflow: visible !important; } }


.container-fluid > .navbar-collapse {
  margin-right: -10px;
  margin-left: -10px; }
  @media (min-width: 767px) {
    
    .container-fluid > .navbar-collapse {
      margin-right: 0;
      margin-left: 0; } }

.navbar-toggle {
  position: relative;
  float: right;
  margin-right: 10px;
  padding: 9px 10px;
  margin-top: 8px;
  margin-bottom: 8px;
  background-color: transparent;
  background-image: none;
  border: 1px solid transparent;
  border-radius: 4px; }
  .navbar-toggle:focus {
    outline: 0; }
  @media (min-width: 767px) {
    .navbar-toggle {
      display: none; } }

.navbar-nav {
  margin: 7.5px -10px; }
  .navbar-nav > li > a {
    padding-top: 10px;
    padding-bottom: 10px;
    line-height: 20px; }
  @media (min-width: 767px) {
    .navbar-nav {
      float: left;
      margin: 0; }
      .navbar-nav > li {
        float: left; }
        .navbar-nav > li > a {
          padding-top: 15px;
          padding-bottom: 15px; } }

.navbar-nav > li > .dropdown-menu {
  margin-top: 0;
  border-top-right-radius: 0;
  border-top-left-radius: 0; }

.label {
  display: inline;
  padding: .2em .6em .3em;
  font-size: 75%;
  font-weight: bold;
  line-height: 1;
  color: #fff;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: .25em; }
  .label:empty {
    display: none; }
  .btn .label {
    position: relative;
    top: -1px; }

a.label:hover, a.label:focus {
  color: #fff;
  text-decoration: none;
  cursor: pointer; }

.media {
  margin-top: 15px; }
  .media:first-child {
    margin-top: 0; }

.media {
  zoom: 1;
  overflow: hidden; }

.embed-responsive {
  position: relative;
  display: block;
  height: 0;
  padding: 0;
  overflow: hidden; }
  .embed-responsive .embed-responsive-item,
  .embed-responsive iframe,
  .embed-responsive embed,
  .embed-responsive video {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    height: 100%;
    width: 100%;
    border: 0; }

.embed-responsive-16by9 {
  padding-bottom: 56.25%; }

.close {
  float: right;
  font-size: 21px;
  font-weight: bold;
  line-height: 1;
  color: #000;
  text-shadow: 0 1px 0 #fff;
  opacity: 0.2;
  filter: alpha(opacity=20); }
  .close:hover, .close:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
    opacity: 0.5;
    filter: alpha(opacity=50); }

button.close {
  padding: 0;
  cursor: pointer;
  background: transparent;
  border: 0;
  -webkit-appearance: none; }

.modal {
  display: none;
  overflow: hidden;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1050;
  -webkit-overflow-scrolling: touch;
  outline: 0; }
  .modal.fade .modal-dialog {
    -webkit-transform: translate(0, -25%);
    -ms-transform: translate(0, -25%);
    transform: translate(0, -25%);
    transition: -webkit-transform 0.3s ease-out;
    transition: transform 0.3s ease-out;
    transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out; }

.modal-dialog {
  position: relative;
  width: auto;
  margin: 10px; }

.modal-content {
  position: relative;
  background-color: #fff;
  border: 1px solid #999;
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: 6px;
  box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);
  background-clip: padding-box;
  outline: 0; }

.modal-header {
  padding: 15px;
  border-bottom: 1px solid #e5e5e5; }
  .modal-header:before, .modal-header:after {
    content: " ";
    display: table; }
  .modal-header:after {
    clear: both; }

.modal-header .close {
  margin-top: -2px; }

.modal-title {
  margin: 0;
  line-height: 1.42857; }

.modal-body {
  position: relative;
  padding: 15px; }

.modal-footer {
  padding: 15px;
  text-align: right;
  border-top: 1px solid #e5e5e5; }
  .modal-footer:before, .modal-footer:after {
    content: " ";
    display: table; }
  .modal-footer:after {
    clear: both; }
  .modal-footer .btn + .btn {
    margin-left: 5px;
    margin-bottom: 0; }
  .modal-footer .btn-block + .btn-block {
    margin-left: 0; }

@media (min-width: 768px) {
  .modal-dialog {
    width: 600px;
    margin: 30px auto; }
  .modal-content {
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5); }
  .modal-sm {
    width: 300px; } }

.clearfix:before, .clearfix:after {
  content: " ";
  display: table; }

.clearfix:after {
  clear: both; }

.hidden {
  display: none !important; }

@-ms-viewport {
  width: device-width; }

.visible-xs {
  display: none !important; }

.visible-sm {
  display: none !important; }

.visible-md {
  display: none !important; }

.visible-lg {
  display: none !important; }

@media (max-width: 767px) {
  .visible-xs {
    display: block !important; }
  table.visible-xs {
    display: table !important; }
  tr.visible-xs {
    display: table-row !important; }
  
  td.visible-xs {
    display: table-cell !important; } }

@media (min-width: 768px) and (max-width: 991px) {
  .visible-sm {
    display: block !important; }
  table.visible-sm {
    display: table !important; }
  tr.visible-sm {
    display: table-row !important; }
  
  td.visible-sm {
    display: table-cell !important; } }

@media (min-width: 992px) and (max-width: 1199px) {
  .visible-md {
    display: block !important; }
  table.visible-md {
    display: table !important; }
  tr.visible-md {
    display: table-row !important; }
  
  td.visible-md {
    display: table-cell !important; } }

@media (min-width: 1200px) {
  .visible-lg {
    display: block !important; }
  table.visible-lg {
    display: table !important; }
  tr.visible-lg {
    display: table-row !important; }
  
  td.visible-lg {
    display: table-cell !important; } }

@media (max-width: 767px) {
  .hidden-xs {
    display: none !important; } }

@media (min-width: 768px) and (max-width: 991px) {
  .hidden-sm {
    display: none !important; } }

/*_____________default styles______________*/
html {
  height: 100%; }

body {
  font: 16px / 1.5 "HelveticaNeueCyr Light", Arial, sans-serif;
  background-color: #eceff9;
  color: #003764;
  height: 100%; }
  @media screen and (max-width: 1199px) {
    body {
      line-height: 1.42857; } }
  @media screen and (max-width: 767px) {
    body {
      font-size: 15px; } }
  body.home-page {
    background-color: #ffffff; }

img {
  max-width: 100%;
  height: auto; }

b,
strong {
  font-family: "HelveticaNeueCyr Bold", Arial, sans-serif; }

a {
  outline: none;
  color: #0055bc;
  text-decoration: underline; }
  a:focus, a:hover {
    color: #0055bc;
    text-decoration: none; }

a[href^="tel"] {
  outline: none;
  color: #0055bc;
  text-decoration: underline; }
  a[href^="tel"]:focus, a[href^="tel"]:hover {
    color: #0055bc;
    text-decoration: none; }

a[href^="mailto"] {
  outline: none;
  color: #0055bc;
  text-decoration: underline; }
  a[href^="mailto"]:focus, a[href^="mailto"]:hover {
    color: #0055bc;
    text-decoration: none; }

p::-moz-selection,
a::-moz-selection,
label::-moz-selection,
h1::-moz-selection,
h2::-moz-selection,
h3::-moz-selection,
h4::-moz-selection,
span::-moz-selection,
strong::-moz-selection,
li::-moz-selection {
  background-color: #58b4e5; }

p::selection,
a::selection,
label::selection,
h1::selection,
h2::selection,
h3::selection,
h4::selection,
span::selection,
strong::selection,
li::selection {
  background-color: #58b4e5; }

p::-moz-selection,
a::-moz-selection,
label::-moz-selection,
h1::-moz-selection,
h2::-moz-selection,
h3::-moz-selection,
h4::-moz-selection,
span::-moz-selection,
strong::-moz-selection,
li::-moz-selection {
  background-color: #58b4e5; }

label {
  margin: 0;
  font-weight: normal; }

button:focus,
input[type="submit"]:focus {
  outline: none;
  box-shadow: none; }

.wrapper {
  width: 100%;
  min-width: 320px;
  display: table;
  table-layout: fixed;
  overflow: hidden;
  min-height: 100%; }

.container-fluid {
  max-width: 1200px;
  margin: 0 auto; }

.container-big {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 15px; }

ol {
  padding: 0;
  list-style-position: inside; }

.custom-ul {
  padding: 0;
  margin: 0;
  list-style: none;
  margin-bottom: 30px; }
  .custom-ul li {
    position: relative;
    padding-left: 26px;
    font: 16px/25px "HelveticaNeueCyr Light", Arial, sans-serif; }
    @media screen and (max-width: 767px) {
      .custom-ul li {
        font-size: 16px; } }
    .custom-ul li:not(:last-child) {
      margin-bottom: 14px; }
    .custom-ul li:before {
      content: '';
      position: absolute;
      left: 0;
      top: 9px;
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background-color: #0059b7; }
  .custom-ul ul {
    list-style-type: none;
    padding: 0;
    margin: 0; }
    .custom-ul ul li {
      padding-left: 16px; }
      .custom-ul ul li:before {
        top: 11px !important;
        width: 6px;
        height: 1px;
        background-color: #333; }
      .custom-ul ul li:not(:last-child) {
        margin-bottom: 5px; }

/* Apply CSS to iOS affected versions only */

/*_____________custom buttons styles______________*/
.btn {
  font-family: "HelveticaNeueCyr Light", Arial, sans-serif;
  font-size: 20px;
  text-decoration: none; }
  @media screen and (max-width: 991px) {
    .btn {
      font-size: 17px; } }
  .btn:focus, .btn:active {
    outline: none;
    box-shadow: none; }
  .btn:active:focus {
    outline: none;
    box-shadow: none; }
  .btn img,
  .btn span {
    display: inline-block;
    vertical-align: middle; }

/******************************
 * Autorize button
 *
 *
 ************************************/
.btn-authorize {
  position: relative;
  overflow: hidden;
  display: inline-block;
  color: #fff;
  background-color: #3068a9;
  border-color: transparent;
  vertical-align: top;
  font-size: 18px;
  font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
  border: 0;
  border-radius: 3px;
  padding: 11px 27px 10px 45px;
  background-image: url(../assets/images/login.svg);
  background-repeat: no-repeat;
  background-position: 11px 12px;
  background-size: 18px;
  -webkit-transform: perspective(1px) translateZ(0);
  -ms-transform: perspective(1px) translateZ(0);
  transform: perspective(1px) translateZ(0);
  box-shadow: 0 0 1px transparent;
  position: relative;
  transition-property: color;
  transition-duration: 0.3s;
  text-decoration: none;
  /* @media screen and (max-width: $screen-md-max) {
        font-size: $btn-authorize-font-size-tablet;
        padding: $btn-authorize-padding-laptop;
            background-position: $btn-authorize-bg-position-laptop;
    } */ }
  .btn-authorize:focus {
    color: #fff;
    background-color: #255081;
    border-color: transparent; }
  .btn-authorize:hover {
    color: #fff;
    background-color: #255081;
    border-color: transparent; }
  .btn-authorize:active, .btn-authorize.active {
    color: #fff;
    background-color: #255081;
    border-color: transparent; }
    .btn-authorize:active:hover, .btn-authorize:active:focus, .btn-authorize.active:hover, .btn-authorize.active:focus {
      color: #fff;
      background-color: #1d3e65;
      border-color: transparent; }
  .btn-authorize:active, .btn-authorize.active {
    background-image: none; }
   .btn-authorize[disabled]:hover, .btn-authorize[disabled]:focus {
    background-color: #3068a9;
    border-color: transparent; }
  @media screen and (max-width: 991px) {
    .btn-authorize {
      font-size: 15px;
      margin-bottom: 0;
      vertical-align: top;
      padding: 8px 17px 7px 35px;
      background-position: 9px 9px;
      background-size: 16px; } }
  @media screen and (max-width: 767px) {
    .btn-authorize {
      display: inline-block;
      background-position: 9px 9px;
      background-size: 16px; } }
  @media screen and (max-width: 480px) {
    .btn-authorize {
      height: 36px;
      padding: 0;
      width: 37px;
      font-size: 0;
      background-image: url(../assets/images/login.svg);
      background-repeat: no-repeat;
      background-position: 9px 9px;
      background-size: 17px; } }
  .btn-authorize:focus, .btn-authorize:hover {
    outline: none;
    text-decoration: none; }
  .btn-authorize:before {
    content: "";
    position: absolute;
    z-index: -1;
    top: -17px;
    left: -35px;
    right: -35px;
    bottom: -17px;
    background: #4281ca;
    border-radius: 100%;
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
        transform: scale(1);
    transition-property: -webkit-transform;
    transition-property: transform;
    transition-property: transform, -webkit-transform;
    transition-duration: 0.3s;
    transition-timing-function: ease-out;
    background-image: url(../assets/images/login.svg);
    background-repeat: no-repeat;
    background-position: 45px 29px;
    background-size: 18px;
    /* @media screen and (max-width: $screen-md-max) {
            background-position: 55px 30px;
            font-size: $btn-authorize-font-size-tablet;
            padding: $btn-authorize-padding-laptop;
        } */ }
    @media screen and (max-width: 991px) {
      .btn-authorize:before {
        background-position: 43px 26px;
        background-size: 16px; } }
    @media screen and (max-width: 767px) {
      .btn-authorize:before {
        background-position: 43px 25px; } }
    @media screen and (max-width: 480px) {
      .btn-authorize:before {
        display: none; } }
  .btn-authorize--content {
    width: 37px;
    height: 46px;
    padding: 0;
    font-size: 0;
    background-size: 16px; }
    @media screen and (max-width: 1199px) {
      .btn-authorize--content {
        height: 42px; } }
    @media screen and (max-width: 991px) {
      .btn-authorize--content {
        background-position: 10px 12px; } }
    @media screen and (max-width: 767px) {
      .btn-authorize--content {
        height: 36px;
        background-position: 10px 8px; } }
    .btn-authorize--content:before {
      background-position: 45px 30px;
      background-size: 16px; }
      @media screen and (max-width: 991px) {
        .btn-authorize--content:before {
          background-position: 45px 30px; } }
      @media screen and (max-width: 767px) {
        .btn-authorize--content:before {
          background-position: 46px 26px; } }
  .btn-authorize--get {
    background-image: none;
    padding: 11px 10px 10px;
    /* @media screen and (max-width: 500px) {
            width: 160px;
            padding-left: 20px;
        }
        @media screen and (max-width: 350px) {
            width: 165px;
            font-size: 14px;
        } */ }
    @media screen and (max-width: 1199px) {
      .btn-authorize--get {
        font-size: 15px; } }
    @media screen and (max-width: 1199px) {
      .btn-authorize--get {
        padding: 11px 4px 10px; } }
    @media screen and (max-width: 767px) {
      .btn-authorize--get {
        height: 36px;
        width: 39px;
        font-size: 0;
        background-image: url("../images/icons/card.svg");
        background-repeat: no-repeat;
        background-color: #4281ca;
        background-size: 30px;
        background-position: 5px 3px; } }
    .btn-authorize--get:before {
      background-image: none; }
      @media screen and (max-width: 767px) {
        .btn-authorize--get:before {
          display: none; } }
  .btn-authorize:hover:before, .btn-authorize:focus:before, .btn-authorize:active:focus:before {
    -webkit-transform: scale(0);
    -ms-transform: scale(0);
    transform: scale(0); }

.btn-share {
  font-family: "HelveticaNeueCyr Medium", Arial, sans-serif;
  color: #fff;
  padding: 0 20px;
  height: 55px;
  line-height: 55px;
  background-color: #ed592b;
  border: none;
  margin-bottom: 10px;
  transition: background-color 0.3s; }
  @media screen and (max-width: 1500px) {
    .btn-share {
      height: 40px;
      line-height: 40px;
      font-size: 13px; } }
  @media screen and (max-width: 1199px) {
    .btn-share {
      display: inline-block; } }
  @media screen and (max-width: 767px) {
    .btn-share {
      display: none; } }
  .btn-share:hover, .btn-share:focus {
    background-color: #d03505;
    color: #fff; }

/******************************
 * Primary button
 *
 *
 *
 **************************/

/*********************************
 * Info button
 *
 *
 *
 **********************************/

/***************************************
 * Success button
 *
 *
 *
 *
 ************************************/
.btn-success {
  position: relative;
  overflow: hidden;
  color: #ffffff;
  background-color: #00b181;
  border-color: transparent;
  border-radius: 5px;
  border-width: 0;
  -webkit-transform: perspective(1px) translateZ(0);
  transform: perspective(1px) translateZ(0);
  box-shadow: 0 0 1px transparent;
  position: relative;
  transition-property: color;
  transition-duration: 0.3s;
  padding: 0;
  min-width: 190px; }
  .btn-success:focus {
    color: #ffffff;
    background-color: #007e5c;
    border-color: transparent; }
  .btn-success:hover {
    color: #ffffff;
    background-color: #007e5c;
    border-color: transparent; }
  .btn-success:active, .btn-success.active {
    color: #ffffff;
    background-color: #007e5c;
    border-color: transparent; }
    .btn-success:active:hover, .btn-success:active:focus, .btn-success.active:hover, .btn-success.active:focus {
      color: #ffffff;
      background-color: #005a42;
      border-color: transparent; }
  .btn-success:active, .btn-success.active {
    background-image: none; }
   .btn-success[disabled]:hover, .btn-success[disabled]:focus {
    background-color: #00b181;
    border-color: transparent; }
  .btn-success:before {
    content: "";
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #4281ca;
    border-radius: 100%;
    -webkit-transform: scale(2);
    -ms-transform: scale(2);
        transform: scale(2);
    transition-property: -webkit-transform;
    transition-property: transform;
    transition-property: transform, -webkit-transform;
    -webkit-transition-duration: 0.3s;
    transition-du2ration: 0.3s;
    transition-timing-function: ease-out; }
  .btn-success:hover:before {
    webkit-transform: scale(0);
    -webkit-transform: scale(0);
        -ms-transform: scale(0);
            transform: scale(0); }
  .btn-success span {
    display: block; }

/****************************
 * Warning button
 *
 *
 *
 *
 ******************************************/

.btn-call,
.btn-video {
  background-color: transparent;
  color: #fff;
  padding: 8px 20px;
  border-radius: 5px;
  border: 1px solid #6da7c6;
  font-size: 14px;
  text-transform: none;
  transition: background-color 0.3s; }
  @media screen and (max-width: 767px) {
    .btn-call,
    .btn-video {
      padding: 5px 10px; } }
  .btn-call:hover,
  .btn-video:hover {
    background-color: rgba(255, 255, 255, 0.3);
    color: #fff; }

.btn-video {
  font-size: 20px;
  background-color: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3); }

.btn-user-close {
  position: absolute;
  right: 10px;
  top: 10px;
  width: 7px;
  height: 7px;
  background-image: url("../images/user-close.png");
  background-repeat: no-repeat;
  background-size: 7px 7px;
  background-color: transparent;
  border: none;
  padding: 0; }
  .btn-user-close:focus {
    outline: none;
    box-shadow: none; }

/********************************
 * Next button
 *
 *
 *
 *
 ************************************/

/********************************
 * Personal button
 *
 *
 *
 *
 ***********************/
.btn-personal, .btn-success {
  position: relative;
  overflow: hidden;
  color: #ffffff;
  background-color: #45bc75;
  border-color: transparent;
  border-radius: 5px;
  border-width: 0;
  -webkit-transform: perspective(1px) translateZ(0);
  transform: perspective(1px) translateZ(0);
  box-shadow: 0 0 1px transparent;
  position: relative;
  transition-property: color;
  transition-duration: 0.3s;
  padding: 15px 23px;
  min-width: 165px; }
  .btn-personal:focus, .btn-success:focus {
    color: #ffffff;
    background-color: #37975e;
    border-color: transparent; }
  .btn-personal:hover, .btn-success:hover {
    color: #ffffff;
    background-color: #37975e;
    border-color: transparent; }
  .btn-personal:active, .btn-success:active, .btn-personal.active, .active.btn-success {
    color: #ffffff;
    background-color: #37975e;
    border-color: transparent; }
    .btn-personal:active:hover, .btn-success:active:hover, .btn-personal:active:focus, .btn-success:active:focus, .btn-personal.active:hover, .active.btn-success:hover, .btn-personal.active:focus, .active.btn-success:focus {
      color: #ffffff;
      background-color: #2d7d4d;
      border-color: transparent; }
  .btn-personal:active, .btn-success:active, .btn-personal.active, .active.btn-success {
    background-image: none; }
   .btn-personal[disabled]:hover, [disabled].btn-success:hover, .btn-personal[disabled]:focus, [disabled].btn-success:focus {
    background-color: #45bc75;
    border-color: transparent; }
  .btn-personal:before, .btn-success:before {
    content: "";
    position: absolute;
    z-index: -1;
    top: -17px;
    left: -35px;
    right: -35px;
    bottom: -17px;
    background: #45bc75;
    border-radius: 100%;
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
        transform: scale(1);
    transition-property: -webkit-transform;
    transition-property: transform;
    transition-property: transform, -webkit-transform;
    transition-duration: 0.3s;
    transition-timing-function: ease-out; }
  .btn-personal:hover, .btn-success:hover {
    background-color: #3068a9; }
    .btn-personal:hover:before, .btn-success:hover:before {
      webkit-transform: scale(0);
      -webkit-transform: scale(0);
          -ms-transform: scale(0);
              transform: scale(0); }

/**************************
 * Cancel button
 *
 *
 *
 *
 **********************************/

/*****************************************
 * Order button
 *
 *
 *
 *******************************/

/**************************
 * Change button
 *
 *
 *
 ******************************/

/*******************************
 * News btn
 *
 *
 */

/*******************************
 * Login button
 *
 *
 *
 *
 **********************************/
.btn-login {
  font-size: 18px; }
  .btn-login:before,
  .btn-login span {
    padding: 10px 45px; }

.btn-arrow-animate {
  position: relative;
  overflow: hidden;
  padding: 10px 30px;
  color: #ffffff;
  background-color: #00b181;
  border-color: transparent;
  border-radius: 5px;
  border-width: 0; }
  .btn-arrow-animate:focus {
    color: #ffffff;
    background-color: #007e5c;
    border-color: transparent; }
  .btn-arrow-animate:hover {
    color: #ffffff;
    background-color: #007e5c;
    border-color: transparent; }
  .btn-arrow-animate:active, .btn-arrow-animate.active {
    color: #ffffff;
    background-color: #007e5c;
    border-color: transparent; }
    .btn-arrow-animate:active:hover, .btn-arrow-animate:active:focus, .btn-arrow-animate.active:hover, .btn-arrow-animate.active:focus {
      color: #ffffff;
      background-color: #005a42;
      border-color: transparent; }
  .btn-arrow-animate:active, .btn-arrow-animate.active {
    background-image: none; }
   .btn-arrow-animate[disabled]:hover, .btn-arrow-animate[disabled]:focus {
    background-color: #00b181;
    border-color: transparent; }
  @media screen and (max-width: 1600px) {
    .btn-arrow-animate {
      padding: 7px 30px; } }
  .btn-arrow-animate:hover {
    background-color: #00b181; }
    .btn-arrow-animate:hover .icon-arrow-animate {
      opacity: 1;
      width: 32px;
      margin-left: 20px; }
  .btn-arrow-animate span {
    display: inline-block;
    vertical-align: middle; }
  .btn-arrow-animate .icon-arrow-animate {
    display: inline-block;
    opacity: 0;
    width: 0;
    height: 24px;
    background-image: url("../images/fav-32.png");
    background-repeat: no-repeat;
    background-size: 32px 24px;
    transition: all 0.3s; }
  .btn-arrow-animate--inverse {
    color: #ffffff;
    background-color: #4281ca;
    border-color: transparent; }
    .btn-arrow-animate--inverse:focus {
      color: #ffffff;
      background-color: #3068a9;
      border-color: transparent; }
    .btn-arrow-animate--inverse:hover {
      color: #ffffff;
      background-color: #3068a9;
      border-color: transparent; }
    .btn-arrow-animate--inverse:active, .btn-arrow-animate--inverse.active {
      color: #ffffff;
      background-color: #3068a9;
      border-color: transparent; }
      .btn-arrow-animate--inverse:active:hover, .btn-arrow-animate--inverse:active:focus, .btn-arrow-animate--inverse.active:hover, .btn-arrow-animate--inverse.active:focus {
        color: #ffffff;
        background-color: #28578e;
        border-color: transparent; }
    .btn-arrow-animate--inverse:active, .btn-arrow-animate--inverse.active {
      background-image: none; }
     .btn-arrow-animate--inverse[disabled]:hover, .btn-arrow-animate--inverse[disabled]:focus {
      background-color: #4281ca;
      border-color: transparent; }

/*****************************
 * Button size
 *
 *
 *
 *
 ****************************/

.btn-sm {
  font-size: 17px;
  padding: 10px 23px; }
  .btn-sm span, .btn-sm:before {
    padding: 10px 35px; }

/*********************
 * Buttons wrappers
 *
 *
 *
 *
 *
 *****************************/

@-webkit-keyframes animaciya {
  from {
    background-color: #58b4e5;
    border-color: #58b4e5; }
  to {
    background-color: #0056b8;
    border-color: #0056b8; } }

@keyframes animaciya {
  from {
    background-color: #58b4e5;
    border-color: #58b4e5; }
  to {
    background-color: #0056b8;
    border-color: #0056b8; } }

/*_____________all styles______________*/

/*------------------header------------------*/
/* 
.header_c {
    height: $header_c-height;
    @media screen and (max-width: $screen-md-max) {
        height: 0;
        display: none;
    }
    @media screen and (max-width: $screen-sm-max) {
        height: 0;
        display: none;
    }
} */
.header_h {
  height: 100px !important;
  position: relative;
  top: 0; }
  @media screen and (max-width: 1300px) {
    .header_h {
      height: 62px !important; } }
  @media screen and (max-width: 1024px) {
    .header_h {
      display: none; } }
  @media screen and (max-width: 991px) {
    .header_h {
      height: 63px; } }
  @media screen and (max-width: 767px) {
    .header_h {
      /* display: none; */ } }

.new-main .header {
  height: 100px;
  position: fixed;
  left: 0;
  right: 0;
  z-index: 100;
  top: 0;
  width: 100%;
  background-color: #fff;
  border-bottom: 1px solid #e2e2e2;
  transition: all 1s; }
  .new-main .header:before, .new-main .header:after {
    content: " ";
    display: table; }
  .new-main .header:after {
    clear: both; }
  @media screen and (max-width: 1300px) {
    .new-main .header {
      height: 62px; } }
  @media screen and (max-width: 1024px) {
    .new-main .header {
      position: static !important; } }
  @media screen and (max-width: 767px) {
    .new-main .header {
      position: relative !important; } }
  .new-main .header-white {
    background-color: #fff;
    border-bottom: 1px solid #eaeaea; }
  .new-main .header-group {
    display: inline-block;
    vertical-align: top;
    padding-top: 27px;
    transition: padding 1s; }
    @media screen and (max-width: 1300px) {
      .new-main .header-group {
        padding-top: 8px; } }
    @media screen and (max-width: 991px) {
      .new-main .header-group {
        padding-top: 0;
        vertical-align: top;
        display: block;
        float: right; } }
    @media screen and (max-width: 991px) {
      .new-main .header-group--auth {
        margin: 11px 0 0 0; } }
    @media screen and (max-width: 767px) {
      .new-main .header-group--auth {
        display: none; } }
  .new-main .header-logo {
    position: relative;
    display: block;
    border-bottom: none;
    margin-top: 33px; }
    @media screen and (max-width: 1199px) {
      .new-main .header-logo {
        width: 150px; } }
    @media screen and (max-width: 410px) {
      .new-main .header-logo {
        width: 140px; } }
    @media screen and (max-width: 340px) {
      .new-main .header-logo {
        width: 110px; } }
    .new-main .header-logo img {
      width: 100%; }
    @media screen and (max-width: 1300px) {
      .new-main .header-logo {
        margin-top: 16px; } }
    @media screen and (max-width: 1199px) {
      .new-main .header-logo {
        margin-top: 20px; } }
    @media screen and (max-width: 767px) {
      .new-main .header-logo {
        margin-top: 16px; } }
    .new-main .header-logo span {
      position: absolute;
      bottom: -2px;
      right: 3px;
      font-size: 8.4px;
      font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
      letter-spacing: 1.2px;
      white-space: nowrap;
      color: #003764; }
      @media screen and (max-width: 1199px) {
        .new-main .header-logo span {
          font-size: 6.9px;
          right: 0px; } }
      @media screen and (max-width: 340px) {
        .new-main .header-logo span {
          font-size: 4.3px;
          right: 1px; } }
    .new-main .header-right--top {
      text-align: right; }
  .new-main .header-content {
    /* &.affix {
            .menu-holder {
                width: 52%; 
            }
        } */ }

.header-content .authorize {
  margin-right: 5px; }

@media screen and (max-width: 1009px) {
  .header-content .navbar {
    margin-right: 0; } }

.header-content .navbar-nav {
  margin-right: 0;
  text-align: center; }

@media screen and (max-width: 991px) {
  .header-content .language-wr {
    padding-top: 5px; } }

@media screen and (max-width: 767px) {
  .header-content .navbar-collapse {
    padding-left: 0; } }

.authorize {
  display: inline-block;
  vertical-align: top;
  margin: 0 5px 0 0;
  padding-top: 27px;
  width: calc(100% - 55px); }
  @media screen and (max-width: 1300px) {
    .authorize {
      padding-top: 7px; } }
  @media screen and (max-width: 991px) {
    .authorize {
      padding-top: 12px; } }
  @media screen and (max-width: 767px) {
    .authorize {
      width: 80%;
      padding-top: 11px; } }
  @media screen and (max-width: 700px) {
    .authorize {
      width: 65%; } }
  @media screen and (max-width: 480px) {
    .authorize {
      padding-top: 11px;
      float: right; } }
  @media screen and (max-width: 340px) {
    .authorize {
      width: 47%; } }

.new-main .language-wr {
  display: inline-block;
  line-height: 2.2;
  text-align: center; }
  @media screen and (max-width: 991px) {
    .new-main .language-wr {
      vertical-align: top; } }
  @media screen and (max-width: 767px) {
    .new-main .language-wr {
      margin-top: 20px;
      text-align: left;
      padding-left: 20px;
      margin-bottom: 20px; } }

@media screen and (max-width: 350px) {
  .new-main .header-content .language-wr {
    margin-right: 2px;
    margin-left: 3px;
    margin-top: 5px; } }

.new-main .lang-link {
  border-radius: 50%;
  height: 45px;
  width: 45px;
  line-height: 45px;
  vertical-align: middle;
  display: inline-block;
  border: 1px solid #dadada;
  color: #0055b8;
  text-decoration: none; }
  @media screen and (max-width: 1300px) {
    .new-main .lang-link {
      height: 43px;
      width: 43px;
      line-height: 43px; } }
  @media screen and (max-width: 991px) {
    .new-main .lang-link {
      line-height: 34px;
      height: 35px;
      width: 35px; } }
  @media screen and (max-width: 767px) {
    .new-main .lang-link {
      width: auto;
      height: auto;
      line-height: 1.5;
      border-radius: 0;
      padding: 0;
      border: none;
      display: inline; } }
  .new-main .lang-link:hover {
    border-color: #0055b8; }

.new-main .lang-name {
  font-size: 16px; }
  @media screen and (max-width: 991px) {
    .new-main .lang-name {
      font-size: 14px; } }

/*----------------------section credit-----------------------*/
  .credit-header {
    font: 20px "HelveticaNeueCyr Bold", Arial, sans-serif;
    color: #003764;
    text-align: left;
    background-color: #f1f1f1;
    padding: 20px;
    margin: 0 -30px 24px;
    border-radius: 5px 5px 0 0; }
    @media screen and (max-width: 767px) {
      .credit-header {
        font-size: 17px; } }

/**
 * Calculator table
 */
.calculator-hb-text {
  display: none; }

.calculator-formula {
  color: #ccc;
  text-decoration: line-through; }
  @media screen and (max-width: 768px) {
    .calculator-formula {
      display: block; } }

.calculator-hb {
  padding: 5px 10px;
  border-radius: 25px;
  font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
  font-size: 20px;
  color: #ffca54;
  border: 1px dashed #ffca54;
  margin-left: 10px; }

.calculator-heading {
  text-align: left;
  font: 20px/1.2 "HelveticaNeueCyr Bold", Arial, sans-serif;
  color: #003764;
  margin-bottom: 20px; }
  @media screen and (max-width: 1400px) {
    .calculator-heading {
      font-size: 19px; } }
  @media screen and (max-width: 991px) {
    .calculator-heading {
      margin-bottom: 15px; } }
  @media screen and (max-width: 767px) {
    .calculator-heading {
      font-size: 20px;
      margin-bottom: 5px; } }
  .calculator-heading--top {
    position: relative;
    border-radius: 6px 6px 0 0;
    text-align: left;
    padding: 20px;
    background-color: #f1f1f1;
    font: 22px / 1.2 "HelveticaNeueCyr Medium", Arial, sans-serif; }
    @media screen and (max-width: 1800px) {
      .calculator-heading--top {
        padding: 15px 30px; } }
    @media screen and (max-width: 767px) {
      .calculator-heading--top {
        padding: 15px 80px 15px 20px; } }
    @media screen and (max-width: 500px) {
      .calculator-heading--top {
        padding-right: 120px; } }
    @media screen and (max-width: 480px) {
      .calculator-heading--top {
        padding: 10px 110px 10px 20px;
        font-size: 15px; } }
    @media screen and (max-width: 374px) {
      .calculator-heading--top {
        font-size: 13px; } }
    .calculator-heading--top svg {
      width: 25px;
      height: 25px;
      fill: currentColor;
      color: #003764;
      margin-right: 10px; }
      @media screen and (max-width: 480px) {
        .calculator-heading--top svg {
          margin-right: 3px;
          width: 20px;
          height: 20px; } }
    .calculator-heading--top img,
    .calculator-heading--top svg,
    .calculator-heading--top span,
    .calculator-heading--top strong {
      display: inline-block;
      vertical-align: bottom; }
    .calculator-heading--top strong {
      color: #0056b8; }
    .calculator-heading--top > strong {
      color: #0b406b; }
    @media screen and (max-width: 380px) {
      .calculator-heading--top span > strong {
        padding-left: 0; } }
    @media screen and (max-width: 599px) {
      .calculator-heading--top .you-get-money {
        padding-left: 0; } }
  .calculator-heading--skidka {
    background-color: #ff474a; }
    @media screen and (max-width: 991px) {
      .calculator-heading--skidka {
        padding: 10px 20px; } }
    .calculator-heading--skidka .calculator-skidka-text {
      display: block;
      color: #fff; }
      @media screen and (max-width: 991px) {
        .calculator-heading--skidka .calculator-skidka-text {
          text-align: center; } }
    .calculator-heading--skidka .calculator-hb-text,
    .calculator-heading--skidka .calculator-banner-text {
      display: none; }
    .calculator-heading--skidka .neangelu-labe {
      border-radius: 50%;
      box-shadow: 10px 10px 54px -16px #ff454b; }
      @media screen and (max-width: 991px) {
        .calculator-heading--skidka .neangelu-labe {
          display: none; } }
  .calculator-heading--hb {
    background-color: #7e57c2; }
    @media screen and (max-width: 991px) {
      .calculator-heading--hb {
        padding: 10px 20px; } }
    .calculator-heading--hb .neangelu-labe {
      right: -60px; }
      @media screen and (max-width: 1440px) {
        .calculator-heading--hb .neangelu-labe {
          right: -30px; } }
      @media screen and (max-width: 1199px) {
        .calculator-heading--hb .neangelu-labe {
          right: 0; } }
    .calculator-heading--hb .calculator-banner-text {
      display: none; }
    .calculator-heading--hb .calculator-hb-text {
      display: block;
      color: #fff; }
      @media screen and (max-width: 991px) {
        .calculator-heading--hb .calculator-hb-text {
          text-align: center; } }
    .calculator-heading--hb .neangelu-labe {
      border-radius: 50%;
      box-shadow: 10px 10px 54px -16px #7e57c2; }
      @media screen and (max-width: 991px) {
        .calculator-heading--hb .neangelu-labe {
          display: none; } }

.calculator-skidka-text {
  display: none; }
  .calculator-labe-zero {
    position: absolute;
    right: 0;
    bottom: 15px;
    font-size: 0;
    border-radius: 50%;
    box-shadow: 4px -1px 66px -13px #a96fdf; }
    @media screen and (max-width: 1700px) {
      .calculator-labe-zero {
        max-width: 100px;
        right: 30px; }
        .calculator-labe-zero img {
          border-radius: 50%; } }
    @media screen and (max-width: 1199px) {
      .calculator-labe-zero {
        max-width: 100px;
        right: 20px; } }
    @media screen and (max-width: 767px) {
      .calculator-labe-zero {
        max-width: 75px;
        bottom: 10px;
        right: 10px; } }

.calculator-left {
  border-right: 1px solid #eaeaea; }
  @media screen and (max-width: 600px) {
    .calculator-left {
      border-right: none; } }
  @media screen and (max-width: 767px) {
    .calculator-left .calculator-heading {
      display: none; } }

.calculator-row {
  display: table;
  width: 100%; }

.calculator-left, .calculator-right {
  padding-top: 20px;
  display: table-cell;
  width: 56%;
  vertical-align: top;
  padding-left: 15px; }
  @media screen and (max-width: 1600px) {
    .calculator-left, .calculator-right {
      padding-left: 20px; } }
  @media screen and (max-width: 767px) {
    .calculator-left, .calculator-right {
      padding-left: 20px;
      width: 55%; } }
  @media screen and (max-width: 690px) {
    .calculator-left, .calculator-right {
      width: 100%;
      display: block; } }

.calculator-left {
  padding-right: 0;
  padding-bottom: 23px;
  padding-left: 0;
  padding-top: 5px; }
  @media screen and (max-width: 767px) {
    .calculator-left {
      padding: 0; } }

.calculator-right {
  padding-bottom: 20px;
  padding-left: 15px;
  padding-right: 15px;
  width: 44%;
  /* @media screen and (max-width: 1600px) {
            padding-left: 20px;
            width: 40%;
        }*/ }
  @media screen and (max-width: 1400px) {
    .calculator-right {
      padding-top: 20px; } }
  @media screen and (max-width: 991px) {
    .calculator-right {
      width: 100%;
      display: block;
      /*padding-left: 20px;*/
      padding-bottom: 0; } }
  @media screen and (max-width: 767px) {
    .calculator-right {
      padding-left: 15px;
      padding-bottom: 0;
      padding-top: 15px;
      padding-right: 15px; } }
  @media screen and (max-width: 767px) {
    .calculator-right .btn-arrow-animate {
      width: 100%;
      font-size: 20px;
      padding: 8px 30px 10px; } }

@media screen and (max-width: 767px) {
  .calculator-table {
    width: 100%; }
    .calculator-table:before, .calculator-table:after {
      content: " ";
      display: table; }
    .calculator-table:after {
      clear: both; } }

@media screen and (max-width: 840px) {
  .calculator-table .komission {
    text-transform: capitalize; } }

@media screen and (max-width: 840px) {
  .calculator-table .your {
    display: none; } }

@media screen and (max-width: 767px) {
  .calculator-table tr {
    width: 50%;
    float: left;
    display: block; } }

.calculator-table td {
  font: 18px/20px "HelveticaNeueCyr Medium", Arial, sans-serif;
  padding: 5px 10px;
  border: none;
  vertical-align: middle; }
  @media screen and (max-width: 767px) {
    .calculator-table td {
      display: block;
      text-align: left;
      font: 15px/15px "HelveticaNeueCyr Medium", Arial, sans-serif; } }
  .calculator-table td.calculator-take-sum, .calculator-table td.calculator-give-sum {
    font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
    color: #00b181; }
    @media screen and (max-width: 767px) {
      .calculator-table td.calculator-take-sum, .calculator-table td.calculator-give-sum {
        padding: 0; } }
  .calculator-table td.calculator-give-sum {
    color: #4281ca; }

.calculator-table--wr {
  margin-bottom: 10px; }
  @media screen and (max-width: 767px) {
    .calculator-table--wr {
      width: 66.666%;
      float: left; } }
  @media screen and (max-width: 1199px) {
    .calculator-table--wr + .text-center {
      text-align: left; } }
  @media screen and (max-width: 767px) {
    .calculator-table--wr + .calculator-table--wr {
      width: 33.333%; } }
  @media screen and (max-width: 767px) {
    .calculator-table--wr + .calculator-table--wr tr {
      display: block;
      float: none;
      width: 100%; } }
  @media screen and (max-width: 767px) {
    .calculator-table--wr + .calculator-table--wr tr + tr .calculator-td-give,
    .calculator-table--wr + .calculator-table--wr tr + tr .calculator-give-sum {
      font-size: 13px;
      text-transform: lowercase;
      color: #003764;
      display: table-cell;
      padding: 0; } }
  @media screen and (max-width: 340px) {
    .calculator-table--wr + .calculator-table--wr tr + tr .calculator-td-give,
    .calculator-table--wr + .calculator-table--wr tr + tr .calculator-give-sum {
      font-size: 11px; } }
  .calculator-table--wr + .calculator-table--wr tr + tr .calculator-give-sum {
    font-family: "HelveticaNeueCyr Medium", Arial, sans-serif; }

.calculator-td-heading {
  min-width: 155px; }
  @media screen and (max-width: 840px) {
    .calculator-td-heading {
      min-width: 125px; } }
  @media screen and (max-width: 767px) {
    .calculator-td-heading {
      min-width: 100px; } }

.calculator-banner-text svg {
  display: inline-block;
  vertical-align: top; }
  @media screen and (max-width: 767px) {
    .calculator-banner-text svg {
      display: none; } }

.calculator-images {
  padding: 0;
  margin: 0;
  list-style-type: none;
  padding-top: 20px;
  font-size: 0;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  /* img {
        display: inline-block;
    }
    &:after {
        content: '';
        display: inline-block;
        width: 100%;
        height: 0;
        zoom: 1;
        overflow: hidden;
        @media screen and (max-width: $screen-xs-max) {
            display: none;
        }
    } */ }
  @media screen and (max-width: 991px) {
    .calculator-images {
      padding: 20px 0; } }
  @media screen and (max-width: 767px) {
    .calculator-images {
      text-align: left; } }
  .calculator-images li {
    display: inline-block;
    /* &:not(:last-child) {
            margin-right: 6%;
            @media screen and (max-width: 1200px) {
                margin-right: 5%;
            }
            @media screen and (max-width: $screen-xs-max) {
                margin-right: 4%;
            }
            @media screen and (max-width: 500px) {
                margin-right: 10%;
            }
            @media screen and (max-width: 380px) {
                margin-right: 8%;
            }
            @media screen and (max-width: 374px) {
                margin-right: 6%;
            }
            @media screen and (max-width: 350px) {
                margin-right: 3%;
            }
        }
        
        @media screen and (max-width: $screen-xs-max) {
            margin-right: 10px;
        } */ }

.loan-days {
  margin-right: 3px; }

/* .politic {
    padding: 20px 0;
    a{
        border: none;
        text-decoration: none;
        color: #fff;
        cursor: pointer;
        &:hover {
            text-decoration: underline;
        }
    }
} */

@-webkit-keyframes newyear {
  0% {
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
    transform: rotate(0deg); }
  50% {
    -webkit-transform: rotate(-4deg);
    -ms-transform: rotate(-4deg);
    transform: rotate(-4deg); }
  100% {
    -webkit-transform: rotate(4deg);
    -ms-transform: rotate(4deg);
    transform: rotate(4deg); } }

@keyframes newyear {
  0% {
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
    transform: rotate(0deg); }
  50% {
    -webkit-transform: rotate(-4deg);
    -ms-transform: rotate(-4deg);
    transform: rotate(-4deg); }
  100% {
    -webkit-transform: rotate(4deg);
    -ms-transform: rotate(4deg);
    transform: rotate(4deg); } }

/**
 * Проведение А/б тестирования(после удалить)
 *
 */
.big-slider {
  position: relative;
  background-color: #ffffff;
  display: inline-block;
  border-radius: 7px 7px 0 0;
  border: 1px solid #d6d6d6; }
  .big-slider--shit {
    display: block;
    margin-top: 0;
    margin-left: 0;
    width: 95%;
    padding: 0; }
    @media screen and (max-width: 1199px) {
      .big-slider--shit {
        width: 100%; } }
  @media screen and (max-width: 767px) {
    .slider-holder {
      padding: 0 20px; } }
  .slider-label {
    position: relative;
    float: left;
    color: #7b7b7b;
    font: 16px "HelveticaNeueCyr Medium", Arial, sans-serif; }
    @media screen and (max-width: 767px) {
      .slider-label {
        display: none;
        font-size: 13px; } }
    .slider-label--right {
      float: right; }
  .slider-control--wr {
    float: right;
    text-align: right;
    margin-top: -10px;
    width: 37%;
    font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
    font-size: 25px;
    color: #00b181; }
    @media screen and (max-width: 1279px) {
      .slider-control--wr {
        width: 39%; } }
    @media screen and (max-width: 991px) {
      .slider-control--wr {
        font-size: 20px; } }
    @media screen and (max-width: 767px) {
      .slider-control--wr {
        width: 44%;
        margin-top: -4px;
        margin-bottom: 7px;
        font-size: 20px; } }
    @media screen and (max-width: 350px) {
      .slider-control--wr {
        width: 50%; } }
  .slider-days {
    padding: 20px 20px 20px 30px; }
    @media screen and (max-width: 767px) {
      .slider-days {
        padding: 15px 0 10px;
        border-bottom: 1px solid #eaeaea; } }
    .slider-days .slider-wrapper {
      /* .slider-track {
                width: 65%!important;
            } */ }
      .slider-days .slider-wrapper:before {
        content: '';
        position: absolute;
        right: calc(35% - 13px);
        top: 3px;
        z-index: 2;
        width: 14px;
        height: 14px;
        background-image: url("../assets/images/calc-ellipse.png");
        background-repeat: no-repeat;
        background-size: cover; }
      .slider-days .slider-wrapper:after {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        background-image: url("../assets/images/calc-limit-bg.png");
        background-size: 100% 10px;
        background-position: 0 0px;
        background-repeat: no-repeat;
        height: 10px;
        width: 100%;
        top: 5px;
        border-radius: 0 4px 4px 0; }
    .slider-days .slider-label--right {
      margin-right: 7%; }
      @media screen and (max-width: 1199px) {
        .slider-days .slider-label--right {
          margin-right: 13%; } }
      @media screen and (max-width: 700px) {
        .slider-days .slider-label--right {
          margin-right: 22%; } }
      @media screen and (max-width: 500px) {
        .slider-days .slider-label--right {
          margin-right: 16%; } }
  .slider-money {
    position: relative;
    padding: 30px 20px 80px 30px;
    border-bottom: 1px solid #eaeaea; }
    .slider-money .slider-wrapper:before {
      content: '';
      position: absolute;
      right: calc(35% - 13px);
      top: 3px;
      z-index: 2;
      width: 14px;
      height: 14px;
      background-image: url("../assets/images/calc-ellipse.png");
      background-repeat: no-repeat;
      background-size: cover; }
    .slider-money .slider-wrapper:after {
      content: "";
      position: absolute;
      left: 0;
      right: 0;
      background-image: url("../assets/images/calc-limit-bg.png");
      background-size: 100% 10px;
      background-position: 0 0px;
      background-repeat: no-repeat;
      height: 10px;
      width: 100%;
      top: 5px;
      border-radius: 0 4px 4px 0; }
    .slider-money .slider-label--right {
      margin-right: 5%; }
    .slider-money-share {
      position: absolute;
      left: 30%;
      bottom: 20px;
      padding: 3px 10px;
      font-size: 18px;
      font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
      color: #fff;
      border-radius: 0 15px 15px 15px;
      background-color: #ff7043;
      display: none; }
      @media screen and (max-width: 1400px) {
        .slider-money-share {
          bottom: 13px; } }
      @media screen and (max-width: 1300px) {
        .slider-money-share {
          bottom: 10px; } }
      @media screen and (max-width: 767px) {
        .slider-money-share {
          font-size: 10px; } }
      .slider-money-share.active {
        display: block; }
    @media screen and (max-width: 767px) {
      .slider-money {
        padding: 15px 0; } }
    .slider-money--label {
      float: left;
      width: 63%;
      text-align: left;
      font: 18px "HelveticaNeueCyr Medium", Arial, sans-serif;
      color: #003764; }
      @media screen and (max-width: 1279px) {
        .slider-money--label {
          width: 61%; } }
      @media screen and (max-width: 767px) {
        .slider-money--label {
          width: 56%;
          font-size: 16px; } }
      @media screen and (max-width: 480px) {
        .slider-money--label {
          font-size: 15px; } }
      @media screen and (max-width: 350px) {
        .slider-money--label {
          width: 50%; } }
    .slider-money--control {
      width: 75px;
      font: 25px "HelveticaNeueCyr Bold", Arial, sans-serif;
      text-align: right;
      line-height: 33px;
      height: 33px;
      display: inline-block;
      border: none;
      color: #00b181;
      background-color: transparent; }
      .slider-money--control:focus {
        outline: none; }
      @media screen and (max-width: 1199px) {
        .slider-money--control {
          width: 80px; } }
      @media screen and (max-width: 991px) {
        .slider-money--control {
          line-height: 25px;
          font-size: 22px;
          padding-right: 2px; } }
      @media screen and (max-width: 767px) {
        .slider-money--control {
          font-size: 24px; } }
      @media screen and (max-width: 370px) {
        .slider-money--control {
          width: 70px; } }
      .slider-money--control::-webkit-input-placeholder {
        /* Chrome/Opera/Safari */
        color: #00b181; }
      .slider-money--control::-moz-placeholder {
        /* Firefox 19+ */
        color: #00b181; }
      .slider-money--control:-ms-input-placeholder {
        /* IE 10+ */
        color: #00b181; }
      .slider-money--control:-moz-placeholder {
        /* Firefox 18- */
        color: #00b181; }
    .slider-money--holder {
      margin: 0 0 20px; }
      .slider-money--holder:before, .slider-money--holder:after {
        content: " ";
        display: table; }
      .slider-money--holder:after {
        clear: both; }
      @media screen and (max-width: 1500px) {
        .slider-money--holder {
          margin-bottom: 4px; } }
      @media screen and (max-width: 767px) {
        .slider-money--holder {
          margin-bottom: -15px; } }

.slider-wrapper .slider-label--nomargin {
  margin-right: 0;
  text-decoration: underline;
  color: #0056b8;
  cursor: pointer;
  font-family: "HelveticaNeueCyr Medium", Arial, sans-serif; }

.slider-tooltip {
  position: absolute;
  opacity: 0;
  visibility: hidden;
  width: 196px;
  left: calc(100% + 15px);
  top: 0;
  padding: 14px 16px;
  font-family: HelveticaNeueCyr Roman, Arial, sans-serif;
  font-size: 14px;
  border-radius: 5px;
  line-height: 15px;
  color: #393939;
  transition: opacity .3s, visibility .3s;
  z-index: 20;
  box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, 0.55);
  background-color: #fff; }
  @media screen and (max-width: 767px) {
    .slider-tooltip {
      left: auto;
      right: 0;
      top: calc(100% + 15px);
      width: 115px;
      padding: 10px; } }
  .slider-tooltip:after {
    content: '';
    position: absolute;
    right: calc(100% - 6px);
    top: 13px;
    border: 1px solid #cdcdcd;
    width: 12px;
    height: 12px;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg);
    border-top: none;
    border-right: none;
    background-color: #fff; }
    @media screen and (max-width: 767px) {
      .slider-tooltip:after {
        display: none; } }

.slider-label:hover .slider-tooltip {
  opacity: 1;
  visibility: visible; }

.slider-shit {
  position: relative; }
  .slider-shit .container-fluid {
    position: relative; }
  .slider-shit .slider-action {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 70%;
    z-index: 1; }
    @media screen and (max-width: 1300px) {
      .slider-shit .slider-action {
        right: 20px; } }
    @media screen and (max-width: 1199px) {
      .slider-shit .slider-action {
        bottom: -70px;
        width: 97%; } }
    @media screen and (max-width: 1100px) {
      .slider-shit .slider-action {
        width: auto;
        left: 0;
        right: 0; } }
    @media screen and (max-width: 991px) {
      .slider-shit .slider-action {
        bottom: 0; } }
    @media screen and (max-width: 820px) {
      .slider-shit .slider-action {
        position: relative;
        left: 0;
        margin: 0 -15px; } }
    @media screen and (max-width: 600px) {
      .slider-shit .slider-action {
        margin-top: -170px; } }

/* credit zero banner*/
.credit-zero-left {
  position: absolute;
  bottom: 0;
  left: 80px;
  width: 30%; }
  @media screen and (max-width: 1500px) {
    .credit-zero-left {
      left: 20px;
      width: 25%; } }
  @media screen and (max-width: 1300px) {
    .credit-zero-left {
      left: 0; } }
  @media screen and (max-width: 1199px) {
    .credit-zero-left {
      bottom: auto;
      top: 2%; } }
  @media screen and (max-width: 767px) {
    .credit-zero-left {
      display: none; } }
  .credit-zero-left img {
    width: 100%; }
    @media screen and (max-width: 1300px) {
      .credit-zero-left img {
        height: auto !important; } }

.credit-zero-right {
  position: absolute;
  right: 50px;
  bottom: 0;
  width: 15%; }
  @media screen and (max-width: 1700px) {
    .credit-zero-right {
      width: 13.5%;
      right: 45px; } }
  @media screen and (max-width: 1500px) {
    .credit-zero-right {
      width: 11.53%;
      right: 20px; } }
  @media screen and (max-width: 1400px) {
    .credit-zero-right {
      width: 9.53%; } }
  @media screen and (max-width: 1300px) {
    .credit-zero-right {
      top: 5px;
      width: 9%;
      right: 10px;
      display: none; } }
  @media screen and (max-width: 1199px) {
    .credit-zero-right {
      display: block;
      bottom: auto;
      top: 20px;
      width: 16%; } }
  @media screen and (max-width: 767px) {
    .credit-zero-right {
      display: none; } }
  .credit-zero-right img {
    width: 100%; }
    @media screen and (max-width: 1300px) {
      .credit-zero-right img {
        height: auto !important; } }

.credit-zero-rate {
  position: absolute;
  bottom: 20px;
  left: 30%;
  font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
  font-size: 12px;
  color: #363636; }
  @media screen and (max-width: 1500px) {
    .credit-zero-rate {
      left: 24%; } }
  @media screen and (max-width: 1300px) {
    .credit-zero-rate {
      left: 20%; } }
  @media screen and (max-width: 1199px) {
    .credit-zero-rate {
      left: 30%;
      bottom: auto;
      top: 40%; } }
  @media screen and (max-width: 1100px) {
    .credit-zero-rate {
      top: 30%; } }
  @media screen and (max-width: 991px) {
    .credit-zero-rate {
      top: 25%; } }
  @media screen and (max-width: 820px) {
    .credit-zero-rate {
      top: 85%; } }
  @media screen and (max-width: 767px) {
    .credit-zero-rate {
      left: 20px;
      top: 110px; } }
  @media screen and (max-width: 570px) {
    .credit-zero-rate {
      top: 60px; } }
  .credit-zero-rate--inverse {
    color: #fff; }
    @media screen and (max-width: 767px) {
      .credit-zero-rate--inverse {
        color: #363636; } }

/*
.slider-header {
    position: absolute;
    top: 51px;
    left: 40%;
    width: 49%;
    padding-bottom: 20px;
    + img {
        width: 100%;
    }
    @media screen and (min-width: 1950px) {
        top: 15%;
    }
    @media screen and (max-width: 1900px) {
        top: 20px;
    }
    @media screen and (max-width: 1600px) {
        top: 15px;
        width: 55%;
    }
    @media screen and (max-width: 1500px) {
        left: 37%;
        width: 61.5%;
        top: 30px;
    }
    @media screen and (max-width: 1400px) {
        left: 39%;
        top: 18px;
        width: 57.5%;
    }
    @media screen and (max-width: 1300px) {
        top: 10px;
    }
    @media screen and (max-width: 1200px) {
        top: 35%;
        left: 37%;
    }
    @media screen and (max-width: 1100px) {
        left: 40%;
    }
    @media screen and (max-width: 1000px) {
        left: 41%;
        top: 10%;
        width: 50%;
    }

        @media screen and (max-width: 1300px) {
            top: 10px;
        }
        @media screen and (max-width: 1200px) {
            top: 35%;
            left: 42%;
        }
        @media screen and (max-width: 1000px) {
            top: 35%;
        }
        @media screen and (max-width: 900px) {
            top: 10%;
            left: 45%;
        }
        .heading-h1--shit, 
        .heading-h1--inv {
            font-size: 37px;
            
            @media screen and (min-width: 1921px) {
                font-size: 42px;    
                line-height: 75px;  
            }
            @media screen and (max-width: 1700px) {
                font-size: 28px;
                line-height: 40px;
            }
            @media screen and (max-width: 1500px) {
                font-size: 30px;    
                line-height: 40px;  
            }
            @media screen and (max-width: 1300px) {
                 
                line-height: 33px;  
            }
            @media screen and (max-width: 1200px) {
                font-size: 21px;    
                line-height: 30px;    
            }
        }
        .heading-h1--inv {
            &-margin {
                padding-left: 45px;
            }
        }
        
    }
    &--top {
            .btn-abs {
                @media screen and (max-width: 1300px) {
                    margin: 0;  
                }
            }
            top: 28px;
            @media screen and (min-width: 1921px) {
                top: 60px;
            }
            @media screen and (max-width: 1700px) {
                top: 15px;
            }
            @media screen and (max-width: 1300px) {
            top: 10px;
            }
            @media screen and (max-width: 1200px) {
                top: 35%;
                left: 30%;
                width: 68%; 
            }
            @media screen and (max-width: 1000px) {
                top: 35%;
                left: 30%;
                width: 68%; 
            }
            @media screen and (max-width: 900px) {
                top: 35%;
                left: 30%;
            }
            .heading-h1--shit, 
            .heading-h1--inv {
                font-size: 37px;
                
                @media screen and (min-width: 1921px) {
                    font-size: 42px;    
                    line-height: 57px;  
                }
                @media screen and (max-width: 1700px) {
                    font-size: 28px;
                    line-height: 31px;
                }
                @media screen and (max-width: 1600px) {
                    line-height: 28px;
                }
                @media screen and (max-width: 1400px) {
                    line-height: 26px;
                }
                @media screen and (max-width: 1300px) {
                     
                    line-height: 33px;  
                }
                @media screen and (max-width: 1200px) {
                    font-size: 25px;    
                    line-height: 30px;    
                }

                @media screen and (max-width: 1199px) {
                    float: left;
                    line-height: 35px;    
                }
                @media screen and (max-width: 900px) {
                    line-height: 26px;
                    font-size: 16px; 
                    width: 49%; 
                }
                
            }
        }
}

*/

.slider-wrapper {
  position: relative;
  margin-bottom: 0;
  font-size: 0; }

.programms {
  padding: 73px 0;
  background-color: #1f9bde; }
  @media screen and (max-width: 767px) {
    .programms {
      padding: 30px 0; } }
  .programms-heading {
    padding-top: 20px;
    padding-left: 20px;
    padding-bottom: 25px;
    font-size: 13px;
    line-height: 20px;
    font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
    text-transform: uppercase;
    color: #b6b6b6;
    margin: 0; }
    .programms-heading strong {
      font-size: 18px;
      text-transform: none;
      color: #0056b8; }
      @media screen and (max-width: 1199px) {
        .programms-heading strong {
          font-size: 16px; } }
  .programms-footnote {
    font-size: 13px;
    font-style: italic;
    color: #fff;
    padding-top: 30px; }
  .programms-item {
    background-color: #f3f3f3;
    border-radius: 7px; }
  .programms-img {
    max-height: 180px;
    overflow: hidden; }
  .programms-data {
    padding: 19px 15px 24px;
    background-color: #fff;
    font-size: 18px;
    line-height: 35px;
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
    border: 1px solid #eeeeee; }
  .programms-info {
    background-color: #fff;
    padding: 24px 30px 20px;
    font-size: 18px;
    line-height: 23px;
    min-height: 140px; }
    @media screen and (max-width: 1300px) {
      .programms-info {
        min-height: 115px; } }
  .programms-footer {
    padding: 30px 0; }

.new-main .owl-programms .owl-dot {
  display: inline-block;
  vertical-align: middle;
  width: 10px;
  height: 10px;
  border-radius: 10px;
  background-color: rgba(0, 0, 0, 0.4); }
  .new-main .owl-programms .owl-dot:not(:last-child) {
    margin-right: 7px; }
  .new-main .owl-programms .owl-dot.active {
    background-color: #ffffff; }

.issue {
  background-color: #f0f0f0;
  padding-top: 75px;
  padding-bottom: 22px;
  position: relative; }
  @media screen and (max-width: 767px) {
    .issue {
      padding: 30px 0; } }

.issue-list {
  position: absolute;
  left: 50%;
  -webkit-transform: translate(-50%, 0);
  -ms-transform: translate(-50%, 0);
  transform: translate(-50%, 0);
  width: 1200px;
  bottom: -55px;
  padding: 0;
  margin: 0;
  /* font-size: 0; */
  list-style-type: none;
  counter-reset: list 0;
  z-index: 20;
  opacity: 1;
  visibility: visible;
  text-align: justify;
  -ms-text-align: justify;
  transition: opacity 0.3s, visibility 0.3s; }
  .issue-list:after {
    content: '';
    width: 100%;
    display: inline-block; }
  @media screen and (max-width: 1200px) {
    .issue-list {
      width: 100%; } }
  @media screen and (max-width: 991px) {
    .issue-list {
      position: static;
      -webkit-transform: translate(0, 0);
      -ms-transform: translate(0, 0);
      transform: translate(0, 0);
      left: auto;
      bottom: auto;
      width: auto;
      padding: 0 10px; }
      .issue-list:before, .issue-list:after {
        content: " ";
        display: table; }
      .issue-list:after {
        clear: both; } }
  .issue-list li {
    position: relative;
    width: 280px;
    display: inline-block;
    vertical-align: top;
    padding: 30px;
    font-size: 17px;
    background-color: #fff;
    border-radius: 5px;
    box-shadow: -6px 11px 111px -18px rgba(0, 0, 0, 0.45); }
    @media screen and (max-width: 1199px) {
      .issue-list li {
        width: auto; } }
    @media screen and (max-width: 991px) {
      .issue-list li {
        display: block;
        margin-bottom: 10px;
        box-shadow: none;
        text-align: left; } }
    .issue-list li:before {
      position: absolute;
      top: 10px;
      right: 10px;
      counter-increment: list;
      content: counter(list);
      width: 30px;
      height: 30px;
      line-height: 30px;
      border-radius: 50%;
      background-color: #00b181;
      text-align: center;
      color: #fff;
      font-size: 15px;
      font-family: "HelveticaNeueCyr Bold", Arial, sans-serif; }

.issue-img,
.issue-text {
  display: inline-block;
  vertical-align: middle; }

.issue-text {
  padding-left: 20px;
  text-align: left; }

.issue-play--holder {
  position: absolute;
  bottom: 80px;
  left: -80px;
  font-size: 17px;
  z-index: 20;
  cursor: pointer; }
  @media screen and (max-width: 991px) {
    .issue-play--holder {
      left: 50%;
      -webkit-transform: translate(-50%, 0);
      -ms-transform: translate(-50%, 0);
      transform: translate(-50%, 0);
      right: auto;
      bottom: -90px; } }
  .issue-play--holder img {
    opacity: 1;
    margin-left: 10px;
    display: inline-block;
    vertical-align: middle;
    box-shadow: 15px 21px 92px -24px rgba(0, 0, 0, 0.75);
    margin-bottom: 0; }
    @media screen and (max-width: 991px) {
      .issue-play--holder img {
        display: inline-block;
        vertical-align: middle;
        margin-left: 10px;
        margin-top: 0; } }
  .issue-play--holder span {
    display: inline-block;
    vertical-align: middle;
    opacity: 0.5; }

.issue-step--holder {
  position: absolute;
  bottom: 80px;
  right: -170px;
  font-size: 17px;
  text-align: center;
  opacity: 0;
  visibility: hidden;
  z-index: 20;
  cursor: pointer;
  transition: opacity 0.3s, visibility 0.3s; }
  @media screen and (max-width: 991px) {
    .issue-step--holder {
      left: 50%;
      -webkit-transform: translate(-50%, 0);
      -ms-transform: translate(-50%, 0);
      transform: translate(-50%, 0);
      right: auto;
      bottom: -90px; } }
  .issue-step--holder img {
    margin: 0 auto;
    display: block;
    margin-top: 10px;
    box-shadow: 17px 7px 73px -24px rgba(0, 0, 0, 0.75); }
    @media screen and (max-width: 991px) {
      .issue-step--holder img {
        display: inline-block;
        vertical-align: middle;
        margin-left: 10px;
        margin-top: 0; } }
  .issue-step--holder span {
    opacity: 0.5; }

.issue-video {
  position: relative;
  max-width: 600px;
  margin: 0 auto; }
  @media screen and (max-width: 991px) {
    .issue-video {
      margin-bottom: 90px; } }

.container-security {
  background-color: #45bc75;
  max-width: 1500px;
  margin: 0 auto;
  padding: 73px 10% 8px;
  overflow: hidden; }
  .container-security .heading-h1--inverse {
    margin-bottom: 38px; }
  @media screen and (max-width: 991px) {
    .container-security {
      padding: 40px 5%; } }
  .container-security.animated .security-left img {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); }

.stages:before, .stages:after {
  content: " ";
  display: table; }

.stages:after {
  clear: both; }

@-webkit-keyframes blink {
  0% {
    opacity: 1; }
  50% {
    opacity: 0.5; }
  100% {
    opacity: 0; } }

@keyframes blink {
  0% {
    opacity: 1; }
  50% {
    opacity: 0.5; }
  100% {
    opacity: 0; } }

/*----------------------advantages----------------------------*/
.advantages {
  position: relative;
  padding: 75px 0; }
  @media screen and (max-width: 1199px) {
    .advantages {
      padding-top: 100px; } }
  @media screen and (max-width: 991px) {
    .advantages {
      padding: 20px 0; } }
  @media screen and (max-width: 767px) {
    .advantages {
      padding: 20px 15px 30px; } }
  @media screen and (max-width: 480px) {
    .advantages {
      padding: 20px 0 40px; } }
  .advantages .owl-dot {
    display: inline-block;
    vertical-align: middle;
    width: 10px;
    height: 10px;
    border-radius: 10px;
    background-color: rgba(0, 0, 0, 0.5); }
    .advantages .owl-dot:not(:last-child) {
      margin-right: 7px; }
    .advantages .owl-dot.active {
      background-color: #1f9bde; }
  .advantages-block {
    position: relative;
    display: inline-block;
    vertical-align: top;
    max-width: 360px;
    border: 1px solid #eeeeee;
    border-radius: 5px;
    text-align: left;
    padding-bottom: 120px; }
    @media screen and (max-width: 767px) {
      .advantages-block {
        padding-bottom: 80px; } }
    @media screen and (max-width: 480px) {
      .advantages-block {
        width: 100%;
        max-width: 100%; } }
    .advantages-block ul {
      list-style-type: none;
      padding: 30px;
      margin-bottom: 0;
      background-color: #fff; }
      @media screen and (max-width: 480px) {
        .advantages-block ul {
          padding: 20px 10px; } }
      .advantages-block ul li {
        font-size: 0;
        margin-bottom: 35px;
        min-height: 54px; }
        @media screen and (max-width: 1200px) {
          .advantages-block ul li {
            min-height: 50px; } }
        @media screen and (max-width: 480px) {
          .advantages-block ul li {
            margin-bottom: 20px;
            min-height: 40px; } }
        .advantages-block ul li:last-of-type {
          margin-bottom: 0; }
    .advantages-block:first-of-type {
      margin-right: 40px; }
      @media screen and (max-width: 840px) {
        .advantages-block:first-of-type {
          margin-right: 0; } }
  .advantages-tooltip {
    position: absolute;
    top: -20px;
    left: calc(100% - 20px);
    padding: 10px;
    text-align: center;
    color: #fff;
    font-size: 15px;
    min-width: 210px;
    background-color: #1f9bde;
    box-shadow: 10px 13px 75px -18px rgba(0, 0, 0, 0.75);
    border-radius: 3px; }
    @media screen and (max-width: 1300px) {
      .advantages-tooltip {
        top: -70px;
        left: 100%; } }
    @media screen and (max-width: 1199px) {
      .advantages-tooltip {
        left: calc(100% - 90px); } }
    @media screen and (max-width: 1090px) {
      .advantages-tooltip {
        left: calc(100% - 130px); } }
    @media screen and (max-width: 1000px) {
      .advantages-tooltip {
        left: calc(100% - 130px); } }
    @media screen and (max-width: 900px) {
      .advantages-tooltip {
        position: relative;
        top: 0;
        left: 0;
        box-shadow: none; } }
    .advantages-tooltip:after {
      position: absolute;
      bottom: -10px;
      left: 0;
      content: '';
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 20px 0 20px 20px;
      border-color: transparent transparent transparent #1f9bde; }
    .advantages-tooltip a {
      border-bottom: 1px dashed #fff;
      display: inline-block;
      color: #fff;
      font-size: 21px;
      transition: color 0.3s;
      text-decoration: none; }
      .advantages-tooltip a:hover {
        color: #003764; }
  .advantages-icon, .advantages-text {
    display: inline-block;
    vertical-align: middle; }
  .advantages-icon {
    margin-right: 15px; }
    .advantages-icon svg {
      width: 40px;
      height: 40px; }
  .advantages-text {
    width: calc(100% - 55px);
    font-size: 18px; }
    @media screen and (max-width: 480px) {
      .advantages-text {
        font-size: 16px;
        line-height: 18px; } }
  .advantages-header {
    padding: 17px 30px;
    font-size: 0;
    color: #003764;
    background-color: #fff;
    border-bottom: 1px solid #eeeeee; }
  .advantages-header-icon {
    display: inline-block;
    vertical-align: middle;
    width: 40px;
    height: 40px;
    background-color: #00b181;
    margin-right: 15px;
    text-align: center;
    line-height: 61px;
    border-radius: 5px; }
    .advantages-header-icon--inverse {
      background-color: #4281ca; }
    .advantages-header-icon svg {
      display: inline-block;
      width: 20px;
      height: 20px;
      fill: currentColor;
      color: #fff; }
  .advantages-header-span {
    display: inline-block;
    vertical-align: middle;
    width: calc(100% - 55px);
    font: 21px/25px "HelveticaNeueCyr Bold", Arial, sans-serif; }
  .advantages-footer {
    background-color: #f3f3f3;
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 30px 0; }
    @media screen and (max-width: 480px) {
      .advantages-footer {
        padding: 20px 0; } }
    .advantages-item--cogwheel:hover .cogwheel {
      transform: rotate(0deg);
      -webkit-transform: rotate(0deg);
      -moz-transform: rotate(0deg);
      -o-transform: rotate(0deg);
      -ms-transform: rotate(0deg);
      transform-origin: 50% 50%;
      -webkit-transform-origin: 50% 50%;
      -moz-transform-origin: 50% 50%;
      -o-transform-origin: 50% 50%;
      -ms-transform-origin: 50% 50%;
      animation: twist 4s linear infinite;
      -webkit-animation: twist 4s linear infinite;
      -moz-animation: twist 4s linear infinite;
      -ms-animation: twist 4s linear infinite; }
    .advantages-item--passport svg {
      transition: -webkit-transform 0.3s;
      transition: transform 0.3s;
      transition: transform 0.3s, -webkit-transform 0.3s; }
    .advantages-item--passport:hover svg {
      -webkit-transform: scale(0.8);
      -ms-transform: scale(0.8);
      transform: scale(0.8); }
    .advantages-item--hand:hover .hand {
      animation: come 1s ease-in-out;
      -webkit-animation: come 1s ease-in-out;
      -moz-animation: come 1s ease-in-out;
      -ms-animation: come 1s ease-in-out; }
      .advantages-item--hand:hover .hand--inverse {
        animation: come-inverse 1s ease-in-out;
        -webkit-animation: come-inverse 1s ease-in-out;
        -moz-animation: come-inverse 1s ease-in-out;
        -ms-animation: come-inverse 1s ease-in-out; }

@-webkit-keyframes twist {
  0% {
    transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    -ms-transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg); } }

@keyframes twist {
  0% {
    transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    -ms-transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg); } }

@-webkit-keyframes showdown {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes showdown {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@-webkit-keyframes showdown-reverse {
  0%,
  50%,
  80% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes showdown-reverse {
  0%,
  50%,
  80% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@-webkit-keyframes come {
  0% {
    -webkit-transform: translate(0, 50px);
    -ms-transform: translate(0, 50px);
    transform: translate(0, 50px); }
  100% {
    -webkit-transform: translate(0, 0px);
    -ms-transform: translate(0, 0px);
    transform: translate(0, 0px); } }

@keyframes come {
  0% {
    -webkit-transform: translate(0, 50px);
    -ms-transform: translate(0, 50px);
    transform: translate(0, 50px); }
  100% {
    -webkit-transform: translate(0, 0px);
    -ms-transform: translate(0, 0px);
    transform: translate(0, 0px); } }

@-webkit-keyframes come-inverse {
  0% {
    -webkit-transform: translate(0, -50px);
    -ms-transform: translate(0, -50px);
    transform: translate(0, -50px); }
  100% {
    -webkit-transform: translate(0, 0px);
    -ms-transform: translate(0, 0px);
    transform: translate(0, 0px); } }

@keyframes come-inverse {
  0% {
    -webkit-transform: translate(0, -50px);
    -ms-transform: translate(0, -50px);
    transform: translate(0, -50px); }
  100% {
    -webkit-transform: translate(0, 0px);
    -ms-transform: translate(0, 0px);
    transform: translate(0, 0px); } }

/*--------------------reviews----------------------------------*/
.new-main .reviews {
  position: relative;
  padding: 75px 0 24px;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover; }
  @media screen and (max-width: 1199px) {
    .new-main .reviews {
      padding: 50px 0 0; } }
  @media screen and (max-width: 767px) {
    .new-main .reviews {
      padding: 20px 0 0; } }

.owl-carousel-banner .container-fluid {
  position: relative; }

.owl-carousel-banner .banner-heading {
  padding-top: 60px;
  font: 35px/45px "HelveticaNeueCyr Roman", Arial, sans-serif;
  text-transform: uppercase;
  color: #0055b8;
  margin-bottom: 20px; }
  @media screen and (max-width: 1700px) {
    .owl-carousel-banner .banner-heading {
      padding-top: 40px;
      margin-bottom: 10px;
      font-size: 28px;
      line-height: 36px; } }
  @media screen and (max-width: 1400px) {
    .owl-carousel-banner .banner-heading {
      padding-top: 20px;
      margin-bottom: 10px;
      font: 28px/35px HelveticaNeueCyr Thin, Arial, sans-serif; } }
  @media screen and (max-width: 1350px) {
    .owl-carousel-banner .banner-heading {
      padding-top: 10px;
      margin-bottom: 10px;
      font: 21px/30px HelveticaNeueCyr Thin, Arial, sans-serif; } }
  .owl-carousel-banner .banner-heading span {
    color: #ed592b; }
  .owl-carousel-banner .banner-heading a {
    color: #0055b8;
    border: none;
    text-decoration: none; }
    .owl-carousel-banner .banner-heading a:hover {
      color: #0055b8;
      border: none; }
    @media screen and (max-width: 767px) {
      .owl-carousel-banner .banner-heading a:active, .owl-carousel-banner .banner-heading a:focus {
        text-decoration: underline; } }
    @media screen and (max-width: 767px) {
      .owl-carousel-banner .banner-heading a {
        color: #ed592b;
        border-bottom: 1px dashed #ed592b; } }
  @media screen and (max-width: 1100px) {
    .owl-carousel-banner .banner-heading {
      font-size: 17px;
      line-height: 25px;
      margin-bottom: 10px; } }
  @media screen and (max-width: 767px) {
    .owl-carousel-banner .banner-heading {
      font-size: 24px;
      line-height: 35px;
      padding-left: 0;
      padding-right: 0;
      padding-top: 30px; } }
  @media screen and (max-width: 600px) {
    .owl-carousel-banner .banner-heading {
      font-size: 14px;
      line-height: 20px;
      padding: 10px 0 0; } }
  @media screen and (max-width: 350px) {
    .owl-carousel-banner .banner-heading {
      line-height: 14px; } }

.owl-carousel-banner .owl-dot {
  display: inline-block;
  vertical-align: middle;
  width: 6px;
  height: 6px;
  border-radius: 6px;
  background-color: #abbbce; }
  .owl-carousel-banner .owl-dot:not(:last-child) {
    margin-right: 7px; }
  .owl-carousel-banner .owl-dot.active {
    background-color: #0053bc; }

.padding-wr {
  padding-bottom: 50px; }
  @media screen and (max-width: 991px) {
    .padding-wr {
      padding-bottom: 30px; } }

.new-main .owl-carousel-text {
  padding-top: 0;
  margin-bottom: 51px;
  z-index: 3; }
  @media screen and (max-width: 1199px) {
    .new-main .owl-carousel-text {
      padding-top: 0; } }
  @media screen and (max-width: 991px) {
    .new-main .owl-carousel-text {
      margin-bottom: 30px; } }
  @media screen and (max-width: 767px) {
    .new-main .owl-carousel-text {
      margin-bottom: 0; } }
  .new-main .owl-carousel-text .owl-dot {
    display: inline-block;
    vertical-align: middle;
    width: 10px;
    height: 10px;
    border-radius: 10px;
    background-color: rgba(0, 0, 0, 0.4); }
    .new-main .owl-carousel-text .owl-dot:not(:last-child) {
      margin-right: 7px; }
    .new-main .owl-carousel-text .owl-dot.active {
      background-color: #ffffff; }

.carousel-holder {
  position: relative; }
  @media screen and (max-width: 767px) {
    .carousel-holder {
      padding-bottom: 30px; } }

.swim-block {
  padding: 20px;
  background-color: transparent;
  border: 1px solid #fff;
  border-radius: 10px;
  cursor: default;
  font: 20px/27px "HelveticaNeueCyr Light", Arial, sans-serif;
  color: #fff;
  position: absolute;
  top: -40px;
  -webkit-transform: translate(100%, 0);
  -ms-transform: translate(100%, 0);
  transform: translate(100%, 0);
  opacity: 0;
  z-index: 0;
  animation: animation-translate 50s infinite;
  -webkit-animation: animation-translate 50s infinite;
  -moz-animation: animation-translate 50s infinite;
  -o-animation: animation-translate 50s infinite;
  -webkit-animation-timing-function: linear;
  /* Chrome, Safari, Opera */
  animation-timing-function: linear; }
  @media screen and (max-width: 1500px) {
    .swim-block {
      font-size: 17px; } }
  @media screen and (max-width: 991px) {
    .swim-block {
      animation: none;
      -webkit-animation: none;
      -moz-animation: none;
      -o-animation: none; } }
  .swim-block:before {
    content: "";
    position: absolute;
    top: 100%;
    right: 49px;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 10px 10px 0 10px;
    border-color: #d7ecff transparent transparent transparent; }
  .swim-block--second {
    top: 75px;
    animation: animation-translate 50s infinite;
    -webkit-animation: animation-translate 50s infinite;
    -moz-animation: animation-translate 50s infinite;
    -o-animation: animation-translate 50s infinite;
    animation-delay: 30s;
    -webkit-animation-delay: 30s;
    -moz-animation-delay: 30s;
    -o-animation-delay: 30s;
    -webkit-animation-timing-function: linear;
    /* Chrome, Safari, Opera */
    animation-timing-function: linear;
    z-index: 0; }
    @media screen and (max-width: 991px) {
      .swim-block--second {
        animation: none;
        -webkit-animation: none;
        -moz-animation: none;
        -o-animation: none; } }
  .swim-block .avtor {
    position: absolute;
    top: calc(100% + 10px);
    right: 0;
    text-align: right; }

.new-main .people-name {
  position: absolute;
  top: calc(100% + 20px);
  left: -15px;
  right: -15px;
  text-align: center;
  color: #fff;
  font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
  font-size: 15px;
  opacity: 0;
  visibility: hidden;
  -webkit-transform: translate(0, -60px);
  -ms-transform: translate(0, -60px);
  transform: translate(0, -60px);
  transition: all 0.3s; }

.new-main .people-list {
  padding: 0;
  margin: 0;
  list-style: none;
  font-size: 0;
  text-align: center;
  padding-bottom: 50px; }
  @media screen and (max-width: 480px) {
    .new-main .people-list {
      display: none; } }

.new-main .people-item {
  position: relative;
  display: inline-block;
  vertical-align: top;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  padding-bottom: 0; }
  .new-main .people-item:not(:last-child) {
    margin-right: 30px; }
  @media screen and (max-width: 480px) {
    .new-main .people-item {
      width: 50%;
      display: none;
      padding-bottom: 50%; } }
  .new-main .people-item a {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-bottom: none;
    z-index: 3;
    cursor: pointer; }
    .new-main .people-item a:after {
      display: none; }
    .new-main .people-item a:hover:after {
      display: none; }
    .new-main .people-item a:hover .play {
      display: inline-block; }
    .new-main .people-item a:hover video {
      display: block; }
    .new-main .people-item a:hover .iframe {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      z-index: 10;
      border: none; }
    .new-main .people-item a:hover .people-name {
      opacity: 1;
      visibility: visible;
      -webkit-transform: translate(0, 0);
      -ms-transform: translate(0, 0);
      transform: translate(0, 0); }
  .new-main .people-item .play {
    display: none;
    width: 60px;
    height: 60px;
    background-image: url("../assets/images/play.png");
    background-repeat: no-repeat;
    background-size: 60px 60px;
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    z-index: 4; }
  @media screen and (max-width: 480px) {
    .new-main .people-item:nth-child(1), .new-main .people-item:nth-child(2), .new-main .people-item:nth-child(3), .new-main .people-item:nth-child(4) {
      display: inline-block; } }
  .new-main .people-item img,
  .new-main .people-item video,
  .new-main .people-item iframe {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 2;
    border-radius: 50%; }
  .new-main .people-item video {
    display: none; }
  .new-main .people-item .people-thumb {
    display: block; }

/*-------------------offline-----------------------------------*/

/*-----------------------------numbers---------------------------*/
  .numbers-gif {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    z-index: 3;
    cursor: pointer; }

.embed-responsive-16by9 {
  padding-bottom: 56.2%; }

.embed-responsive-16by9,
.embed-wrapper {
  position: relative; }
  .embed-responsive-16by9:before, .embed-responsive-16by9:after,
  .embed-wrapper:before,
  .embed-wrapper:after {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    height: 2px;
    background-color: #f3f3f3; }
  .embed-responsive-16by9:before,
  .embed-wrapper:before {
    z-index: 2;
    bottom: -1px;
    top: auto; }

.embed-wrapper:before {
  left: 0;
  top: 0;
  bottom: 0;
  right: auto; }

.embed-wrapper:after {
  right: 0;
  left: auto;
  top: 0;
  bottom: 0; }

/*-----------------------banks------------------------------*/

.banks {
  padding: 75px 0 40px; }
  @media screen and (max-width: 991px) {
    .banks {
      padding: 30px 0;
      text-align: center; } }
  .banks.animated .banks-card {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); }
    .banks.animated .banks-card--right {
      -webkit-transform: translate(0, 0);
      -ms-transform: translate(0, 0);
      transform: translate(0, 0); }
  .banks.animated .banks-ibox {
    opacity: 1; }
  .banks-list {
    padding: 0;
    margin: 0;
    list-style: none;
    text-align: justify;
    font-size: 0;
    margin-bottom: 30px;
    padding-top: 12px; }
    @media screen and (max-width: 991px) {
      .banks-list {
        text-align: center; } }
    .banks-list:after {
      content: '';
      width: 100%;
      display: inline-block; }
    .banks-list.animated .banks-item {
      -webkit-transform: translate(0, 0);
      -ms-transform: translate(0, 0);
      transform: translate(0, 0); }
  .banks-item {
    display: inline-block;
    vertical-align: middle;
    width: 25%;
    text-align: center; }
    @media screen and (max-width: 991px) {
      .banks-item:not(:last-child) {
        margin-bottom: 40px; } }
    @media screen and (max-width: 991px) {
      .banks-item {
        display: block;
        width: 100%;
        -webkit-transform: translate(0, 0);
        -ms-transform: translate(0, 0);
        transform: translate(0, 0); } }
    .banks-item img {
      width: 80%;
      max-width: 250px;
      /* filter: url(../js/filters.svg#grayscale); */
      -webkit-filter: grayscale(1);
      transition: -webkit-filter 0.3s;
      transition: filter 0.3s;
      transition: filter 0.3s, -webkit-filter 0.3s;
      opacity: .6; }
      @media screen and (max-width: 1199px) {
        .banks-item img {
          width: 75%; } }
      @media screen and (max-width: 1199px) {
        .banks-item img {
          width: auto;
          height: 40px; } }
      @media screen and (max-width: 767px) {
        .banks-item img {
          opacity: 1;
          height: 30px; } }
      .banks-item img:hover {
        -webkit-filter: grayscale(0%);
        -moz-filter: grayscale(0%);
        opacity: 1; }
    .banks-item:nth-child(2) {
      transition-delay: 0.5s; }
    .banks-item:nth-child(3) {
      transition-delay: 1s; }
    .banks-item:nth-child(4) {
      transition-delay: 1.5s; }

/*-----------------------questions---------------------------*/

.new-main .city-holder {
  padding: 43px 0; }
  .new-main .city-holder:before, .new-main .city-holder:after {
    content: " ";
    display: table; }
  .new-main .city-holder:after {
    clear: both; }
  @media screen and (max-width: 1440px) {
    .new-main .city-holder {
      padding: 10px 0 20px; } }

.new-main .city-section {
  padding: 75px 0 13px;
  font-size: 19px;
  background-color: #f3f5f7; }
  @media screen and (max-width: 1440px) {
    .new-main .city-section {
      padding: 25px 0 13px;
      font-size: 16px; } }
  @media screen and (max-width: 991px) {
    .new-main .city-section {
      padding: 20px 0; } }

.lk-terminal-wr {
  padding-top: 30px; }

.section-bordered {
  border-bottom: 2px solid #f1f1f1; }

/*-----------------------footer-----------------------------*/
.new-main .bottom-callback {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 50px 50px 0;
  background-color: #f6f6f6;
  z-index: 1000;
  transition: -webkit-transform 0.5s;
  transition: transform 0.5s;
  transition: transform 0.5s, -webkit-transform 0.5s;
  -webkit-transform: translate(0, 0);
  -ms-transform: translate(0, 0);
  transform: translate(0, 0); }
  @media screen and (max-width: 991px) {
    .new-main .bottom-callback {
      padding: 50px 20px 0; } }
  .new-main .bottom-callback.bottom-call-hidden {
    -webkit-transform: translate(0, 900px);
    -ms-transform: translate(0, 900px);
    transform: translate(0, 900px); }
    @media screen and (max-width: 991px) {
      .new-main .bottom-callback.bottom-call-hidden {
        -webkit-transform: translate(0, 1900px);
        -ms-transform: translate(0, 1900px);
        transform: translate(0, 1900px); } }
    .new-main .bottom-callback.bottom-call-hidden .call-img {
      -webkit-animation: none;
              animation: none; }
  .new-main .bottom-callback button.close {
    right: 55px;
    width: 25px;
    height: 30px;
    top: 25px;
    background-color: transparent;
    opacity: 1;
    background-image: url("../images/close.png");
    background-repeat: no-repeat;
    background-size: 25px 25px; }
    .new-main .bottom-callback button.close:hover {
      background-color: transparent; }
  .new-main .bottom-callback .btn-personal, .new-main .bottom-callback .btn-success {
    position: relative;
    overflow: hidden;
    color: #ffffff;
    background-color: #4281ca;
    border-color: transparent;
    border-radius: 5px;
    border-width: 0;
    -webkit-transform: perspective(1px) translateZ(0);
    transform: perspective(1px) translateZ(0);
    box-shadow: 0 0 1px transparent;
    position: relative;
    transition-property: color;
    transition-duration: 0.3s;
    padding: 13px 30px;
    width: auto;
    display: inline-block; }
    .new-main .bottom-callback .btn-personal:focus, .new-main .bottom-callback .btn-success:focus {
      color: #ffffff;
      background-color: #3068a9;
      border-color: transparent; }
    .new-main .bottom-callback .btn-personal:hover, .new-main .bottom-callback .btn-success:hover {
      color: #ffffff;
      background-color: #3068a9;
      border-color: transparent; }
    .new-main .bottom-callback .btn-personal:active, .new-main .bottom-callback .btn-success:active, .new-main .bottom-callback .btn-personal.active, .new-main .bottom-callback .active.btn-success {
      color: #ffffff;
      background-color: #3068a9;
      border-color: transparent; }
      .new-main .bottom-callback .btn-personal:active:hover, .new-main .bottom-callback .btn-success:active:hover, .new-main .bottom-callback .btn-personal:active:focus, .new-main .bottom-callback .btn-success:active:focus, .new-main .bottom-callback .btn-personal.active:hover, .new-main .bottom-callback .active.btn-success:hover, .new-main .bottom-callback .btn-personal.active:focus, .new-main .bottom-callback .active.btn-success:focus {
        color: #ffffff;
        background-color: #28578e;
        border-color: transparent; }
    .new-main .bottom-callback .btn-personal:active, .new-main .bottom-callback .btn-success:active, .new-main .bottom-callback .btn-personal.active, .new-main .bottom-callback .active.btn-success {
      background-image: none; }
     .new-main .bottom-callback .btn-personal[disabled]:hover, .new-main .bottom-callback [disabled].btn-success:hover, .new-main .bottom-callback .btn-personal[disabled]:focus, .new-main .bottom-callback [disabled].btn-success:focus {
      background-color: #4281ca;
      border-color: transparent; }
    .new-main .bottom-callback .btn-personal:before, .new-main .bottom-callback .btn-success:before {
      content: "";
      position: absolute;
      z-index: -1;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: #00b181;
      border-radius: 100%;
      -webkit-transform: scale(2);
      -ms-transform: scale(2);
          transform: scale(2);
      transition-property: -webkit-transform;
      transition-property: transform;
      transition-property: transform, -webkit-transform;
      -webkit-transition-duration: 0.3s;
      transition-du2ration: 0.3s;
      transition-timing-function: ease-out; }
    .new-main .bottom-callback .btn-personal:hover:before, .new-main .bottom-callback .btn-success:hover:before {
      webkit-transform: scale(0);
      -webkit-transform: scale(0);
          -ms-transform: scale(0);
              transform: scale(0); }

.new-main .popup-close {
  position: absolute;
  border: none;
  right: 25px;
  width: 25px;
  height: 30px;
  top: 25px;
  background-color: transparent;
  opacity: 1;
  background-image: url("../images/close.png");
  background-repeat: no-repeat;
  background-size: 25px 25px; }
  @media screen and (max-width: 991px) {
    .new-main .popup-close {
      right: 0; } }

.new-main .call-text {
  float: left;
  width: 50%;
  color: #003764;
  padding: 80px 0 0 90px; }
  @media screen and (max-width: 991px) {
    .new-main .call-text {
      display: none; } }
  @media screen and (max-width: 767px) {
    .new-main .call-text {
      width: 100%;
      float: none;
      padding: 0;
      margin-bottom: 20px; } }
  .new-main .call-text img {
    display: block;
    margin-bottom: 15px; }

.new-main .call-img {
  float: left; }
  @media screen and (max-width: 991px) {
    .new-main .call-img {
      display: none; } }
  .new-main .call-img img {
    display: inline-block; }
  .new-main .call-img--name {
    position: absolute;
    bottom: 0;
    padding-bottom: 35px;
    display: inline-block;
    vertical-align: bottom;
    font-size: 15px;
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
    line-height: 20px;
    color: #003764; }
    @media screen and (max-width: 991px) {
      .new-main .call-img--name {
        display: none; } }
    .new-main .call-img--name span {
      display: block;
      font-size: 15px;
      color: #ababab; }

.new-main .callback-form {
  position: relative;
  padding: 0 10px 40px 10px;
  border-radius: 5px; }
  @media screen and (max-width: 991px) {
    .new-main .callback-form {
      margin-bottom: 30px;
      padding: 0; } }
  .new-main .callback-form .form-control--wr {
    width: 100%;
    display: block; }
  .new-main .callback-form .form-group {
    margin-bottom: 10px; }
  .new-main .callback-form .form-control {
    height: 45px;
    border-radius: 0;
    border: 1px solid #e2e2e2;
    background-color: #fff;
    color: #003764;
    padding: 0 30px 0 10px;
    font: 16px / 45px "HelveticaNeueCyr Roman", Arial, sans-serif; }
    @media screen and (max-width: 767px) {
      .new-main .callback-form .form-control {
        height: 35px; } }
  .new-main .callback-form .form-label {
    color: #003764;
    margin-left: 0;
    margin-bottom: 5px;
    display: block;
    width: 100%;
    padding: 0; }
  .new-main .callback-form textarea.form-control.write-us {
    resize: none;
    height: 90px; }

.new-main .callback-holder {
  padding-top: 15px;
  text-align: left;
  display: inline-block; }
  @media screen and (max-width: 991px) {
    .new-main .callback-holder {
      display: block; } }
  @media screen and (max-width: 767px) {
    .new-main .callback-holder {
      text-align: center; } }

.new-main .callback-result {
  text-align: right;
  padding: 10px 0;
  font-size: 20px; }
  @media screen and (max-width: 767px) {
    .new-main .callback-result {
      text-align: center; } }

@keyframes callback-text {
  from {
    -webkit-transform: translate(300px, 0);
    -ms-transform: translate(300px, 0);
    transform: translate(300px, 0); }
  to {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); } }

@-webkit-keyframes callback-text {
  from {
    -webkit-transform: translate(300px, 0);
    -ms-transform: translate(300px, 0);
    transform: translate(300px, 0); }
  to {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); } }

.new-main .sticky-calc {
  position: fixed;
  display: block;
  right: 0;
  left: 0;
  margin-right: -20px;
  margin-left: -20px;
  padding: 51px 0 50px;
  background-color: #f3f3f3;
  z-index: 900;
  -webkit-transform: translate(0, -100%);
  -ms-transform: translate(0, -100%);
  transform: translate(0, -100%);
  transition: all 1s; }
  .new-main .sticky-calc.active {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); }
  @media screen and (max-width: 991px) {
    .new-main .sticky-calc {
      padding-bottom: 0; } }
  .new-main .sticky-calc .calculator-row {
    border-bottom: none; }
  .new-main .sticky-calc .calculator-right {
    background-color: #fff;
    border: 1px solid #e1e1e1;
    padding: 35px 45px;
    width: 55%;
    display: inline-block;
    vertical-align: middle; }
    @media screen and (max-width: 1199px) {
      .new-main .sticky-calc .calculator-right {
        display: block;
        margin: 0 auto; } }
    @media screen and (max-width: 991px) {
      .new-main .sticky-calc .calculator-right {
        width: 100%;
        margin: 0; } }
    @media screen and (max-width: 767px) {
      .new-main .sticky-calc .calculator-right {
        padding: 20px; } }
  .new-main .sticky-calc .calculator-images {
    display: none; }
  .new-main .sticky-calc .calculator-row {
    display: block;
    font-size: 0; }
  .new-main .sticky-calc .calculator-left {
    width: 45%;
    padding-right: 70px;
    padding-left: 0;
    display: inline-block;
    vertical-align: middle;
    border: none; }
    @media screen and (max-width: 1199px) {
      .new-main .sticky-calc .calculator-left {
        display: block;
        width: 100%;
        padding-left: 20px; } }
    @media screen and (max-width: 767px) {
      .new-main .sticky-calc .calculator-left {
        padding-right: 0;
        padding-left: 0; } }
  
  .new-main .sticky-calc .calculator-left .calculator-heading {
    display: none; }
  .new-main .sticky-calc .calculator-right .calculator-heading {
    font-size: 20px; }
  .new-main .sticky-calc .calculator-table--wr {
    width: 50%;
    float: left;
    margin-right: 0; }
    @media screen and (max-width: 767px) {
      .new-main .sticky-calc .calculator-table--wr {
        width: 66.666%;
        margin-bottom: 20px; } }
    @media screen and (max-width: 767px) {
      .new-main .sticky-calc .calculator-table--wr + .calculator-table--wr {
        width: 33.333%; } }
  .new-main .sticky-calc .calculator-td-heading {
    min-width: 130px; }
  .new-main .sticky-calc .popup-close {
    right: 45px; }
  .new-main .sticky-calc .slider-money--label {
    width: 62%; }
    @media screen and (max-width: 767px) {
      .new-main .sticky-calc .slider-money--label {
        width: 56%; } }
  .new-main .sticky-calc .slider-control--wr {
    width: 38%; }
    @media screen and (max-width: 767px) {
      .new-main .sticky-calc .slider-control--wr {
        font-size: 16px;
        width: 44%; } }


.new-main .lang-link--rus .lang-name--rus {
  display: none; }

.sticky-calc {
  display: none; }
  .sticky-calc .calculator-table td.calculator-give-sum, .sticky-calc .calculator-table td.calculator-take-sum {
    padding-left: 10px; }

.new-main .footer {
  display: table-footer-group;
  background-color: #0073b1;
  color: #fff; }
  .new-main .footer-phone {
    display: inline-block;
    text-align: left;
    line-height: 19px;
    padding-top: 10px;
    width: 80%; }
    @media screen and (max-width: 1199px) {
      .new-main .footer-phone {
        padding-right: 15px;
        width: auto; } }
    @media screen and (max-width: 767px) {
      .new-main .footer-phone {
        text-align: center;
        padding-top: 20px;
        padding-right: 0; } }
    .new-main .footer-phone ul {
      padding: 0;
      margin: 0;
      list-style-type: none; }
    .new-main .footer-phone a[href^="tel"] {
      color: #fff;
      font-size: 18px;
      display: inline-block;
      margin-bottom: 10px;
      text-align: right;
      text-decoration: none; }
    .new-main .footer-phone a {
      color: #fff;
      text-decoration: none; }
    .new-main .footer-phone a[href^="tel"].phone-city {
      display: inline-block;
      margin-top: 10px;
      padding: 10px 20px 0 20px;
      border-top: 1px solid #338fc1; }
    .new-main .footer-phone svg {
      display: inline-block;
      vertical-align: top;
      width: 20px;
      height: 20px; }
    .new-main .footer-phone span {
      display: inline-block;
      margin-bottom: 20px;
      max-width: 230px;
      color: #a2c0da;
      font-size: 14px; }
    .new-main .footer-phone .footer-phone_socio {
      margin-right: 10px;
      background-color: #fff;
      border-radius: 50%;
      margin-bottom: 0;
      width: 30px;
      height: 30px;
      padding: 5px; }
    .new-main .footer-phone .btn-call {
      margin-left: 13px; }
  .new-main .footer-top {
    padding: 64px 0 36px;
    margin: 0 -8px; }
    .new-main .footer-top:before, .new-main .footer-top:after {
      content: " ";
      display: table; }
    .new-main .footer-top:after {
      clear: both; }
    @media screen and (max-width: 1199px) {
      .new-main .footer-top {
        padding: 20px 0 0; } }
    @media screen and (max-width: 767px) {
      .new-main .footer-top {
        text-align: center;
        padding: 20px 0; } }
  .new-main .footer-row:before, .new-main .footer-row:after {
    content: " ";
    display: table; }
  .new-main .footer-row:after {
    clear: both; }
  .new-main .footer-row {
    font-size: 0; }
  .new-main .footer-col-3 {
    width: 33.3%;
    float: left; }
    @media screen and (max-width: 1199px) {
      .new-main .footer-col-3 {
        padding-left: 10px; } }
    @media screen and (max-width: 991px) {
      .new-main .footer-col-3 {
        width: 50%;
        margin-bottom: 30px;
        display: inline-block;
        vertical-align: top;
        float: none; } }
    @media screen and (max-width: 767px) {
      .new-main .footer-col-3 {
        width: 100%;
        float: none;
        margin-bottom: 0;
        padding-left: 0; } }
  .new-main .footer-logo {
    display: block;
    border: none;
    padding: 0 15px 0 0;
    margin-top: 60px; }
    @media screen and (max-width: 1199px) {
      .new-main .footer-logo {
        padding-left: 20px; } }
    @media screen and (max-width: 991px) {
      .new-main .footer-logo {
        margin-top: 30px;
        text-align: center; } }
    @media screen and (max-width: 767px) {
      .new-main .footer-logo {
        text-align: center;
        display: none; } }
  .new-main .footer-menu {
    padding: 0;
    margin: 0;
    list-style: none; }
    @media screen and (max-width: 767px) {
      .new-main .footer-menu {
        margin-bottom: 30px; } }
    .new-main .footer-menu--wr {
      margin-bottom: 25px; }
      @media screen and (max-width: 767px) {
        .new-main .footer-menu--wr {
          margin-bottom: 0; } }
      @media screen and (min-width: 767px) {
        .new-main .footer-menu--wr {
          display: block !important;
          height: auto !important;
          overflow: hidden; } }
    .new-main .footer-menu-service ul {
      width: 50%;
      float: left; }
      @media screen and (max-width: 767px) {
        .new-main .footer-menu-service ul {
          float: none;
          width: 100%;
          margin-top: 20px; } }
      @media screen and (max-width: 767px) {
        .new-main .footer-menu-service ul a {
          font-size: 15px;
          line-height: 17px; } }
    .new-main .footer-menu li {
      margin-bottom: 6px;
      padding-right: 20px;
      line-height: 20px; }
    .new-main .footer-menu a,
    .new-main .footer-menu .active {
      color: #fff;
      font: 14px "HelveticaNeueCyr Light", Arial, sans-serif;
      border-bottom: none;
      text-decoration: none; }
      .new-main .footer-menu a:hover,
      .new-main .footer-menu .active:hover {
        color: #c4e5f5;
        text-decoration: none; }
    .new-main .footer-menu .active {
      color: #c4e5f5; }
      .new-main .footer-menu .active:hover {
        color: #c4e5f5; }
  @media screen and (max-width: 767px) {
    .new-main .footer-open-close a {
      background-image: url("../images/icons/plus.svg");
      background-repeat: no-repeat;
      background-position: 100% 50%;
      background-size: 15px 15px; } }
  @media screen and (max-width: 767px) {
    .new-main .footer-open-close a[aria-expanded="true"] {
      background-image: url("../images/icons/minus.svg");
      background-repeat: no-repeat;
      background-size: 15px 29px; } }
  .new-main .footer-description {
    font: 16px / 19px "HelveticaNeueCyr Light", Arial, sans-serif;
    padding-top: 45px; }
    @media screen and (max-width: 991px) {
      .new-main .footer-description {
        padding: 0 35px 0; } }
    @media screen and (max-width: 767px) {
      .new-main .footer-description {
        display: none; } }
  .new-main .footer-text {
    opacity: 1;
    margin-top: 0;
    display: block;
    padding-left: 30px;
    font-size: 14px;
    line-height: 22px;
    margin-bottom: 0; }
    .new-main .footer-text a {
      color: #fff;
      border: none; }
      .new-main .footer-text a:hover {
        text-decoration: underline; }

@media screen and (max-width: 767px) {
  .new-main .footer-cont.text-right {
    text-align: center; } }

.new-main .col-md-services {
  padding-top: 10px; }
  @media screen and (max-width: 1199px) {
    .new-main .col-md-services {
      padding-left: 10px;
      margin-left: 0 !important; } }
  @media screen and (max-width: 767px) {
    .new-main .col-md-services.col-xs-12 {
      padding: 0; } }
  @media screen and (min-width: 992px) {
    .new-main .col-md-services {
      margin-left: -15px; } }

.how-widget {
  position: fixed;
  bottom: 140px;
  right: 75px;
  width: 80px;
  height: 80px;
  border-radius: 80px;
  font-size: 48px;
  font-family: "HelveticaNeueCyr Medium", Arial, sans-serif;
  color: #fff;
  text-align: center;
  background-color: #0054b8;
  box-shadow: 3px 4px 65px -8px #0054b8;
  z-index: 25;
  border: none; }
  @media screen and (max-width: 767px) {
    .how-widget {
      display: none; } }
  .how-widget:hover, .how-widget:focus {
    color: #fff; }
  .how-widget:after, .how-widget:before {
    content: '';
    width: 110px;
    height: 110px;
    position: absolute;
    top: -15px;
    left: -15px;
    border-radius: 50%;
    border: 2px solid #0054b8;
    -webkit-animation-name: widget;
            animation-name: widget;
    -webkit-animation-duration: 3s;
            animation-duration: 3s;
    -webkit-animation-timing-function: easy-in-out;
            animation-timing-function: easy-in-out;
    -webkit-animation-iteration-count: infinite;
            animation-iteration-count: infinite;
    z-index: -1;
    opacity: 0;
    /* animation-direction: alternate; */ }
  .how-widget:after {
    width: 140px;
    height: 140px;
    top: -30px;
    left: -30px; }
  .how-widget-t, .how-widget-q {
    left: 0;
    position: absolute;
    top: 50%;
    -webkit-transform: scaleX(0) translate(0, -50%);
        -ms-transform: scaleX(0) translate(0, -50%);
            transform: scaleX(0) translate(0, -50%);
    padding: 0 5px;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s; }
  .how-widget-q {
    right: 0;
    display: inline-block;
    vertical-align: middle;
    height: 48px;
    line-height: 55px; }
    .how-widget-q.active {
      opacity: 1;
      visibility: visible;
      -webkit-transform: scaleX(1) translate(0, -50%);
          -ms-transform: scaleX(1) translate(0, -50%);
              transform: scaleX(1) translate(0, -50%); }
  .how-widget-t {
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
    font-size: 14px;
    line-height: 15px;
    opacity: 0;
    visibility: hidden; }
    .how-widget-t.active {
      opacity: 1;
      visibility: visible;
      -webkit-transform: scaleX(1) translate(0, -50%);
          -ms-transform: scaleX(1) translate(0, -50%);
              transform: scaleX(1) translate(0, -50%); }

@-webkit-keyframes widget {
  from {
    opacity: 1;
    -webkit-transform: scale(0);
            transform: scale(0); }
  to {
    opacity: 0;
    -webkit-transform: scale(1);
            transform: scale(1); } }

@keyframes widget {
  from {
    opacity: 1;
    -webkit-transform: scale(0);
            transform: scale(0); }
  to {
    opacity: 0;
    -webkit-transform: scale(1);
            transform: scale(1); } }

@-webkit-keyframes widget-text {
  from {
    opacity: 0;
    visibility: hidden; }
  to {
    opacity: 1;
    visibility: visible; } }

@keyframes widget-text {
  from {
    opacity: 0;
    visibility: hidden; }
  to {
    opacity: 1;
    visibility: visible; } }

@-webkit-keyframes widget-question {
  from {
    -webkit-transform: scaleX(0);
            transform: scaleX(0); }
  to {
    -webkit-transform: scaleX(1);
            transform: scaleX(1); } }

@keyframes widget-question {
  from {
    -webkit-transform: scaleX(0);
            transform: scaleX(0); }
  to {
    -webkit-transform: scaleX(1);
            transform: scaleX(1); } }

/**
 *  City list
 *
 *
 */
.city-column a svg,
.city-column li svg {
  display: none; }

.new-main .city-column {
  padding: 0;
  margin: 0;
  list-style: none;
  width: 20%;
  float: left;
  padding-right: 10px; }
  @media screen and (max-width: 1440px) {
    .new-main .city-column {
      padding-right: 5px; } }
  @media screen and (max-width: 991px) {
    .new-main .city-column {
      display: inline-block;
      vertical-align: top;
      margin-bottom: 20px;
      float: none; } }
  @media screen and (max-width: 767px) {
    .new-main .city-column {
      width: 100%;
      float: none;
      text-align: left;
      margin-bottom: 0;
      padding-right: 0; } }
  .new-main .city-column li {
    margin-bottom: 10px;
    color: #565656;
    padding: 10px;
    background-color: #eceff9;
    border: 1px solid #dbdee9;
    border-radius: 5px;
    font-size: 13px;
    transition: all 0.3s; }
    @media screen and (max-width: 1440px) {
      .new-main .city-column li {
        font-size: 12px;
        padding: 5px 10px;
        margin-bottom: 5px; } }
    @media screen and (max-width: 1199px) {
      .new-main .city-column li {
        font-size: 12px; } }
    @media screen and (max-width: 767px) {
      .new-main .city-column li {
        font-size: 11px;
        width: calc(33.3% - 4px);
        float: none;
        display: inline-block;
        vertical-align: top;
        margin-right: 4px;
        padding: 6px;
        text-align: left; } }
    @media screen and (max-width: 340px) {
      .new-main .city-column li {
        padding: 3px; } }
    .new-main .city-column li:hover {
      border: 1px solid #0054bc; }
    .new-main .city-column li svg {
      fill: #0056b8;
      margin-right: 10px;
      opacity: 0;
      visibility: hidden;
      display: inline-block; }
      @media screen and (max-width: 767px) {
        .new-main .city-column li svg {
          display: none; } }
  .new-main .city-column a {
    position: relative;
    display: block;
    border: none;
    color: #0056b8;
    text-decoration: none; }
    .new-main .city-column a svg {
      fill: #0056b8;
      margin-right: 10px;
      opacity: 1;
      visibility: visible;
      display: inline-block; }
      @media screen and (max-width: 1440px) {
        .new-main .city-column a svg {
          width: 10px; } }
      @media screen and (max-width: 767px) {
        .new-main .city-column a svg {
          display: none; } }
    .new-main .city-column a:before {
      display: none; }

.banks-lk {
  position: relative;
  padding-top: 15px; }
  @media screen and (max-width: 991px) {
    .banks-lk {
      display: inline-block;
      margin-bottom: 15px; } }

.banks-info {
  font-size: 15px;
  line-height: 20px;
  padding-top: 55px; }
  @media screen and (max-width: 991px) {
    .banks-info {
      padding-top: 0; } }
  .banks-info .heading-h3 {
    margin-top: 10px;
    margin-bottom: 13px; }

.banks-card {
  position: absolute;
  bottom: 25px;
  left: -15px;
  /* @include translate(-100px, 0);
    @include transition(transform 1s); */ }
  .banks-card--right {
    left: auto;
    top: 25px;
    right: 10px;
    bottom: auto;
    /* @include translate(100px, 0); */ }

.banks-ibox {
  position: absolute;
  right: 30px;
  top: 3px; }
  @media screen and (max-width: 991px) {
    .banks-ibox {
      right: -30px; } }
  .banks-ibox img {
    display: block;
    margin-bottom: 10px;
    box-shadow: -2px 3px 36px -10px rgba(0, 0, 0, 0.55); }

.new-main .bottom-line {
  padding: 0 0 50px;
  background-color: #1f9bde; }
  @media screen and (max-width: 991px) {
    .new-main .bottom-line {
      text-align: center;
      padding-bottom: 25px;
      padding-right: 0; } }
  @media screen and (max-width: 767px) {
    .new-main .bottom-line {
      padding-bottom: 0; } }
  @media screen and (max-width: 480px) {
    .new-main .bottom-line {
      position: relative; } }

.info-user {
  position: fixed;
  width: 280px;
  left: 30px;
  bottom: 170px;
  padding: 20px 22px 20px 45px;
  background-color: #f6f6f6;
  font-size: 15px;
  border: 1px solid #cecece;
  border-radius: 5px;
  z-index: 999;
  -webkit-transform: translate(-400px, 0);
  -ms-transform: translate(-400px, 0);
  transform: translate(-400px, 0);
  opacity: 0;
  visibility: hidden;
  transition: all 0.5s; }
  @media screen and (max-width: 1500px) {
    .info-user {
      bottom: 70px; } }
  @media screen and (max-width: 991px) {
    .info-user {
      display: none; } }
  .info-user-img {
    position: absolute;
    top: 50%;
    left: -20px;
    -webkit-transform: translate(0, -50%);
    -ms-transform: translate(0, -50%);
    transform: translate(0, -50%); }
    .info-user-img img {
      display: block;
      height: 27px; }
  .info-user.active {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0);
    opacity: 1;
    visibility: visible; }

@-webkit-keyframes user-translate {
  0% {
    -webkit-transform: translate(400px, 0);
    -ms-transform: translate(400px, 0);
    transform: translate(400px, 0); }
  100% {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); } }

@keyframes user-translate {
  0% {
    -webkit-transform: translate(400px, 0);
    -ms-transform: translate(400px, 0);
    transform: translate(400px, 0); }
  100% {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); } }

.how-it-work {
  position: relative;
  padding: 70px 0 88px;
  font-size: 19px; }
  @media screen and (max-width: 991px) {
    .how-it-work {
      padding: 30px 0; } }

.new-main .security {
  position: relative;
  padding-top: 142px;
  padding-bottom: 81px; }
  @media screen and (max-width: 1300px) {
    .new-main .security {
      padding-bottom: 0; } }
  @media screen and (max-width: 1199px) {
    .new-main .security {
      padding-top: 50px; } }
  @media screen and (max-width: 991px) {
    .new-main .security {
      padding-top: 0;
      padding-bottom: 0; } }
  @media screen and (max-width: 767px) {
    .new-main .security {
      display: none; } }
  @media screen and (max-width: 991px) {
    .new-main .security-left {
      padding-bottom: 30px;
      text-align: center; } }
  .new-main .security-left img {
    /* @include translate(-1000px, 0);
            @include transition(transform 0.5s); */ }
  .new-main .security-img {
    width: 90px;
    height: 90px;
    background-color: #fff;
    text-align: center;
    line-height: 90px;
    border-radius: 50%;
    padding: 0;
    box-shadow: 5px 6px 113px -24px rgba(0, 0, 0, 0.75); }
    @media screen and (max-width: 767px) {
      .new-main .security-img {
        display: none; } }
    .new-main .security-img-wr {
      display: inline-block;
      vertical-align: middle; }
    .new-main .security-img img {
      width: 41px;
      height: 47px; }
  .new-main .security-info {
    color: #fff;
    font-size: 20px;
    line-height: 24px;
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
    width: 75%;
    padding-left: 40px;
    display: inline-block;
    vertical-align: middle; }
    .new-main .security-info span {
      display: block;
      margin-bottom: 10px; }
    .new-main .security-info a {
      color: #fff;
      text-decoration: underline;
      border: none;
      font-size: 14px;
      opacity: 0.7; }
      .new-main .security-info a:hover {
        text-decoration: none; }
  .new-main .security-list {
    padding: 0;
    margin: 0;
    list-style: none;
    padding-bottom: 90px; }
    @media screen and (max-width: 991px) {
      .new-main .security-list {
        padding-bottom: 0; } }
    .new-main .security-list li {
      padding-left: 0;
      position: relative; }
      .new-main .security-list li:before {
        display: none; }
      .new-main .security-list li:not(:last-child) {
        margin-bottom: 34px; }
        @media screen and (max-width: 991px) {
          .new-main .security-list li:not(:last-child) {
            margin-bottom: 20px; } }
      @media screen and (max-width: 991px) {
        .new-main .security-list li {
          font-size: 16px;
          padding-left: 0;
          padding-top: 0px; } }

.seo {
  background-size: cover; }
  @media screen and (max-width: 991px) {
    .seo {
      background-position: center center; } }
  .seo-text {
    color: #003764;
    word-wrap: break-word;
    font-size: 15px;
    padding-right: 44px;
    max-height: 330px;
    overflow-y: auto;
    margin-right: -15px; }
    .seo-text:focus {
      outline: none; }
    .seo-text p {
      margin-bottom: 30px; }
  .seo .custom-ul li {
    font: 15px/25px "HelveticaNeueCyr Light", Arial, sans-serif; }
  .seo-holder {
    padding: 30px 0 120px; }

.main-contacts {
  padding: 75px 0 67px;
  border-bottom: 1px solid #f1f1f1;
  font-size: 15px; }
  @media screen and (max-width: 991px) {
    .main-contacts {
      padding: 35px 0; } }
  .main-contacts--left, .main-contacts-item {
    margin-bottom: 30px; }

.promo {
  padding-top: 30px; }
  .promo .form-label {
    float: none;
    width: 100%;
    margin-bottom: 10px;
    padding-left: 0; }
    @media screen and (max-width: 767px) {
      .promo .form-label {
        margin-left: 0; } }
  .promo-linkwrapper {
    padding: 10px 0 0; }
    .promo-linkwrapper a {
      display: inline-block;
      color: #0758be;
      font-size: 16px;
      font-family: "HelveticaNeueCyr Medium", Arial, sans-serif; }

@keyframes animation-translate {
  0% {
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
    opacity: 0; }
  50% {
    opacity: 0.3; }
  100% {
    -webkit-transform: translate(-100%, 0);
    -ms-transform: translate(-100%, 0);
    transform: translate(-100%, 0);
    opacity: 0; } }

@-webkit-keyframes animation-translate {
  0% {
    -webkit-transform: translate(100%, 0);
    -ms-transform: translate(100%, 0);
    transform: translate(100%, 0);
    opacity: 0; }
  50% {
    opacity: 0.3; }
  100% {
    -webkit-transform: translate(-100%, 0);
    -ms-transform: translate(-100%, 0);
    transform: translate(-100%, 0);
    opacity: 0; } }

@keyframes animation-jump {
  0% {
    -webkit-transform: translate(0, 20px);
    -ms-transform: translate(0, 20px);
    transform: translate(0, 20px); }
  50% {
    -webkit-transform: translate(0, 10px);
    -ms-transform: translate(0, 10px);
    transform: translate(0, 10px); }
  100% {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); } }

@-webkit-keyframes animation-jump {
  0% {
    -webkit-transform: translate(0, 20px);
    -ms-transform: translate(0, 20px);
    transform: translate(0, 20px); }
  50% {
    -webkit-transform: translate(0, 10px);
    -ms-transform: translate(0, 10px);
    transform: translate(0, 10px); }
  100% {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0); } }

@keyframes animation-opacity {
  0% {
    opacity: 0.5; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0.5; } }

@-webkit-keyframes animation-opacity {
  0% {
    opacity: 0.5; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0.5; } }

@keyframes top-to-bottom {
  0% {
    opacity: 0.5; }
  50% {
    opacity: 1; }
  100% {
    opacity: 0.5; } }

@-webkit-keyframes top-to-bottom {
  0% {
    top: -250px; }
  100% {
    top: 66px; } }

.back-to-top {
  position: fixed;
  border-bottom: none;
  bottom: 10px;
  right: 10px;
  z-index: 100;
  width: 40px;
  height: 40px;
  opacity: 0;
  cursor: pointer;
  background-image: url("../images/top.png");
  background-repeat: no-repeat;
  background-position: -5px -3px;
  background-size: 48px 48px;
  transition: opacity 0.3s; }

/*------------- styles for chat--------------*/

/*       reviews      */

/*----------------footer-phone icons-----------------*/
[class*=mobo-] {
  background-position: 0 0;
  background-repeat: no-repeat;
  display: inline-block;
  vertical-align: middle;
  margin-top: -3px;
  margin-right: 8px;
  width: 16px;
  height: 16px;
  background-size: 16px 16px; }

/*МТС*/

/*Київстар*/

/*Life*/

.preloader {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 9999; }

.preloader.white {
  background-color: white; }

.loading-bar {
  -webkit-animation: loading-bar 3s infinite linear;
  animation: loading-bar 3s infinite linear;
  display: block;
  height: 18px;
  border-radius: 10px;
  background-color: #ea6052;
  opacity: 0;
  width: 0;
  max-width: 360px; }

.loading-wrapper {
  overflow: hidden;
  background-color: #e7e7e7;
  border-radius: 10px; }

.loading-bar.green-colored {
  background-color: #2ecc71; }

/* Animations */

@-webkit-keyframes loading-bar {
  from {
    width: 0;
    opacity: 1; }
  to {
    width: 100%;
    opacity: 1; } }

@keyframes loading-bar {
  from {
    width: 0;
    opacity: 1; }
  to {
    width: 100%;
    opacity: 1; } }

@-webkit-keyframes radial-loader {
  from {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg); }
  to {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }

@keyframes radial-loader {
  from {
    -ms-transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg); }
  to {
    -ms-transform: rotate(360deg);
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); } }

@keyframes spin {
  from {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@-webkit-keyframes spin {
  from {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@keyframes ico {
  0% {
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg); }
  50% {
    -webkit-transform: rotateY(10deg);
            transform: rotateY(10deg); }
  100% {
    -webkit-transform: rotateY(-10deg);
            transform: rotateY(-10deg); } }

@-webkit-keyframes ico {
  0% {
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg); }
  50% {
    -webkit-transform: rotateY(10deg);
            transform: rotateY(10deg); }
  100% {
    -webkit-transform: rotateY(-10deg);
            transform: rotateY(-10deg); } }

.share-popup {
  position: fixed;
  left: 30px;
  top: 300px;
  width: 200px;
  border-radius: 43px 0 43px 0;
  box-shadow: 10px 18px 85px -19px rgba(239, 227, 227, 0.75);
  z-index: 20;
  -webkit-transform: translate(-600px, 0);
  -ms-transform: translate(-600px, 0);
  transform: translate(-600px, 0);
  transition: all 0.3s; }
  .share-popup .btn-personal, .share-popup .btn-success {
    position: absolute;
    top: calc(100% - 20px);
    left: 50%;
    padding: 9px;
    font-size: 15px;
    -webkit-transform: translate(-50%, 0);
        -ms-transform: translate(-50%, 0);
            transform: translate(-50%, 0);
    background-color: #00b280; }
  @media screen and (max-width: 1440px) {
    .share-popup {
      top: 130px; } }
  @media screen and (max-width: 599px) {
    .share-popup {
      display: none !important; } }
  .share-popup.active {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0);
    opacity: 1;
    visibility: visible; }
    @media screen and (max-width: 599px) {
      .share-popup.active {
        display: none !important; } }

.popup-share-zero {
  position: absolute;
  top: 25px;
  right: 15px;
  font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
  font-size: 15px;
  line-height: 18px;
  color: #0054bc;
  text-transform: uppercase;
  padding-left: 74px;
  text-align: left; }
  .popup-share-zero .zero {
    font-size: 20px; }
  .popup-share-zero .percent {
    font-size: 14px; }

@-webkit-keyframes rotateScale {
  from {
    -webkit-transform: rotate(20deg);
            transform: rotate(20deg); }
  to {
    -webkit-transform: scale(-30deg);
            transform: scale(-30deg); } }

@keyframes rotateScale {
  from {
    -webkit-transform: rotate(20deg);
            transform: rotate(20deg); }
  to {
    -webkit-transform: scale(-30deg);
            transform: scale(-30deg); } }

.preloader-info {
  max-width: 360px;
  margin: 0 auto;
  position: relative;
  overflow: hidden; }
  @media screen and (max-width: 700px) {
    .preloader-info {
      max-width: 360px; } }
  .preloader-info img {
    width: 100%; }

.preloader-logo {
  position: absolute;
  top: 40px;
  right: 40px;
  max-width: 215px; }
  @media screen and (max-width: 600px) {
    .preloader-logo {
      top: 10px;
      right: 10px;
      max-width: 150px; } }
  @media screen and (max-width: 400px) {
    .preloader-logo {
      max-width: 130px; } }

.preloader .loader-info {
  font-size: 15px;
  color: #8c8c8c;
  margin-top: 90px;
  margin-bottom: 10px;
  display: block; }
  @media screen and (max-width: 700px) {
    .preloader .loader-info {
      margin-top: 30px; } }
  @media screen and (max-width: 480px) {
    .preloader .loader-info {
      font-size: 13px; } }

.preloader-wrapper {
  padding-top: 100px; }
  @media screen and (max-width: 700px) {
    .preloader-wrapper {
      padding-top: 10px; } }

/*----------------facts-------------------*/
.facts {
  padding: 60px 0;
  background-color: #4bba78; }
  @media screen and (max-width: 991px) {
    .facts {
      padding: 30px 0; } }
  .facts .heading-h1--inverse {
    margin-bottom: 45px; }
  .facts__item {
    display: inline-block;
    width: 150px;
    height: 150px;
    background-color: #fff;
    border-radius: 25%;
    border-top-right-radius: 0;
    box-shadow: 0 9px 72px -19px rgba(0, 0, 0, 0.75);
    text-align: center;
    line-height: 150px; }
    @media screen and (max-width: 768px) {
      .facts__item {
        width: 110px;
        height: 110px;
        line-height: 110px; } }
    @media screen and (max-width: 650px) {
      .facts__item {
        width: 90px;
        height: 90px;
        line-height: 90px; } }
    @media screen and (max-width: 480px) {
      .facts__item {
        width: 75px;
        height: 75px;
        line-height: 75px; } }
    .facts__item img {
      height: 80%;
      vertical-align: middle; }
  .facts__heading {
    padding: 30px 0;
    font-size: 18px;
    line-height: 22px;
    color: #fff; }
    @media screen and (max-width: 768px) {
      .facts__heading {
        display: inline-block;
        width: 230px;
        vertical-align: middle;
        padding: 0 20px; } }
    @media screen and (max-width: 480px) {
      .facts__heading {
        width: 50%;
        padding: 0px;
        margin-left: 5px;
        font-size: 12px;
        line-height: 16px; }
        .facts__heading strong {
          font-size: 15px;
          line-height: 20px; } }
  @media screen and (max-width: 768px) {
    .facts__block {
      margin-bottom: 25px; } }
  @media screen and (max-width: 650px) {
    .facts__block {
      margin-bottom: 20px; } }
  @media screen and (max-width: 480px) {
    .facts__block {
      margin-bottom: 15px; } }

/**********Mai-banner *********/
.maiActia .banner-heading strong {
  color: #df592b;
  line-height: normal; }

.maiActia .btn-share {
  background-color: #df592b; }
  .maiActia .btn-share:hover {
    background-color: #c13505; }

.maiActia .credit-zero-right {
  width: 10%;
  bottom: 30px;
  right: 10%; }
  @media screen and (max-width: 1800px) {
    .maiActia .credit-zero-right {
      right: 5%; } }
  @media screen and (max-width: 1500px) {
    .maiActia .credit-zero-right {
      right: 1%; } }
  @media screen and (max-width: 1199px) {
    .maiActia .credit-zero-right {
      right: 5%;
      bottom: 0;
      height: 80%; } }

.maiActia .credit-zero-left {
  left: 8%;
  bottom: -90px;
  width: 30%; }
  @media screen and (max-width: 1199px) {
    .maiActia .credit-zero-left {
      bottom: 0;
      left: 8%;
      top: 7%; } }
  @media screen and (max-width: 991px) {
    .maiActia .credit-zero-left {
      top: 6%; } }
  @media screen and (max-width: 820px) {
    .maiActia .credit-zero-left {
      top: 17%; } }

.maiActia .credit-zero-left-1 {
  left: 2%;
  width: 17%;
  bottom: 30px; }
  @media screen and (max-width: 1199px) {
    .maiActia .credit-zero-left-1 {
      left: 0;
      top: 0;
      width: 15%; } }
  @media screen and (max-width: 991px) {
    .maiActia .credit-zero-left-1 {
      width: 11%;
      left: 2%;
      top: 2%; } }
  @media screen and (max-width: 820px) {
    .maiActia .credit-zero-left-1 {
      width: 14%;
      top: 5%; } }

/*_____________fonts styles______________*/
@font-face {
  font-family: 'HelveticaNeueCyr Bold';
  src: url("fonts/HelveticaNeueCyr-Bold.eot");
  src: local("☺"), url("fonts/HelveticaNeueCyr-Bold.woff") format("woff"), url("fonts/HelveticaNeueCyr-Bold.ttf") format("truetype"), url("fonts/HelveticaNeueCyr-Bold.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'HelveticaNeueCyr Medium';
  src: url("fonts/HelveticaNeueCyr-Medium.eot");
  src: local("☺"), url("fonts/HelveticaNeueCyr-Medium.woff") format("woff"), url("fonts/HelveticaNeueCyr-Medium.ttf") format("truetype"), url("fonts/HelveticaNeueCyr-Medium.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'HelveticaNeueCyr Thin';
  src: url("fonts/HelveticaNeueCyr-Thin.eot");
  src: local("☺"), url("fonts/HelveticaNeueCyr-Thin.woff") format("woff"), url("fonts/HelveticaNeueCyr-Thin.ttf") format("truetype"), url("fonts/HelveticaNeueCyr-Thin.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'HelveticaNeueCyr Roman';
  src: url("fonts/HelveticaNeueCyr-Roman.eot");
  src: local("☺"), url("fonts/HelveticaNeueCyr-Roman.woff") format("woff"), url("fonts/HelveticaNeueCyr-Roman.ttf") format("truetype"), url("fonts/HelveticaNeueCyr-Roman.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'HelveticaNeueCyr Light';
  src: url("fonts/HelveticaNeueCyr-Light.eot");
  src: local("☺"), url("fonts/HelveticaNeueCyr-Light.woff") format("woff"), url("fonts/HelveticaNeueCyr-Light.ttf") format("truetype"), url("fonts/HelveticaNeueCyr-Light.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'HelveticaNeueCyr Black';
  src: url("fonts/HelveticaNeueCyr-Black.eot");
  src: local("☺"), url("fonts/HelveticaNeueCyr-Black.woff") format("woff"), url("fonts/HelveticaNeueCyr-Black.ttf") format("truetype"), url("fonts/HelveticaNeueCyr-Black.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'Lato Medium';
  src: url("fonts/Lato-Medium.eot");
  src: local("☺"), url("fonts/Lato-Medium.woff") format("woff"), url("fonts/Lato-Medium.ttf") format("truetype"), url("fonts/Lato-Medium.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'Glyphicons Halflings';
  src: url("fonts/glyphicons-halflings-regular.eot");
  src: url("fonts/glyphicons-halflings-regular.eot?#iefix") format("embedded-opentype"), url("fonts/glyphicons-halflings-regular.woff2") format("woff2"), url("fonts/glyphicons-halflings-regular.woff") format("woff"), url("fonts/glyphicons-halflings-regular.ttf") format("truetype"), url("fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular") format("svg"); }

@font-face {
  font-family: 'Helveticaneuecyr Heavy';
  src: url("fonts/helveticaneuecyr-heavy_0.eot");
  src: local("☺"), url("fonts/helveticaneuecyr-heavy_0.woff") format("woff"), url("fonts/helveticaneuecyr-heavy_0.ttf") format("truetype"), url("fonts/helveticaneuecyr-heavy_0.svg") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'OCR';
  src: url("fonts/OCRAExtended.eot");
  src: url("fonts/OCRAExtended.eot?#iefix") format("embedded-opentype"), url("fonts/OCRAExtended.woff2") format("woff2"), url("fonts/OCRAExtended.woff") format("woff"), url("fonts/OCRAExtended.ttf") format("truetype"), url("fonts/OCRAExtended.svg#OCRAExtended") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'icomoon';
  src: url("fonts/icomoon.eot?ux0uig");
  src: url("fonts/icomoon.eot?ux0uig#iefix") format("embedded-opentype"), url("fonts/icomoon.ttf?ux0uig") format("truetype"), url("fonts/icomoon.woff?ux0uig") format("woff"), url("fonts/icomoon.svg?ux0uig#icomoon") format("svg");
  font-weight: normal;
  font-style: normal; }

[class^="icon-"], [class*=" icon-"] {
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  fill: currentColor;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

/* ==========================================
Single-colored icons can be modified like so:
.icon-name {
  font-size: 32px;
  color: red;
}
========================================== */

.icon-ico23:before {
  content: "\e941"; }

.icon-icon04:before {
  content: "\e923"; }

.icon-icon05:before {
  content: "\e924"; }

.icon-icon08:before {
  content: "\e927"; }

.icon-icon09:before {
  content: "\e928"; }

.icon {
  display: inline-block;
  width: 1em;
  height: 1em;
  fill: currentColor; }

.heading-h1 {
  position: relative;
  margin: 0 0 29px;
  font: 40px / 45px "HelveticaNeueCyr Roman", Arial, sans-serif;
  color: #0056b8;
  word-wrap: break-word;
  z-index: 2; }
  @media screen and (max-width: 1440px) {
    .heading-h1 {
      font-size: 30px;
      margin-bottom: 20px; } }
  @media screen and (max-width: 1199px) {
    .heading-h1 {
      font-size: 26px;
      line-height: 27px;
      margin: 0 0 40px; } }
  @media screen and (max-width: 991px) {
    .heading-h1 {
      margin: 0 0 20px; } }
  .heading-h1--inverse {
    color: #fff;
    margin: 0 0 58px; }
    @media screen and (max-width: 767px) {
      .heading-h1--inverse {
        margin-bottom: 20px;
        font-size: 25px; } }
  .heading-h1 span {
    font: 25px "HelveticaNeueCyr Light", Arial, sans-serif; }
    @media screen and (max-width: 1199px) {
      .heading-h1 span {
        font-size: 20px; } }

 h1 {
  font: 32px "HelveticaNeueCyr Roman", Arial, sans-serif;
  color: #0056b8;
  word-wrap: break-word;
  margin: 10px 0 25px; }
  @media screen and (max-width: 1199px) {
     h1 {
      font-size: 23px; } }

.heading-h2, .heading-current-question, h2 {
  position: relative;
  font: 25px "HelveticaNeueCyr Roman", Arial, sans-serif;
  color: #0056b8;
  margin: 0 0 17px;
  word-wrap: break-word;
  z-index: 2; }
  @media screen and (max-width: 1199px) {
    .heading-h2, .heading-current-question, h2 {
      font-size: 24px; } }
  @media screen and (max-width: 767px) {
    .heading-h2, .heading-current-question, h2 {
      font-size: 18px; } }

.heading-video {
  font-size: 30px;
  font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
  margin-bottom: 38px;
  line-height: 40px;
  color: #fff; }

.small-heading {
  font: 15px "HelveticaNeueCyr Medium", Arial, sans-serif;
  padding: 8px 10px;
  background-color: #ecf2fa;
  display: inline-block;
  border-radius: 3px;
  color: #0056b8;
  margin-bottom: 20px; }

.new-main .footer-heading {
  position: relative;
  padding: 0 0 11px;
  margin: 0;
  font-size: 15px;
  font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
  line-height: 25px;
  color: #fff;
  word-wrap: break-word;
  text-transform: none; }
  @media screen and (min-width: 768px) {
    .new-main .footer-heading {
      cursor: default; } }
  @media screen and (max-width: 1199px) {
    .new-main .footer-heading {
      font-size: 16px; } }
  @media screen and (max-width: 767px) {
    .new-main .footer-heading {
      font-size: 13px;
      margin-bottom: 0;
      padding: 0 20px; } }
  .new-main .footer-heading a {
    color: #fff;
    cursor: default;
    border-bottom: none;
    display: block;
    text-decoration: none; }
    @media screen and (max-width: 767px) {
      .new-main .footer-heading a {
        cursor: pointer; } }
    .new-main .footer-heading a:hover, .new-main .footer-heading a:focus {
      color: #fff; }

.modal-heading {
  margin-bottom: 25px;
  color: #0056b8;
  font: 28px / 1.2 "HelveticaNeueCyr Roman", Arial, sans-serif; }
  @media screen and (max-width: 767px) {
    .modal-heading {
      font-size: 19px; } }

.heading-current-question {
  font-size: 21px; }
  @media screen and (max-width: 767px) {
    .heading-current-question {
      font-size: 18px; } }

h1 {
  font: 30px "HelveticaNeueCyr Roman", Arial, sans-serif; }

h1, h2 {
  margin: 35px 0 20px; }

h2 {
  margin-bottom: 20px; }
  @media screen and (max-width: 767px) {
    h2 {
      font-size: 20px; } }

h3,
.heading-h3 {
  font: 22px "HelveticaNeueCyr Roman", Arial, sans-serif;
  margin: 35px 0 20px;
  color: #0056b8; }
  @media screen and (max-width: 991px) {
    h3,
    .heading-h3 {
      margin: 15px 0; } }
  @media screen and (max-width: 767px) {
    h3,
    .heading-h3 {
      font-size: 18px; } }

/*_____________custom navbar styles______________*/
.navbar {
  min-height: 0;
  margin-bottom: 0;
  padding: 0;
  transition: margin-top 1s; }
  @media screen and (max-width: 1009px) {
    .navbar {
      text-align: center;
      margin-right: -16%; } }
  @media screen and (max-width: 767px) {
    .navbar {
      margin-right: 0;
      margin-top: 0;
      padding-top: 25px;
      border-bottom: 1px solid #dddddd; } }

.overflow-menu {
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  padding-left: 12px;
  display: inline-block;
  vertical-align: middle; }
  @media screen and (max-width: 767px) {
    .overflow-menu {
      display: block;
      float: none;
      padding: 0; } }
  @media screen and (min-width: 1009px) {
    .overflow-menu {
      display: none; } }
  .overflow-menu svg {
    width: 30px;
    display: inline-block;
    vertical-align: middle; }
  .overflow-menu li {
    display: inline-block;
    vertical-align: middle; }
  .overflow-menu .more-menu li {
    display: block;
    float: none; }
    @media screen and (max-width: 767px) {
      .overflow-menu .more-menu li {
        text-align: left; } }
    .overflow-menu .more-menu li:not(:last-child) {
      border-bottom: 1px solid #dddddd; }
    .overflow-menu .more-menu li a {
      text-decoration: none;
      display: block; }
  @media screen and (max-width: 767px) {
    .overflow-menu .more-menu .dropdown-toggle {
      display: none; } }
  @media screen and (min-width: 1011px) {
    .overflow-menu .more-menu .dropdown-toggle {
      display: none; } }
  @media screen and (max-width: 767px) {
    .overflow-menu .more-menu .dropdown-menu {
      position: static;
      display: block;
      float: none;
      border: none; } }
  @media screen and (max-width: 767px) {
    .overflow-menu .more-menu .dropdown-menu li {
      border: none; } }
  .overflow-menu .dropdown-menu {
    width: 186px;
    border: none;
    box-shadow: none;
    padding: 0;
    top: 40px;
    border: 1px solid #dddddd;
    border-radius: 5px;
    left: -50px; }
    @media screen and (max-width: 767px) {
      .overflow-menu .dropdown-menu {
        border: none;
        background-color: transparent;
        border-radius: 0; } }
    .overflow-menu .dropdown-menu a,
    .overflow-menu .dropdown-menu span {
      display: block;
      border: none;
      padding: 10px 15px;
      font: 14px "HelveticaNeueCyr Medium", Arial, sans-serif;
      color: #0055b8; }
      @media screen and (max-width: 767px) {
        .overflow-menu .dropdown-menu a,
        .overflow-menu .dropdown-menu span {
          padding: 10px 20px; } }
      .overflow-menu .dropdown-menu a:hover,
      .overflow-menu .dropdown-menu span:hover {
        background-color: transparent; }
    .overflow-menu .dropdown-menu:after {
      content: '';
      position: absolute;
      left: 50%;
      -webkit-transform: translate(-50%, 0) rotate(45deg);
          -ms-transform: translate(-50%, 0) rotate(45deg);
              transform: translate(-50%, 0) rotate(45deg);
      bottom: calc(100% - 10px);
      background-color: #fff;
      width: 20px;
      height: 20px;
      border: 1px solid #dddddd;
      border-bottom: none;
      border-right: none; }
      @media screen and (max-width: 767px) {
        .overflow-menu .dropdown-menu:after {
          display: none; } }

.navbar-nav {
  float: none;
  font-size: 0;
  margin: 0;
  text-align: center;
  margin-right: -30px; }
  @media screen and (max-width: 1500px) {
    .navbar-nav {
      text-align: center; } }
  @media screen and (max-width: 1199px) {
    .navbar-nav {
      margin-right: 0; } }
  @media screen and (max-width: 1009px) {
    .navbar-nav {
      display: inline-block;
      vertical-align: middle; } }
  @media screen and (max-width: 767px) {
    .navbar-nav {
      margin-right: 0;
      float: none;
      display: block; } }
  .navbar-nav:after {
    content: "";
    width: 100%;
    display: inline-block;
    vertical-align: middle; }
  .navbar-nav > li {
    float: none;
    position: relative;
    display: inline-block;
    vertical-align: middle; }
    .navbar-nav > li:not(:last-child) {
      /* margin-right: 20px;
            @media screen and (max-width: 1080px) {
                margin-right: 14px;
            }
            @media screen and (max-width: $screen-sm-max) {
                margin-right: 12px;
            }
            @media screen and (max-width: $screen-xs-max) {
                margin-right: 0;
            } */ }
    @media screen and (max-width: 767px) {
      .navbar-nav > li {
        display: block;
        text-align: left; } }
    .navbar-nav > li:hover > a {
      color: #003764; }
    .navbar-nav > li:hover:before {
      display: none;
      -webkit-transform: translate(0, 0);
      -ms-transform: translate(0, 0);
      transform: translate(0, 0);
      opacity: 1; }
      @media screen and (max-width: 1600px) {
        .navbar-nav > li:hover:before {
          -webkit-transform: translate(0, -6px);
          -ms-transform: translate(0, -6px);
          transform: translate(0, -6px); } }
      @media screen and (max-width: 767px) {
        .navbar-nav > li:hover:before {
          -webkit-transform: translate(0, 0);
          -ms-transform: translate(0, 0);
          transform: translate(0, 0); } }
    .navbar-nav > li [aria-expanded="false"] {
      background-image: url(../assets/images/icons/caret-bottom.png);
      background-repeat: no-repeat;
      background-position: 91% 47px;
      padding-right: 25px; }
      @media screen and (max-width: 1500px) {
        .navbar-nav > li [aria-expanded="false"] {
          padding-right: 20px; } }
      @media screen and (max-width: 1300px) {
        .navbar-nav > li [aria-expanded="false"] {
          background-position: 95% 28px;
          padding-right: 20px; } }
      @media screen and (max-width: 1100px) {
        .navbar-nav > li [aria-expanded="false"] {
          background-position: 93% 30px; } }
      @media screen and (max-width: 767px) {
        .navbar-nav > li [aria-expanded="false"] {
          background-position: 97% 16px; } }
    .navbar-nav > li [aria-expanded="true"] {
      background-image: url(../assets/images/icons/caret-top.png);
      background-repeat: no-repeat;
      background-position: 93% 47px;
      padding-right: 25px; }
      @media screen and (max-width: 1500px) {
        .navbar-nav > li [aria-expanded="true"] {
          padding-right: 20px; } }
      @media screen and (max-width: 1300px) {
        .navbar-nav > li [aria-expanded="true"] {
          background-position: 95% 28px; } }
      @media screen and (max-width: 1100px) {
        .navbar-nav > li [aria-expanded="true"] {
          background-position: 93% 30px; } }
      @media screen and (max-width: 767px) {
        .navbar-nav > li [aria-expanded="true"] {
          background-position: 97% 16px; } }
    .navbar-nav > li > .dropdown-menu {
      padding: 0;
      box-shadow: none;
      border-radius: 5px;
      border: 1px solid #d6dce5; }
      @media screen and (max-width: 767px) {
        .navbar-nav > li > .dropdown-menu {
          margin-top: 0;
          position: relative;
          float: none;
          background-color: transparent;
          border: none; } }
      .navbar-nav > li > .dropdown-menu li {
        float: none;
        display: block; }
        .navbar-nav > li > .dropdown-menu li:not(:last-child) {
          border-bottom: 1px solid #d6dce5; }
          @media screen and (max-width: 767px) {
            .navbar-nav > li > .dropdown-menu li:not(:last-child) {
              border: none; } }
        .navbar-nav > li > .dropdown-menu li a {
          padding: 20px 16px;
          transition: background-color 0.3s; }
          @media screen and (max-width: 1300px) {
            .navbar-nav > li > .dropdown-menu li a {
              padding: 12px 16px; } }
          @media screen and (max-width: 767px) {
            .navbar-nav > li > .dropdown-menu li a {
              padding: 8px 16px 8px 60px; } }
          .navbar-nav > li > .dropdown-menu li a:active {
            color: #d6dce5; }
        .navbar-nav > li > .dropdown-menu li:hover a {
          background-color: #ebf1fa; }
    .navbar-nav > li a,
    .navbar-nav > li span {
      font: 16px "HelveticaNeueCyr Medium", Arial, sans-serif;
      color: #0055b8;
      border-bottom: none;
      padding: 41px 17px;
      text-decoration: none;
      transition: color 0.3s; }
      @media screen and (max-width: 1300px) {
        .navbar-nav > li a,
        .navbar-nav > li span {
          padding: 22px 15px;
          line-height: 20px; } }
      @media screen and (max-width: 1199px) {
        .navbar-nav > li a,
        .navbar-nav > li span {
          font-size: 13px; } }
      @media screen and (max-width: 991px) {
        .navbar-nav > li a,
        .navbar-nav > li span {
          font-size: 14px; } }
      @media screen and (max-width: 767px) {
        .navbar-nav > li a,
        .navbar-nav > li span {
          padding: 10px 20px;
          display: inline-block; } }
      .navbar-nav > li a:hover, .navbar-nav > li a:focus,
      .navbar-nav > li span:hover,
      .navbar-nav > li span:focus {
        background-color: transparent;
        color: #003764; }
    .navbar-nav > li span {
      color: #00b181; }
      @media screen and (max-width: 767px) {
        .navbar-nav > li span {
          display: block; } }
    @media screen and (max-width: 767px) {
      .navbar-nav > li.custom {
        padding-left: 20px; } }
    .navbar-nav > li.custom a,
    .navbar-nav > li.custom span {
      border: 1px dashed #ef5350;
      color: #ef5350;
      border-radius: 30px;
      padding: 5px 12px 5px 10px;
      line-height: 20px;
      transition: background-color 0.3s; }
      @media screen and (max-width: 767px) {
        .navbar-nav > li.custom a,
        .navbar-nav > li.custom span {
          padding: 5px 15px;
          display: inline-block; } }
      .navbar-nav > li.custom a:hover,
      .navbar-nav > li.custom span:hover {
        background-color: #fdebea; }

.navbar-collapse {
  overflow: hidden; }
  @media screen and (max-width: 991px) {
    .navbar-collapse {
      padding: 0; } }
  @media screen and (max-width: 767px) {
    .navbar-collapse {
      padding-left: 0;
      background-color: #F8F7FC;
      margin-bottom: -10px;
      position: absolute;
      top: 100%;
      z-index: 20;
      padding-bottom: 0; } }
  .navbar-collapse.collapse {
    height: auto !important; }
    @media screen and (min-width: 767px) {
      .navbar-collapse.collapse {
        height: 62px !important; } }

.dropdown-toggle {
  border: none;
  text-decoration: none; }

@media screen and (max-width: 767px) {
  .mobile-navbar-fixed {
    position: fixed;
    top: 0;
    width: 400px;
    right: 0;
    -webkit-transform: translate(400px, 0);
        -ms-transform: translate(400px, 0);
            transform: translate(400px, 0);
    height: 100vh;
    transition: -webkit-transform 0.3s;
    transition: transform 0.3s;
    transition: transform 0.3s, -webkit-transform 0.3s; } }

@media screen and (max-width: 399px) {
  .mobile-navbar-fixed {
    width: 100%;
    -webkit-transform: translate(100%, 0);
        -ms-transform: translate(100%, 0);
            transform: translate(100%, 0); } }

.close-mobile-menu {
  display: none;
  position: absolute;
  top: 10px;
  right: 20px;
  z-index: 2;
  cursor: pointer; }
  @media screen and (max-width: 767px) {
    .close-mobile-menu {
      display: block; } }

.navbar-toggle {
  float: none;
  margin: 0;
  background-color: #58b4e5;
  padding: 8px 10px 9px;
  background-color: #4281ca; }
  @media screen and (max-width: 767px) {
    .navbar-toggle {
      float: right;
      height: auto;
      margin-right: 0;
      margin-left: 0;
      margin-top: 11px;
      padding: 6px 10px;
      display: block; } }
  .navbar-toggle svg {
    display: inline-block;
    vertical-align: middle;
    width: 30px;
    height: 20px; }

@media screen and (max-width: 767px) {
  .header-content .new-main .language-wr {
    margin-top: 3px; } }

/*_____________all custom navs(tabs) styles______________*/
/*___________________tabs___________________*/

.promo {
  padding-top: 0; }
  .promo .form-group {
    margin-bottom: 0; }

/*___________________________________social_____________________________________*/
.new-main .social {
  padding: 0;
  margin: 0;
  list-style: none;
  height: 25px; }
  .new-main .social::after {
    content: "";
    width: 100%;
    display: inline-block; }
  .new-main .social-wrapper {
    text-align: right;
    padding: 73px 0 0; }
    @media screen and (max-width: 1199px) {
      .new-main .social-wrapper {
        padding: 73px 20px 25px 0; } }
    @media screen and (max-width: 991px) {
      .new-main .social-wrapper {
        padding-top: 30px;
        text-align: center; } }
  .new-main .social-item {
    display: inline-block;
    vertical-align: middle; }
    .new-main .social-item:not(:last-child) {
      margin-right: 30px; }
      @media screen and (max-width: 1199px) {
        .new-main .social-item:not(:last-child) {
          margin-right: 20px; } }
    .new-main .social-item.tg {
      margin-right: 20px; }
      @media screen and (max-width: 767px) {
        .new-main .social-item.tg {
          margin-right: 10px; } }
    .new-main .social-item svg {
      width: 37px;
      height: 37px; }
  .new-main .social-link {
    display: block;
    font-size: 20px;
    color: #fff;
    border-bottom: none;
    text-decoration: none;
    opacity: 0.6;
    transition: opacity 0.3s; }
    .new-main .social-link:hover, .new-main .social-link:active, .new-main .social-link:focus {
      color: #fff;
      text-decoration: none;
      opacity: 1; }
  .new-main .social .vk {
    font-size: 17px; }

/*------------------------personal area nav-------------------------*/

/*--------------------------------document tabs---------------------------------------*/

/*---------------------------content sidebar-----------------------------*/

.B_crumbBox {
  display: block;
  padding: 0;
  margin: 0;
  list-style: none;
  padding: 8px 0; }
  .B_crumbBox:before, .B_crumbBox:after {
    content: " ";
    display: table; }
  .B_crumbBox:after {
    clear: both; }
  .B_crumbBox > span {
    float: left;
    font-size: 13px;
    position: relative; }
    .B_crumbBox > span:not(:last-child) {
      margin-right: 20px; }
      .B_crumbBox > span:not(:last-child):before {
        content: '';
        position: absolute;
        right: -11px;
        top: 7px;
        width: 5px;
        height: 5px;
        border: 1px solid #007e5c;
        border-top: none;
        border-right: none;
        -webkit-transform: rotate(-135deg);
        -ms-transform: rotate(-135deg);
        transform: rotate(-135deg); }
        @media screen and (max-width: 480px) {
          .B_crumbBox > span:not(:last-child):before {
            width: 4px;
            height: 4px;
            top: 6px; } }
    @media screen and (max-width: 480px) {
      .B_crumbBox > span {
        font-size: 13px; } }
    .B_crumbBox > span a:hover {
      text-decoration: none;
      border: none; }
    .B_crumbBox > span ~ a {
      float: left;
      font-size: 13px;
      position: relative; }
      .B_crumbBox > span ~ a:not(:last-child) {
        margin-right: 20px; }
        .B_crumbBox > span ~ a:not(:last-child):before {
          content: '';
          position: absolute;
          right: -11px;
          top: 7px;
          width: 5px;
          height: 5px;
          border: 1px solid #007e5c;
          border-top: none;
          border-right: none;
          -webkit-transform: rotate(-135deg);
          -ms-transform: rotate(-135deg);
          transform: rotate(-135deg); }
          @media screen and (max-width: 480px) {
            .B_crumbBox > span ~ a:not(:last-child):before {
              width: 4px;
              height: 4px;
              top: 6px; } }
    .B_crumbBox > span a {
      display: block; }

/* about page navigation */
.second-nav {
  margin: 0;
  padding: 0;
  text-align: justify;
  list-style-type: none; }
  @media screen and (max-width: 991px) {
    .second-nav {
      text-align: left;
      display: inline-block;
      vertical-align: middle;
      width: 60%; } }
  .second-nav-wrapper {
    background-color: #f7f7f7;
    border-top: 1px solid #eaeaea;
    border-bottom: 1px solid #eaeaea;
    max-height: 70px; }
    @media screen and (max-width: 767px) {
      .second-nav-wrapper {
        display: none; } }
  .second-nav li {
    display: inline-block;
    vertical-align: middle;
    padding: 20px 0; }
    .second-nav li:not(:last-child) {
      margin-right: 3%; }
    .second-nav li a {
      font-size: 16px;
      color: #0c406b;
      font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
      border: none;
      text-decoration: none; }
      @media screen and (max-width: 1199px) {
        .second-nav li a {
          font-size: 13px; } }
      .second-nav li a:hover {
        color: #0055b8; }

.second-nav-overflow {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  list-style-type: none;
  padding: 0;
  margin: 0; }
  @media screen and (max-width: 767px) {
    .second-nav-overflow {
      display: block; } }
  .second-nav-overflow svg {
    width: 30px;
    display: inline-block;
    vertical-align: middle; }
  .second-nav-overflow li {
    display: inline-block;
    vertical-align: middle; }
  .second-nav-overflow .second-more-menu li {
    display: block;
    float: none;
    text-align: center; }
    .second-nav-overflow .second-more-menu li:not(:last-child) {
      border-bottom: 1px solid #dddddd; }
  @media screen and (max-width: 767px) {
    .second-nav-overflow .second-more-menu .dropdown-toggle {
      display: none; } }
  @media screen and (min-width: 992px) {
    .second-nav-overflow .second-more-menu .dropdown-toggle {
      display: none; } }
  @media screen and (max-width: 767px) {
    .second-nav-overflow .second-more-menu .dropdown-menu {
      position: static;
      display: block;
      float: none;
      border: none; } }
  @media screen and (max-width: 767px) {
    .second-nav-overflow .second-more-menu .dropdown-menu li {
      border: none; } }
  .second-nav-overflow .dropdown-menu {
    min-width: 186px;
    border: none;
    box-shadow: none;
    padding: 0;
    top: 40px;
    border: 1px solid #dddddd;
    border-radius: 20px;
    left: -78px; }
    .second-nav-overflow .dropdown-menu a,
    .second-nav-overflow .dropdown-menu span {
      display: block;
      border: none;
      padding: 10px 15px;
      font: 14px "HelveticaNeueCyr Medium", Arial, sans-serif;
      color: #0055b8; }
      .second-nav-overflow .dropdown-menu a:hover,
      .second-nav-overflow .dropdown-menu span:hover {
        background-color: transparent; }
    .second-nav-overflow .dropdown-menu:after {
      content: '';
      position: absolute;
      left: 50%;
      -webkit-transform: translate(-50%, 0) rotate(45deg);
          -ms-transform: translate(-50%, 0) rotate(45deg);
              transform: translate(-50%, 0) rotate(45deg);
      bottom: calc(100% - 10px);
      background-color: #fff;
      width: 20px;
      height: 20px;
      border: 1px solid #dddddd;
      border-bottom: none;
      border-right: none; }
      @media screen and (max-width: 767px) {
        .second-nav-overflow .dropdown-menu:after {
          display: none; } }

/*_____________personal data styles______________*/
.personal {
  padding-bottom: 37px;
  padding-top: 50px; }
  @media screen and (max-width: 767px) {
    .personal {
      padding-bottom: 0;
      padding-top: 20px; } }

.personal-table-holder {
  font-size: 0; }
  .personal-table-holder:before, .personal-table-holder:after {
    content: " ";
    display: table; }
  .personal-table-holder:after {
    clear: both; }
  @media screen and (max-width: 767px) {
    .personal-table-holder .form-control {
      padding-left: 20px; } }
  .personal-table-holder .form-info {
    top: 10px; }
    @media screen and (max-width: 767px) {
      .personal-table-holder .form-info {
        top: 9px; } }

/*--------------------result-page styles------------------------*/

/*-----------------------docs styles----------------------*/

/*_____________bootstrap slider styles______________*/
/*
 * Slider for Bootstrap
 *
 * Copyright 2012 Stefan Petre
 * Licensed under the Apache License v2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * SCSS File by Detlef Beyer
 */
/* Variables should be defined outside of this file     */
/* doing it here just to keep things together in github */

/*_____________contacts styles______________*/

@-webkit-keyframes chase {
  from {
    width: 80%; }
  to {
    width: 100%; } }

@keyframes chase {
  from {
    width: 80%; }
  to {
    width: 100%; } }

@-webkit-keyframes progress {
  to {
    background-position: 20px 0; } }

@keyframes progress {
  to {
    background-position: 20px 0; } }

.calculator-table td {
  padding: 5px 0; }

@-webkit-keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-15px);
            transform: translateY(-15px); }
  60% {
    -webkit-transform: translateY(-7px);
            transform: translateY(-7px); } }

/**********************
 *Registration slider
 *
 *
 *
 *
 *
 **************************/

/**************************************
 * Registration contacts
 *
 *
 *
 ***************************************/
.contacts {
  background-color: #f1f1f1; }

/*************************************
 * Registration bar
 *
 *
 *
 *
 ***********************************/

/**********************************************
 * Card Block
 *
 *
 *
 *
 ***********************************************/

.card-form--group {
  font-size: 0;
  margin-bottom: 19px; }
  .card-form--group:last-of-type {
    margin-bottom: 10px; }
  .card-form--group span {
    display: inline-block;
    vertical-align: middle; }

/*-------------------------------------data edit--------------------------------*/

/*---------------------satelits registration ----------------------*/

@-webkit-keyframes preloaderOverlayClosed {
  0% {
    -webkit-filter: blur(0);
            filter: blur(0); }
  10% {
    opacity: 1; }
  90% {
    opacity: 0.1; }
  100% {
    -webkit-filter: blur(15px);
            filter: blur(15px);
    opacity: 0;
    width: 100%;
    height: 100%;
    overflow: hidden; } }

@keyframes preloaderOverlayClosed {
  0% {
    -webkit-filter: blur(0);
            filter: blur(0); }
  10% {
    opacity: 1; }
  90% {
    opacity: 0.1; }
  100% {
    -webkit-filter: blur(15px);
            filter: blur(15px);
    opacity: 0;
    width: 100%;
    height: 100%;
    overflow: hidden; } }

/*_____________modals styles______________*/
.modal .help-tooltip-data {
  bottom: calc(100% + 30px); }

.modal-heading {
  margin-bottom: 15px; }
  @media screen and (max-width: 480px) {
    .modal-heading {
      margin-bottom: 0; } }

.modal-video {
  background-color: rgba(0, 0, 0, 0.6); }
  .modal-video .modal-dialog {
    padding: 0;
    border: none;
    background-color: transparent; }
  .modal-video .embed-responsive-16by9:after, .modal-video .embed-responsive-16by9:before, .modal-video .embed-wrapper:after, .modal-video .embed-wrapper:before {
    display: none; }

.modal-dialog {
  width: 645px;
  margin: 130px auto;
  border-radius: 5px;
  background-color: #ecf9ff; }
  @media screen and (max-width: 1500px) {
    .modal-dialog {
      margin: 40px auto; } }
  @media screen and (max-width: 991px) {
    .modal-dialog {
      width: 90%;
      margin: 30px auto; } }
  .modal-dialog .error-text {
    color: #eb2a32;
    font-size: 15px;
    line-height: 23px;
    display: inline-block;
    white-space: normal;
    word-break: break-word; }

.modal-video .modal-dialog {
  width: 825px;
  margin: 60px auto 0; }
  @media screen and (max-width: 991px) {
    .modal-video .modal-dialog {
      width: 90%; } }

.modal-video .modal-body {
  padding: 0; }
  .modal-video .modal-body video {
    margin-bottom: -7px;
    width: 100%; }

.modal-content {
  border: none;
  box-shadow: 0 0 0 0 transparent;
  border-radius: 5px; }
  .modal-content .big-slider {
    margin: 0; }

.modal-footer {
  padding: 25px 0;
  background-color: #f0f2f7;
  text-align: center;
  border-top: 1px solid #dbdeea;
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px; }
  @media screen and (max-width: 767px) {
    .modal-footer {
      padding: 10px 0; } }

.modal-header {
  padding: 36px 16px 0;
  border-bottom: none;
  text-align: center; }
  .modal-header .close svg {
    width: 15px;
    height: 15px; }
  @media screen and (max-width: 767px) {
    .modal-header {
      padding-top: 20px; } }

.modal-body {
  max-width: 375px;
  margin: 0 auto;
  padding: 20px 0;
  /* padding: 15px 90px 4px;
        @media screen and (max-width: $screen-md-max) {
            padding: 15px 60px;
        }
        @media screen and (max-width: $screen-sm-max) {
            padding: 15px 40px 4px;
        }
        @media screen and (max-width: $screen-xs-max) {
            padding: 15px 20px;
        } */ }
  @media screen and (max-width: 767px) {
    .modal-body {
      padding: 20px 30px; } }
  .modal-body .form-group:not(:last-of-type) {
    margin-bottom: 28px; }
    @media screen and (max-width: 767px) {
      .modal-body .form-group:not(:last-of-type) {
        margin-bottom: 15px; } }
  .modal-body .form-group--large {
    margin-bottom: 17px;
    margin-top: -8px; }
    @media screen and (max-width: 767px) {
      .modal-body .form-group--large {
        margin: 0 0 10px; } }
  .modal-body .form-label {
    width: 100%;
    display: block;
    padding: 0;
    margin-bottom: 10px;
    margin-left: 25px; }
    .modal-body .form-label--default {
      width: 100%;
      padding: 0;
      margin-bottom: 5px;
      margin-left: 0; }
    @media screen and (max-width: 767px) {
      .modal-body .form-label {
        width: 100%;
        margin: 0 0 5px 22px; } }
  .modal-body .form-info {
    top: -27px; }
    @media screen and (max-width: 767px) {
      .modal-body .form-info {
        top: -22px; } }
  .modal-body .form-control--wr {
    width: 100%;
    display: block;
    padding: 0; }
    @media screen and (max-width: 767px) {
      .modal-body .form-control--wr {
        width: 100%;
        margin: 0; } }
  .modal-body .form-control {
    width: 100%;
    height: 55px;
    line-height: 55px; }
    @media screen and (max-width: 767px) {
      .modal-body .form-control {
        height: 45px;
        line-height: 45px;
        font-size: 14px;
        padding-top: 0;
        padding-bottom: 0;
        padding-top: 0;
        padding-bottom: 0;
        font-size: 14px; } }
  @media screen and (max-width: 1199px) {
    .modal-body .help-tooltip-data {
      width: auto;
      left: 0;
      right: 0;
      max-width: none; }
      .modal-body .help-tooltip-data:before {
        display: none; } }

.promocode {
  font-size: 30px;
  line-height: 15px;
  margin-left: 10px;
  display: inline-block;
  vertical-align: middle;
  padding: 14px 22px;
  border-radius: 20px;
  border: 1px dashed #0056b8;
  background: #fff; }
  @media screen and (max-width: 991px) {
    .promocode {
      margin-left: 0;
      margin-top: 10px; } }

.close-modal {
  background-color: rgba(0, 0, 0, 0.6); }
  .close-modal .modal-content {
    padding: 12% 15px 15% 50%;
    background-color: transparent;
    background-image: url("../assets/images/close-popup-bg.jpg");
    background-repeat: no-repeat;
    box-shadow: -15px 21px 61px -16px rgba(0, 0, 0, 0.75); }
    @media screen and (max-width: 991px) {
      .close-modal .modal-content {
        background-position: 62% 0; } }
    @media screen and (max-width: 767px) {
      .close-modal .modal-content {
        background-image: none;
        padding: 12% 30px; } }
    .close-modal .modal-content .heading-h2, .close-modal .modal-content .heading-current-question, .close-modal .modal-content h2 {
      font-size: 24px; }
      .close-modal .modal-content .heading-h2 strong, .close-modal .modal-content .heading-current-question strong, .close-modal .modal-content h2 strong {
        font-size: 31px; }
  .close-modal .close {
    right: 0;
    top: -30px;
    color: #fff; }
  .close-modal .modal-dialog {
    width: 800px;
    border-radius: 5px;
    border: none; }
    @media screen and (max-width: 991px) {
      .close-modal .modal-dialog {
        width: 90%;
        margin: 30px auto; } }

.modal-error {
  border: 1px solid #0155b8; }
  .modal-error .modal-title {
    padding: 10px 20px;
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
    font-size: 24px;
    color: #fff;
    background-color: #0155b8; }
  .modal-error .close {
    top: -30px;
    right: 0;
    color: #fff; }
  .modal-error-wrapper {
    text-align: center; }

.thanks-modal {
  background-color: rgba(0, 0, 0, 0.4); }
  .thanks-modal .modal-error .modal-content {
    padding: 20px 25px; }

.modal-footer--login button {
  margin-bottom: 25px; }

.modal-content .big-slider {
  margin-top: 0; }

.remember-holder {
  margin-bottom: 20px; }
  .remember-holder:before, .remember-holder:after {
    content: " ";
    display: table; }
  .remember-holder:after {
    clear: both; }
  @media screen and (max-width: 767px) {
    .remember-holder {
      margin-bottom: 15px; } }

.remember-block {
  float: left;
  margin: 22px 0 0;
  font: 14px 'HelveticaNeueCyr Light', Arial, sans-serif; }
  .remember-block input, .remember-block label {
    display: inline-block;
    vertical-align: middle;
    cursor: pointer; }
  @media screen and (max-width: 767px) {
    .remember-block {
      font-size: 12px;
      margin: 15px 0 0; } }
  .remember-block input {
    margin-top: 2px;
    display: none; }
  .remember-block span {
    display: inline-block;
    vertical-align: middle; }
  .remember-block .checkbox-emulator {
    position: relative;
    width: 17px;
    height: 17px;
    border: 1px solid #dedfe1;
    margin-right: 6px;
    cursor: pointer; }
    .remember-block .checkbox-emulator:before {
      content: '';
      width: 9px;
      height: 6px;
      position: absolute;
      left: 3px;
      top: 3px;
      border: 1px solid #fff;
      border-top: none;
      border-right: none;
      -webkit-transform: rotate(-45deg);
      -ms-transform: rotate(-45deg);
      transform: rotate(-45deg);
      opacity: 0; }
  .remember-block input:checked + span {
    background-color: #0659b3;
    border-right-color: #0659b3; }
    .remember-block input:checked + span:before {
      opacity: 1; }

.forgot-password {
  float: right;
  margin: 22px 0 0;
  border: none;
  font: 14px 'HelveticaNeueCyr Light', Arial, sans-serif;
  color: #0659b3;
  text-decoration: underline;
  display: block; }
  .forgot-password:hover {
    color: #0659b3;
    text-decoration: none; }
  @media screen and (max-width: 767px) {
    .forgot-password {
      font-size: 12px;
      margin: 15px 0 0; } }

/* #modal_auth {
    .modal-header{
        padding: 25px 40px 22px;
        background-color: #0155b8;
        border-radius: 5px 5px 0 0;
        @media screen and (max-width: $screen-xs-max) {
            padding: 20px;
        }
    }
    .modal-heading{
        font: 25px 'HelveticaNeueCyr Roman', Arial, sans-serif;
        padding: 0;
        margin: 0;
        color: #fff;
        float: left;
    }
    .close{
        font: 31px / 16px 'HelveticaNeueCyr Light', Arial, sans-serif;
        color: #a0a0a0;
        top: -20px;
        right: 0;
        opacity: 1;
        cursor: pointer;
        &:focus{
            outline: none;
        }
    }
    .modal-dialog{
        width: 775px;
        border: none;
        @media screen and (max-width: $screen-xs-max) {
            width: 90%;
            margin: 30px auto;
        }
    }
    .modal-body{
        padding: 36px 99px 0;
        border: 1px solid #d7d7d7;
        border-radius: 0 0 5px 5px;
        border-bottom: 4px solid #0155b8;
        @media screen and (max-width: $screen-xs-max) {
            padding: 15px 25px 0;
        }
    }

    .modal-footer{
        padding: 0;
    }
    .modal-bottom{
        background-color: #f1f1f1;
        padding: 25px 0;
        margin: 0 -99px;
        @media screen and (max-width: $screen-xs-max) {
            margin: 0 -25px;
        }
    }
    .error_text{
        position: absolute;
        bottom: calc(100% + 5px);
        left: 0;
        right: 0;
        padding: 10px;
        background-color: #f3f3f3;
        border: 1px solid #ccc;
        border-radius: 3px;
        &:before{
            content: "";
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #f3f3f3;
            border: 1px solid #ccc;
            border-right: none;
            border-top: none;
            transform: rotate(-45deg) translate(-50%, 0);
            left: 50%;
            bottom: -2px;
        }
    }

} */

.close {
  position: absolute;
  right: 10px;
  top: 10px;
  z-index: 20; }

.thanks-modal .modal-dialog {
  width: 400px;
  text-align: center; }
  @media screen and (max-width: 767px) {
    .thanks-modal .modal-dialog {
      width: 90%; } }

.thanks-modal .modal-content {
  padding: 30px;
  font-size: 22px;
  font-family: "HelveticaNeueCyr Roman", Arial, sans-serif; }

.promo-modal-calc .modal-dialog {
  max-width: 290px;
  border: none;
  background-color: transparent;
  position: absolute;
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%, -50%) !important;
      -ms-transform: translate(-50%, -50%) !important;
          transform: translate(-50%, -50%) !important;
  margin: 0; }
  .promo-modal-calc .modal-dialog .modal-content {
    padding: 35px 30px;
    background-color: #fff;
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif; }
    .promo-modal-calc .modal-dialog .modal-content--error {
      color: #d23d3f; }
    .promo-modal-calc .modal-dialog .modal-content img {
      margin-bottom: 10px; }
  .promo-modal-calc .modal-dialog .form-group {
    margin-bottom: 10px; }
  .promo-modal-calc .modal-dialog .close {
    opacity: 1;
    width: 10px;
    float: none;
    font-size: 0; }
  .promo-modal-calc .modal-dialog .btn-personal, .promo-modal-calc .modal-dialog .btn-success {
    padding-top: 9px;
    padding-bottom: 9px;
    font-size: 16px; }

.promo-modal-calc.modal {
  background-color: rgba(0, 0, 0, 0.3); }

#aboutVideo .modal-body {
  max-width: none; }

.speak-about {
  padding: 25px 0;
  font-family: HelveticaNeueCyr Roman, Arial, sans-serif;
  text-align: left;
  background-color: #eceff9; }
  @media screen and (min-width: 1200px) {
    .speak-about .heading-h1 {
      margin-bottom: 50px; } }
  @media screen and (max-width: 991px) {
    .speak-about {
      padding: 20px 0 0; } }
  .speak-about a {
    display: block;
    padding: 0 25px 0 15px;
    text-decoration: none;
    font-size: 20px;
    color: #003764;
    border-left: solid 2px #0056b8; }
    @media screen and (max-width: 1200px) {
      .speak-about a {
        font-size: 18px; } }
    @media screen and (max-width: 650px) {
      .speak-about a {
        font-size: 16px; } }
    @media screen and (max-width: 768px) and (min-width: 480px) {
      .speak-about a {
        width: 75%; } }
    @media screen and (max-width: 480px) {
      .speak-about a {
        font-size: 15px; } }
  .speak-about span {
    display: block;
    font-size: 13px;
    color: #7c8295;
    margin: 0 0 40px 22px; }
    @media screen and (max-width: 768px) {
      .speak-about span {
        margin-bottom: 20px; } }
  .speak-about img {
    display: inline-block;
    width: auto !important;
    height: 40px;
    margin: 20px 0 20px 22px;
    transition: all .5s ease-out; }
    @media screen and (max-width: 768px) {
      .speak-about img {
        max-height: 35px;
        margin: 10px 0 10px 22px; } }
    @media screen and (max-width: 650px) {
      .speak-about img {
        max-height: 30px; } }
    @media screen and (max-width: 480px) {
      .speak-about img {
        max-height: 25px; } }
  @media screen and (max-width: 992px) and (min-width: 768px) {
    .speak-about .imgSMI-3 {
      margin-top: 40px; } }

/*.owl-carousel-speak {
	@media screen and (max-width: 1500px) {
		max-width: 90%;	
		margin: 0 auto;	
	}
	.owl-item {
		height: 220px;	
		padding: 0;	
		display: flex;	
		align-items: center;
		justify-content: center;
		background-color: #fff;
		border: 1px solid #dbdee9;
		border-radius: 5px;

		.speak-wrapper {
			text-align: center;	
			width: 100%;	
		}

		a {
			width: 100%;	
			height: 100%;	
			display: block;	
			padding: 75px 30px 0;	
			img {
				display: inline-block;	
				width: auto;
				height: auto !important;	
				max-height: 45px;	
			}
		}
		
		span {
			position: absolute;	
			bottom: 40px;	
			left: 50%;	
			transform: translate(-50%, 0);
			font-size: 13px;	
			font-family: $font-family-roman;
			color: #7c8295;
		}
	}

	

	.owl-prev,
	.owl-next {
		position: absolute;	
		top: 50%;	
		width: 60px;	
		height: 60px;	
		transform: translate(0, -50%);
		border-radius: 50%;	
		background-size: 60px 60px;
		background-repeat: no-repeat;	
	}

	.owl-prev {
		left: -31px;	
		float: left;
		background-image: url('../assets/images/speak/speak-right.png');
	}

	.owl-next {
		right: -31px;
		float: right;	
		background-image: url('../assets/images/speak/speak-left.png');
	}

	.owl-dots {
		display: flex;	
		width: 100%;	
		justify-content: center;	
		padding-top: 10px;	
	}

	.owl-dot {
		width: 8px;	
		height: 8px;	
		border-radius: 8px;	
		background-color: #ccc;

		&:not(:last-child) {
			margin-right: 5px;
		}

		&.active {
			background-color: $heading-color;
		}
	}
}*/
/*_____________contacts styles______________*/
.form-submit {
  display: inline-block;
  vertical-align: middle; }
  .form-submit:nth-of-type(1) {
    margin-right: 20px; }
    @media screen and (max-width: 767px) {
      .form-submit:nth-of-type(1) {
        margin-right: 0; } }
    @media screen and (max-width: 340px) {
      .form-submit:nth-of-type(1) {
        margin-bottom: 20px; } }

.form-group {
  position: relative;
  margin-bottom: 17px;
  font-size: 0; }
  .form-group:before, .form-group:after {
    content: " ";
    display: table; }
  .form-group:after {
    clear: both; }
  @media screen and (max-width: 991px) {
    .form-group {
      margin-bottom: 20px; } }

.form-control--wr {
  position: relative;
  width: 66%;
  float: left; }
  @media screen and (max-width: 767px) {
    .form-control--wr {
      float: none;
      padding: 0;
      width: 100%;
      text-align: left; } }

.form-control {
  height: 45px;
  border-radius: 0;
  border: 1px solid #e2e2e2;
  background-color: #ffffff;
  color: #393939;
  padding: 2px 30px 0 18px;
  font: 17px / 45px "HelveticaNeueCyr Roman", Arial, sans-serif;
  box-shadow: none; }
  @media screen and (max-width: 991px) {
    .form-control {
      height: 45px; } }
  @media screen and (max-width: 767px) {
    .form-control {
      width: 100%;
      font: 17px / 45px "HelveticaNeueCyr Roman", Arial, sans-serif;
      padding: 17px 30px 15px 15px; } }
  .form-control::-ms-clear {
    display: none; }
  .form-control::-webkit-input-placeholder {
    /* Chrome/Opera/Safari */
    color: #cacaca; }
    @media screen and (max-width: 767px) {
      .form-control::-webkit-input-placeholder {
        font-size: 14px; } }
  .form-control::-moz-placeholder {
    /* Firefox 19+ */
    color: #cacaca; }
    @media screen and (max-width: 767px) {
      .form-control::-moz-placeholder {
        font-size: 14px; } }
  .form-control:-ms-input-placeholder {
    /* IE 10+ */
    color: #cacaca; }
    @media screen and (max-width: 767px) {
      .form-control:-ms-input-placeholder {
        font-size: 14px; } }
  .form-control:focus {
    box-shadow: 0 0 0 0 transparent; }
    .form-control:focus::-webkit-input-placeholder {
      /* Chrome/Opera/Safari */
      color: #fff; }
    .form-control:focus::-moz-placeholder {
      /* Firefox 19+ */
      color: #fff; }
    .form-control:focus:-ms-input-placeholder {
      /* IE 10+ */
      color: #fff; }

.form-info {
  position: absolute;
  left: 0;
  top: 13px;
  width: 25px;
  cursor: pointer; }
  @media screen and (max-width: 767px) {
    .form-info {
      top: 0;
      left: 0; } }
  .form-info img {
    width: 17px;
    height: 17px; }

.form-label {
  float: left;
  width: 34%;
  padding-right: 10px;
  padding-top: 13px;
  padding-left: 30px;
  margin-bottom: 0;
  word-break: break-word;
  font: 14px / 1.2 "HelveticaNeueCyr Bold", Arial, sans-serif;
  color: #252525; }
  @media screen and (max-width: 767px) {
    .form-label {
      float: none;
      padding: 0;
      width: 100%;
      margin: 0 0 5px 30px; } }
  .form-label--default {
    width: 100%;
    padding: 0;
    margin-bottom: 5px;
    margin-left: 0; }

#phone {
  font-size: 20px; }

.form-control[disabled],
.form-control[readonly] {
  background-color: #dde1e5;
  border: none;
  box-shadow: none; }

#autocomplete {
  background-image: url("../assets/images/search-icon.png");
  background-repeat: no-repeat;
  padding-left: 20px;
  background-position: 97% 14px; }

textarea.form-control {
  height: 60px;
  padding-top: 10px;
  padding-bottom: 20px;
  overflow-y: hidden;
  line-height: 20px;
  resize: none; }
  textarea.form-control.write-us {
    resize: vertical;
    height: 150px; }

 .help-tooltip-data {
  position: absolute;
  top: -3px;
  left: calc(100% + 40px);
  padding: 12px 20px;
  width: 93%;
  font: 15px / 1.2 "HelveticaNeueCyr Light", Arial, sans-serif;
  color: #5e5e5e;
  background-color: #f3f3f3;
  border: 1px solid #ccc;
  border-radius: 10px;
  opacity: 0;
  z-index: 2;
  transition: opacity 0.3s; }
  @media screen and (max-width: 1199px) {
     .help-tooltip-data {
      width: 75%; } }
  @media screen and (max-width: 991px) {
     .help-tooltip-data {
      position: static;
      top: 0;
      display: none;
      width: 85%;
      float: right;
      margin-top: 10px;
      -webkit-transform: translate(0, 0);
      -ms-transform: translate(0, 0);
      transform: translate(0, 0);
      opacity: 1; } }
  @media screen and (max-width: 767px) {
     .help-tooltip-data {
      font-size: 10px;
      float: none;
      opacity: 0;
      display: none;
      width: 100%;
      text-align: left; } }
   .help-tooltip-data:before {
    content: "";
    position: absolute;
    right: calc(100% - 5px);
    top: 25px;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
    width: 10px;
    height: 10px;
    border: 1px solid #ccc;
    border-top: none;
    border-right: none;
    background-color: #f3f3f3;
    z-index: 1; }
    @media screen and (max-width: 767px) {
       .help-tooltip-data:before {
        display: none; } }

.personal-table-holder {
  position: relative; }

.help-tooltip-data {
  left: 0;
  right: 0;
  width: 100%;
  bottom: calc(100% + 15px);
  top: auto;
  min-width: 200px;
  max-width: none;
  min-height: 50px;
  word-break: break-word;
  display: none;
  background-color: #fff;
  color: #333;
  z-index: 30; }
  @media screen and (max-width: 767px) {
    .help-tooltip-data {
      min-width: 0; } }
  .help-tooltip-data:before {
    left: 10px;
    right: auto;
    top: calc(100% - 5px);
    background-color: #fff;
    -webkit-transform: rotate(-45deg);
    -ms-transform: rotate(-45deg);
    transform: rotate(-45deg); }
    @media screen and (max-width: 767px) {
      .help-tooltip-data:before {
        display: none; } }

.form-info:hover ~ .help-tooltip-data {
  opacity: 1;
  display: block; }

@media screen and (max-width: 767px) {
  .form-info {
    left: 0;
    right: auto; } }

/*---------------------------------validation-------------------------*/
textarea {
  resize: none;
  overflow: auto; }

.form .input {
  display: inline-block;
  vertical-align: middle;
  width: 100%;
  height: 34px;
  border: 1px solid #000;
  padding: 0 10px;
  color: #1d1d1b; }

.form .error_text {
  position: relative;
  padding: 15px;
  margin-bottom: 0;
  border: 1px solid transparent;
  border-radius: 5px;
  margin-top: 5px;
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb;
  display: none;
  text-align: left;
  font: 12px / 1.2 "HelveticaNeueCyr Light", Arial, sans-serif; }
  @media screen and (max-width: 991px) {
    .form .error_text {
      font-size: 10px; } }

.form .checkbox {
  display: inline-block;
  vertical-align: middle;
  margin-right: 20px; }

.error-text {
  font-size: 12px;
  display: block;
  position: relative;
  margin-top: 5px;
  padding: 15px;
  margin-bottom: 10px;
  border: 1px solid transparent;
  border-radius: 5px;
  color: #721c24;
  background-color: #f8d7da;
  border-color: #f5c6cb; }

/*
 * CSS Styles that are needed by jScrollPane for it to operate correctly.
 *
 * Include this stylesheet in your site or copy and paste the styles below into your stylesheet - jScrollPane
 * may not operate correctly without them.
 */

/* Yuk! CSS Hack for IE6 3 pixel bug :( */

/* .password-list {
    padding: 0;
    margin: 0;
    list-style-type: none;
    display: inline-block;
    font-size: 0;  
    width: 100%;    
    padding-top: 5px;   
    @media screen and (max-width: $screen-sm-max) {
        margin-bottom: 20px;    
        width: 300px;
    }
} */

.password-list {
  margin: 0;
  padding: 0 25px 0 0;
  float: left;
  width: 50%;
  list-style-type: none; }

.password-list li {
  display: inline-block;
  position: relative;
  padding-left: 20px; }
  @media screen and (max-width: 1199px) {
    .password-list li {
      padding-left: 14px; } }
  @media screen and (max-width: 991px) {
    .password-list li {
      padding-left: 20px; } }
  @media screen and (max-width: 767px) {
    .password-list li {
      padding-left: 14px; } }

.password-list li:before {
  content: "";
  position: absolute;
  top: 7px;
  left: 0;
  width: 6px;
  height: 6px;
  border-radius: 6px;
  background-color: #0056b8;
  transition: all .7s; }

.password-list li.active:before {
  content: "";
  position: absolute;
  top: 7px;
  left: 0;
  width: 10px;
  height: 14px;
  border-radius: 0;
  border-right: 2px solid transparent;
  border-bottom: 2px solid transparent;
  -webkit-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
          transform: rotate(45deg);
  -webkit-transform-origin: 0% 100%;
      -ms-transform-origin: 0% 100%;
          transform-origin: 0% 100%;
  background-color: transparent;
  -webkit-animation: checkbox-check 125ms 250ms cubic-bezier(0.4, 0, 0.23, 1) forwards;
          animation: checkbox-check 125ms 250ms cubic-bezier(0.4, 0, 0.23, 1) forwards; }
  @media screen and (max-width: 1199px) {
    .password-list li.active:before {
      top: 5px; } }

.password-list li:after {
  content: "";
  position: absolute;
  top: 10px;
  left: 14px;
  width: 0;
  height: 1px;
  background-color: #ccc;
  transition: width .7s; }

.password-list li.active:after {
  width: 100%; }

@-webkit-keyframes checkbox-check {
  0% {
    width: 0;
    height: 0;
    border-color: #45bc75;
    -webkit-transform: translate3d(0, 0, 0) rotate(45deg);
            transform: translate3d(0, 0, 0) rotate(45deg); }
  33% {
    width: .2em;
    height: 0;
    -webkit-transform: translate3d(0, 0, 0) rotate(45deg);
            transform: translate3d(0, 0, 0) rotate(45deg); }
  100% {
    width: 6px;
    height: 12px;
    border-color: #45bc75;
    -webkit-transform: translate3d(0, -0.5em, 0) rotate(45deg);
            transform: translate3d(0, -0.5em, 0) rotate(45deg); } }

@keyframes checkbox-check {
  0% {
    width: 0;
    height: 0;
    border-color: #45bc75;
    -webkit-transform: translate3d(0, 0, 0) rotate(45deg);
            transform: translate3d(0, 0, 0) rotate(45deg); }
  33% {
    width: .2em;
    height: 0;
    -webkit-transform: translate3d(0, 0, 0) rotate(45deg);
            transform: translate3d(0, 0, 0) rotate(45deg); }
  100% {
    width: 6px;
    height: 12px;
    border-color: #45bc75;
    -webkit-transform: translate3d(0, -0.5em, 0) rotate(45deg);
            transform: translate3d(0, -0.5em, 0) rotate(45deg); } }

/* .password-list li {
    position: relative;
    padding-left: 15px;
    display: inline-block;
    vertical-align: top;
    font-size: 13px;
    width: 50%;
    transition: all 0.7s;
} */
/* .password-list li:before {
    content: '';
    position: absolute;
    top: 7px;
    left: 0;
    width: 6px;
    height: 6px;
    border-radius: 6px;
    background-color: #0056b8;
    transition: all 0.7s;
} */
.password-list li:after {
  content: '';
  position: absolute;
  top: 11px;
  left: 15px;
  width: 0;
  height: 1px;
  background-color: #ccc;
  transition: width 0.7s; }
  @media screen and (max-width: 767px) {
    .password-list li:after {
      top: 9px; } }

.password-list li.active {
  color: #ccc; }

/* .password-list li.active:before {
    background-color: #ccc;
} */
.password-list li.active:after {
  width: calc(100% - 15px); }

/*_____________repayment styles______________*/
/*    verify card     */
  .restructuring-item {
    float: left;
    width: 25%;
    padding: 0 10px;
    margin-bottom: 20px; }
    @media screen and (max-width: 767px) {
      .restructuring-item {
        width: 50%;
        min-height: 300px; } }
    @media screen and (max-width: 480px) {
      .restructuring-item {
        width: 100%;
        float: none;
        margin-bottom: 30px;
        min-height: 0; } }

.spinner {
  -webkit-animation: rotator 1.4s linear infinite;
          animation: rotator 1.4s linear infinite; }

@-webkit-keyframes rotator {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(270deg);
            transform: rotate(270deg); } }

@keyframes rotator {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(270deg);
            transform: rotate(270deg); } }

.path {
  stroke-dasharray: 187;
  stroke-dashoffset: 0;
  -webkit-transform-origin: center;
      -ms-transform-origin: center;
          transform-origin: center;
  -webkit-animation: dash 1.4s ease-in-out infinite, colors 5.6s ease-in-out infinite;
          animation: dash 1.4s ease-in-out infinite, colors 5.6s ease-in-out infinite; }

@-webkit-keyframes colors {
  0% {
    stroke: #4285F4; }
  25% {
    stroke: #DE3E35; }
  50% {
    stroke: #F7C223; }
  75% {
    stroke: #1B9A59; }
  100% {
    stroke: #4285F4; } }

@keyframes colors {
  0% {
    stroke: #4285F4; }
  25% {
    stroke: #DE3E35; }
  50% {
    stroke: #F7C223; }
  75% {
    stroke: #1B9A59; }
  100% {
    stroke: #4285F4; } }

@-webkit-keyframes dash {
  0% {
    stroke-dashoffset: 187; }
  50% {
    stroke-dashoffset: 46.75;
    -webkit-transform: rotate(135deg);
            transform: rotate(135deg); }
  100% {
    stroke-dashoffset: 187;
    -webkit-transform: rotate(450deg);
            transform: rotate(450deg); } }

@keyframes dash {
  0% {
    stroke-dashoffset: 187; }
  50% {
    stroke-dashoffset: 46.75;
    -webkit-transform: rotate(135deg);
            transform: rotate(135deg); }
  100% {
    stroke-dashoffset: 187;
    -webkit-transform: rotate(450deg);
            transform: rotate(450deg); } }

/*_____________bootstrap select styles______________*/
/*!
 * Bootstrap-select v1.8.0 (http://silviomoreto.github.io/bootstrap-select)
 *
 * Copyright 2013-2015 bootstrap-select
 * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)
 */

/*_____________faq styles______________*/

.faq {
  word-wrap: break-word;
  text-align: justify; }
  @media screen and (max-width: 767px) {
    .faq {
      text-align: left; } }

.small-slider-holder {
  border: 1px solid #dbdee9; }
  @media screen and (max-width: 991px) {
    .small-slider-holder {
      margin-bottom: 20px; } }
  .small-slider-holder .calculator-banner-text svg {
    display: none; }
  .small-slider-holder .credit-header {
    position: relative;
    font-size: 14px;
    padding: 15px 75px 15px 20px;
    border-radius: 0;
    background-color: #f1f1f1;
    border-radius: 5px 5px 0 0;
    margin: 0; }
    @media screen and (max-width: 1199px) {
      .small-slider-holder .credit-header {
        padding-right: 60px; } }
    .small-slider-holder .credit-header .calculator-labe-zero {
      max-width: 60px;
      right: 10px;
      top: -10px;
      bottom: auto;
      box-shadow: none; }
      @media screen and (max-width: 991px) {
        .small-slider-holder .credit-header .calculator-labe-zero {
          top: -20px; } }
      @media screen and (max-width: 767px) {
        .small-slider-holder .credit-header .calculator-labe-zero {
          right: 5px; } }
    .small-slider-holder .credit-header .calculator-heading--hb .neangelu-labe {
      right: 5px; }
    .small-slider-holder .credit-header .calculator-hb {
      padding: 2px 10px;
      margin-left: 0;
      font-size: 13px; }
    .small-slider-holder .credit-header .neangelu-labe {
      right: 5px;
      max-width: 100px;
      box-shadow: none; }
      @media screen and (max-width: 1199px) {
        .small-slider-holder .credit-header .neangelu-labe {
          width: 60px;
          height: 60px; } }
      @media screen and (max-width: 991px) {
        .small-slider-holder .credit-header .neangelu-labe {
          display: block;
          bottom: 7px;
          right: 5px; } }
    .small-slider-holder .credit-header .calculator-skidka-text {
      color: #003764; }
      @media screen and (max-width: 991px) {
        .small-slider-holder .credit-header .calculator-skidka-text {
          text-align: left; } }
  .small-slider-holder .calculator-heading--hb,
  .small-slider-holder .calculator-heading--skidka {
    padding: 20px 110px 20px 20px; }
    @media screen and (max-width: 1199px) {
      .small-slider-holder .calculator-heading--hb,
      .small-slider-holder .calculator-heading--skidka {
        padding-right: 60px; } }
  .small-slider-holder .calculator-heading--hb .calculator-hb-text {
    text-align: left; }
  @media screen and (max-width: 991px) {
    .small-slider-holder .calculator-heading--hb .neangelu-labe {
      bottom: 15px; } }
  @media screen and (max-width: 991px) {
    .small-slider-holder {
      width: 100%; } }

.content {
  font-size: 16px;
  word-wrap: break-word; }
  @media screen and (max-width: 767px) {
    .content {
      font-size: 16px;
      word-break: normal; } }
  .content .city-column {
    width: 100%;
    padding: 0; }
    .content .city-column li {
      display: inline-block;
      vertical-align: top;
      margin-right: 10px;
      width: calc(33.3% - 10px); }
      @media screen and (max-width: 991px) {
        .content .city-column li {
          width: calc(50% - 10px); } }
      @media screen and (max-width: 767px) {
        .content .city-column li {
          width: 100%; } }
  .content .city-holder {
    padding: 0; }

/* .ps-current {
    height: 830px;
} */
/*------------------------how it work list ---------------------------*/

/*-----------------------------Bonuses---------------------------------------*/

/*--------------------------our contacts----------------------------*/

.callback {
  padding-bottom: 35px;
  margin-bottom: 31px;
  border-bottom: 1px solid #eaeaea;
  font: 16px / 1.5 'HelveticaNeueCyr Light', Arial, sans-serif; }
  @media screen and (max-width: 767px) {
    .callback {
      font-size: 15px; } }
  .callback a {
    color: #007e5c; }
    .callback a:hover {
      text-decoration: underline; }
  .callback strong {
    font: 18px / 1.5 'HelveticaNeueCyr Black', Arial, sans-serif;
    color: #007e5c; }
  .callback span {
    font: 18px / 1.5 'HelveticaNeueCyr Medium', Arial, sans-serif; }

/*--------------------------------credit operations---------------------------*/

/*
    Terminals Map
 */

/*   Our features   */
.our-features {
  padding-top: 20px;
  counter-reset: list 0; }
  .our-features li {
    position: relative;
    list-style-type: none;
    margin-bottom: 40px; }
    .our-features li:before, .our-features li:after {
      content: " ";
      display: table; }
    .our-features li:after {
      clear: both; }
    @media screen and (max-width: 991px) {
      .our-features li {
        display: table; } }
    .our-features li:before {
      counter-increment: list;
      content: counter(list) "";
      position: absolute;
      top: -12px;
      right: 98%;
      text-align: center;
      width: 45px;
      font-size: 24px;
      height: 45px;
      line-height: 40px;
      border: 2px solid #2196F3;
      background-color: #fff;
      box-shadow: 10px 10px 33px -12px rgba(0, 0, 0, 0.75);
      z-index: 2; }
      @media screen and (max-width: 1300px) {
        .our-features li:before {
          left: 0;
          right: auto; } }
      @media screen and (max-width: 991px) {
        .our-features li:before {
          left: 15px; } }
      @media screen and (max-width: 600px) {
        .our-features li:before {
          display: none; } }
    .our-features li .btn-personal, .our-features li .btn-success {
      border: 1px solid #00b181;
      background-color: transparent;
      color: #00b181;
      box-shadow: none; }
      .our-features li .btn-personal:hover, .our-features li .btn-success:hover {
        color: #fff;
        background-color: #00b181; }
      .our-features li .btn-personal:before, .our-features li .btn-success:before {
        display: none; }
  .our-features figure {
    float: left;
    width: 50%; }
    @media screen and (max-width: 991px) {
      .our-features figure {
        float: none;
        width: 100%;
        padding: 0 15px; } }
    @media screen and (max-width: 600px) {
      .our-features figure {
        margin-bottom: 20px; } }
    .our-features figure img {
      border: 1px solid #eaeaea; }

@keyframes marker-translate {
  0%,
  20%,
  50%,
  80%,
  100% {
    -webkit-transform: translateY(0);
    -ms-transform: translateY(0);
    transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-70px);
    -ms-transform: translateY(-70px);
    transform: translateY(-70px); }
  60% {
    -webkit-transform: translateY(-35px);
    -ms-transform: translateY(-35px);
    transform: translateY(-35px); } }

@-webkit-keyframes marker-translate {
  0% {
    -webkit-transform: translate(0, -150px);
    -ms-transform: translate(0, -150px);
    transform: translate(0, -150px);
    opacity: 0; }
  100% {
    -webkit-transform: translate(0, 0);
    -ms-transform: translate(0, 0);
    transform: translate(0, 0);
    opacity: 1; } }

/*animations*/
/******************
* Bounce in right *
*******************/
.animated {
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both; }

 .fadeInLeft {
  opacity: 0;
  -webkit-transform: translateX(400px);
  -ms-transform: translateX(400px);
      transform: translateX(400px); }

/***********
* bounceIn *
************/
@-webkit-keyframes bounceIn {
  0% {
    opacity: 0;
    -webkit-transform: scale(0.3); }
  50% {
    opacity: 1;
    -webkit-transform: scale(1.05); }
  70% {
    -webkit-transform: scale(0.9); }
  100% {
    -webkit-transform: scale(1); } }

@keyframes bounceIn {
  0% {
    opacity: 0;
    -webkit-transform: scale(0.3);
            transform: scale(0.3); }
  50% {
    opacity: 1;
    -webkit-transform: scale(1.05);
            transform: scale(1.05); }
  70% {
    -webkit-transform: scale(0.9);
            transform: scale(0.9); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1); } }

/****************
* bounceInRight *
****************/
@-webkit-keyframes bounceInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(400px); }
  60% {
    -webkit-transform: translateX(-30px); }
  80% {
    -webkit-transform: translateX(10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0); } }

@keyframes bounceInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(400px);
            transform: translateX(400px); }
  60% {
    -webkit-transform: translateX(-30px);
            transform: translateX(-30px); }
  80% {
    -webkit-transform: translateX(10px);
            transform: translateX(10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0); } }

/******************
* Bounce in left *
*******************/
@-webkit-keyframes bounceInLeft {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-400px); }
  60% {
    -webkit-transform: translateX(30px); }
  80% {
    -webkit-transform: translateX(-10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0); } }

@keyframes bounceInLeft {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-400px);
            transform: translateX(-400px); }
  60% {
    -webkit-transform: translateX(30px);
            transform: translateX(30px); }
  80% {
    -webkit-transform: translateX(-10px);
            transform: translateX(-10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0); } }

/******************
* Bounce in up *
*******************/
@-webkit-keyframes bounceInUp {
  0% {
    opacity: 0;
    -webkit-transform: translateY(400px); }
  60% {
    -webkit-transform: translateY(-30px); }
  80% {
    -webkit-transform: translateY(10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0); } }

@keyframes bounceInUp {
  0% {
    opacity: 0;
    -webkit-transform: translateY(400px);
            transform: translateY(400px); }
  60% {
    -webkit-transform: translateY(-30px);
            transform: translateY(-30px); }
  80% {
    -webkit-transform: translateY(10px);
            transform: translateY(10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); } }

/******************
* Bounce in down *
*******************/
@-webkit-keyframes bounceInDown {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-400px); }
  60% {
    -webkit-transform: translateY(30px); }
  80% {
    -webkit-transform: translateY(-10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0); } }

@keyframes bounceInDown {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-400px);
            transform: translateY(-400px); }
  60% {
    -webkit-transform: translateY(30px);
            transform: translateY(30px); }
  80% {
    -webkit-transform: translateY(-10px);
            transform: translateY(-10px); }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); } }

/**********
* Fade In *
**********/
@-webkit-keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1;
    display: block; } }

@keyframes fadeIn {
  0% {
    opacity: 0; }
  100% {
    opacity: 1;
    display: block; } }

/**********
* Grow in *
***********/
@-webkit-keyframes growIn {
  0% {
    -webkit-transform: scale(0.2);
    opacity: 0; }
  50% {
    -webkit-transform: scale(1.2); }
  100% {
    -webkit-transform: scale(1);
    opacity: 1; } }

@keyframes growIn {
  0% {
    -webkit-transform: scale(0.2);
            transform: scale(0.2);
    opacity: 0; }
  50% {
    -webkit-transform: scale(1.2);
            transform: scale(1.2); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
    opacity: 1; } }

/********
* Shake *
********/
@-webkit-keyframes shake {
  0%, 100% {
    -webkit-transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% {
    -webkit-transform: translateX(-10px); }
  20%, 40%, 60%, 80% {
    -webkit-transform: translateX(10px); } }

@keyframes shake {
  0%, 100% {
    -webkit-transform: translateX(0);
            transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% {
    -webkit-transform: translateX(-10px);
            transform: translateX(-10px); }
  20%, 40%, 60%, 80% {
    -webkit-transform: translateX(10px);
            transform: translateX(10px); } }

/********
* ShakeUp *
********/
@-webkit-keyframes shakeUp {
  0%, 100% {
    -webkit-transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% {
    -webkit-transform: translateY(-10px); }
  20%, 40%, 60%, 80% {
    -webkit-transform: translateY(10px); } }

@keyframes shakeUp {
  0%, 100% {
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  10%, 30%, 50%, 70%, 90% {
    -webkit-transform: translateY(-10px);
            transform: translateY(-10px); }
  20%, 40%, 60%, 80% {
    -webkit-transform: translateY(10px);
            transform: translateY(10px); } }

/*************
* FadeInLeft *
*************/
@-webkit-keyframes fadeInLeft {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0); } }

@keyframes fadeInLeft {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-400px);
            transform: translateX(-400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0); } }

.fadeInLeft {
  opacity: 0;
  -webkit-transform: translateX(-400px);
  -ms-transform: translateX(-400px);
      transform: translateX(-400px); }

/*************
* FadeInRight *
*************/
@-webkit-keyframes fadeInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0); } }

@keyframes fadeInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(400px);
            transform: translateX(400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0); } }

/*************
* FadeInUp *
*************/
@-webkit-keyframes fadeInUp {
  0% {
    opacity: 0;
    -webkit-transform: translateY(400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0); } }

@keyframes fadeInUp {
  0% {
    opacity: 0;
    -webkit-transform: translateY(400px);
            transform: translateY(400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); } }

/*************
* FadeInDown *
*************/
@-webkit-keyframes fadeInDown {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0); } }

@keyframes fadeInDown {
  0% {
    opacity: 0;
    -webkit-transform: translateY(-400px);
            transform: translateY(-400px); }
  50% {
    opacity: 0.3; }
  100% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); } }

/*****************
* rotateIn *
*****************/
@-webkit-keyframes rotateIn {
  0% {
    -webkit-transform-origin: center center;
    -webkit-transform: rotate(-200deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: center center;
    -webkit-transform: rotate(0);
    opacity: 1; } }

@keyframes rotateIn {
  0% {
    -webkit-transform-origin: center center;
            transform-origin: center center;
    -webkit-transform: rotate(-200deg);
            transform: rotate(-200deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: center center;
            transform-origin: center center;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; } }

/*****************
* rotateInUpLeft *
*****************/
@-webkit-keyframes rotateInUpLeft {
  0% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(0);
    opacity: 1; } }

@keyframes rotateInUpLeft {
  0% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(90deg);
            transform: rotate(90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; } }

/*******************
* rotateInDownLeft *
*******************/
@-webkit-keyframes rotateInDownLeft {
  0% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(-90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(0);
    opacity: 1; } }

@keyframes rotateInDownLeft {
  0% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(-90deg);
            transform: rotate(-90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; } }

/******************
* rotateInUpRight *
*******************/
@-webkit-keyframes rotateInUpRight {
  0% {
    -webkit-transform-origin: right bottom;
    -webkit-transform: rotate(-90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: right bottom;
    -webkit-transform: rotate(0);
    opacity: 1; } }

@keyframes rotateInUpRight {
  0% {
    -webkit-transform-origin: right bottom;
            transform-origin: right bottom;
    -webkit-transform: rotate(-90deg);
            transform: rotate(-90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: right bottom;
            transform-origin: right bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; } }

/********************
* rotateInDownRight *
********************/
@-webkit-keyframes rotateInDownRight {
  0% {
    -webkit-transform-origin: right bottom;
    -webkit-transform: rotate(90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: right bottom;
    -webkit-transform: rotate(0);
    opacity: 1; } }

@keyframes rotateInDownRight {
  0% {
    -webkit-transform-origin: right bottom;
            transform-origin: right bottom;
    -webkit-transform: rotate(90deg);
            transform: rotate(90deg);
    opacity: 0; }
  100% {
    -webkit-transform-origin: right bottom;
            transform-origin: right bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; } }

/*********
* rollIn *
**********/
@-webkit-keyframes rollIn {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-100%) rotate(-120deg); }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0px) rotate(0deg); } }

@keyframes rollIn {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-100%) rotate(-120deg);
            transform: translateX(-100%) rotate(-120deg); }
  100% {
    opacity: 1;
    -webkit-transform: translateX(0px) rotate(0deg);
            transform: translateX(0px) rotate(0deg); } }

/*********
* wiggle *
**********/
@-webkit-keyframes wiggle {
  0% {
    -webkit-transform: skewX(9deg); }
  10% {
    -webkit-transform: skewX(-8deg); }
  20% {
    -webkit-transform: skewX(7deg); }
  30% {
    -webkit-transform: skewX(-6deg); }
  40% {
    -webkit-transform: skewX(5deg); }
  50% {
    -webkit-transform: skewX(-4deg); }
  60% {
    -webkit-transform: skewX(3deg); }
  70% {
    -webkit-transform: skewX(-2deg); }
  80% {
    -webkit-transform: skewX(1deg); }
  90% {
    -webkit-transform: skewX(0deg); }
  100% {
    -webkit-transform: skewX(0deg); } }

@keyframes wiggle {
  0% {
    -webkit-transform: skewX(9deg);
            transform: skewX(9deg); }
  10% {
    -webkit-transform: skewX(-8deg);
            transform: skewX(-8deg); }
  20% {
    -webkit-transform: skewX(7deg);
            transform: skewX(7deg); }
  30% {
    -webkit-transform: skewX(-6deg);
            transform: skewX(-6deg); }
  40% {
    -webkit-transform: skewX(5deg);
            transform: skewX(5deg); }
  50% {
    -webkit-transform: skewX(-4deg);
            transform: skewX(-4deg); }
  60% {
    -webkit-transform: skewX(3deg);
            transform: skewX(3deg); }
  70% {
    -webkit-transform: skewX(-2deg);
            transform: skewX(-2deg); }
  80% {
    -webkit-transform: skewX(1deg);
            transform: skewX(1deg); }
  90% {
    -webkit-transform: skewX(0deg);
            transform: skewX(0deg); }
  100% {
    -webkit-transform: skewX(0deg);
            transform: skewX(0deg); } }

/********
* swing *
*********/
@-webkit-keyframes swing {
  20%, 40%, 60%, 80%, 100% {
    -webkit-transform-origin: top center; }
  20% {
    -webkit-transform: rotate(15deg); }
  40% {
    -webkit-transform: rotate(-10deg); }
  60% {
    -webkit-transform: rotate(5deg); }
  80% {
    -webkit-transform: rotate(-5deg); }
  100% {
    -webkit-transform: rotate(0deg); } }

@keyframes swing {
  20% {
    -webkit-transform: rotate(15deg);
            transform: rotate(15deg); }
  40% {
    -webkit-transform: rotate(-10deg);
            transform: rotate(-10deg); }
  60% {
    -webkit-transform: rotate(5deg);
            transform: rotate(5deg); }
  80% {
    -webkit-transform: rotate(-5deg);
            transform: rotate(-5deg); }
  100% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); } }

/*******
* tada *
********/
@-webkit-keyframes tada {
  0% {
    -webkit-transform: scale(1); }
  10%, 20% {
    -webkit-transform: scale(0.9) rotate(-3deg); }
  30%, 50%, 70%, 90% {
    -webkit-transform: scale(1.1) rotate(3deg); }
  40%, 60%, 80% {
    -webkit-transform: scale(1.1) rotate(-3deg); }
  100% {
    -webkit-transform: scale(1) rotate(0); } }

@keyframes tada {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  10%, 20% {
    -webkit-transform: scale(0.9) rotate(-3deg);
            transform: scale(0.9) rotate(-3deg); }
  30%, 50%, 70%, 90% {
    -webkit-transform: scale(1.1) rotate(3deg);
            transform: scale(1.1) rotate(3deg); }
  40%, 60%, 80% {
    -webkit-transform: scale(1.1) rotate(-3deg);
            transform: scale(1.1) rotate(-3deg); }
  100% {
    -webkit-transform: scale(1) rotate(0);
            transform: scale(1) rotate(0); } }

/*********
* wobble *
**********/
@-webkit-keyframes wobble {
  0% {
    -webkit-transform: translateX(0%); }
  15% {
    -webkit-transform: translateX(-25%) rotate(-5deg); }
  30% {
    -webkit-transform: translateX(20%) rotate(3deg); }
  45% {
    -webkit-transform: translateX(-15%) rotate(-3deg); }
  60% {
    -webkit-transform: translateX(10%) rotate(2deg); }
  75% {
    -webkit-transform: translateX(-5%) rotate(-1deg); }
  100% {
    -webkit-transform: translateX(0%); } }

@keyframes wobble {
  0% {
    -webkit-transform: translateX(0%);
            transform: translateX(0%); }
  15% {
    -webkit-transform: translateX(-25%) rotate(-5deg);
            transform: translateX(-25%) rotate(-5deg); }
  30% {
    -webkit-transform: translateX(20%) rotate(3deg);
            transform: translateX(20%) rotate(3deg); }
  45% {
    -webkit-transform: translateX(-15%) rotate(-3deg);
            transform: translateX(-15%) rotate(-3deg); }
  60% {
    -webkit-transform: translateX(10%) rotate(2deg);
            transform: translateX(10%) rotate(2deg); }
  75% {
    -webkit-transform: translateX(-5%) rotate(-1deg);
            transform: translateX(-5%) rotate(-1deg); }
  100% {
    -webkit-transform: translateX(0%);
            transform: translateX(0%); } }

/********
* pulse *
*********/
@-webkit-keyframes pulse {
  0% {
    -webkit-transform: scale(1); }
  50% {
    -webkit-transform: scale(1.1); }
  100% {
    -webkit-transform: scale(1); } }

@keyframes pulse {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  50% {
    -webkit-transform: scale(1.1);
            transform: scale(1.1); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1); } }

/***************
* lightSpeedInRight *
****************/
@-webkit-keyframes lightSpeedInRight {
  0% {
    -webkit-transform: translateX(100%) skewX(-30deg);
    opacity: 0; }
  60% {
    -webkit-transform: translateX(-20%) skewX(30deg);
    opacity: 1; }
  80% {
    -webkit-transform: translateX(0%) skewX(-15deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(0%) skewX(0deg);
    opacity: 1; } }

@keyframes lightSpeedInRight {
  0% {
    -webkit-transform: translateX(100%) skewX(-30deg);
            transform: translateX(100%) skewX(-30deg);
    opacity: 0; }
  60% {
    -webkit-transform: translateX(-20%) skewX(30deg);
            transform: translateX(-20%) skewX(30deg);
    opacity: 1; }
  80% {
    -webkit-transform: translateX(0%) skewX(-15deg);
            transform: translateX(0%) skewX(-15deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(0%) skewX(0deg);
            transform: translateX(0%) skewX(0deg);
    opacity: 1; } }

/***************
* lightSpeedInLeft *
****************/
@-webkit-keyframes lightSpeedInLeft {
  0% {
    -webkit-transform: translateX(-100%) skewX(30deg);
    opacity: 0; }
  60% {
    -webkit-transform: translateX(20%) skewX(-30deg);
    opacity: 1; }
  80% {
    -webkit-transform: translateX(0%) skewX(15deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(0%) skewX(0deg);
    opacity: 1; } }

@keyframes lightSpeedInLeft {
  0% {
    -webkit-transform: translateX(-100%) skewX(30deg);
            transform: translateX(-100%) skewX(30deg);
    opacity: 0; }
  60% {
    -webkit-transform: translateX(20%) skewX(-30deg);
            transform: translateX(20%) skewX(-30deg);
    opacity: 1; }
  80% {
    -webkit-transform: translateX(0%) skewX(15deg);
            transform: translateX(0%) skewX(15deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(0%) skewX(0deg);
            transform: translateX(0%) skewX(0deg);
    opacity: 1; } }

/*******
* Flip *
*******/
@-webkit-keyframes flip {
  0% {
    -webkit-transform: perspective(400px) rotateY(0);
    -webkit-animation-timing-function: ease-out; }
  40% {
    -webkit-transform: perspective(400px) translateZ(150px) rotateY(170deg);
    -webkit-animation-timing-function: ease-out; }
  50% {
    -webkit-transform: perspective(400px) translateZ(150px) rotateY(190deg) scale(1);
    -webkit-animation-timing-function: ease-in; }
  80% {
    -webkit-transform: perspective(400px) rotateY(360deg) scale(0.95);
    -webkit-animation-timing-function: ease-in; }
  100% {
    -webkit-transform: perspective(400px) scale(1);
    -webkit-animation-timing-function: ease-in; } }

@keyframes flip {
  0% {
    -webkit-transform: perspective(400px) rotateY(0);
            transform: perspective(400px) rotateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out; }
  40% {
    -webkit-transform: perspective(400px) translateZ(150px) rotateY(170deg);
            transform: perspective(400px) translateZ(150px) rotateY(170deg);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out; }
  50% {
    -webkit-transform: perspective(400px) translateZ(150px) rotateY(190deg) scale(1);
            transform: perspective(400px) translateZ(150px) rotateY(190deg) scale(1);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in; }
  80% {
    -webkit-transform: perspective(400px) rotateY(360deg) scale(0.95);
            transform: perspective(400px) rotateY(360deg) scale(0.95);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in; }
  100% {
    -webkit-transform: perspective(400px) scale(1);
            transform: perspective(400px) scale(1);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in; } }

/**********
* flipInX *
**********/
@-webkit-keyframes flipInX {
  0% {
    -webkit-transform: perspective(400px) rotateX(90deg);
    opacity: 0; }
  40% {
    -webkit-transform: perspective(400px) rotateX(-10deg); }
  70% {
    -webkit-transform: perspective(400px) rotateX(10deg); }
  100% {
    -webkit-transform: perspective(400px) rotateX(0deg);
    opacity: 1; } }

@keyframes flipInX {
  0% {
    -webkit-transform: perspective(400px) rotateX(90deg);
            transform: perspective(400px) rotateX(90deg);
    opacity: 0; }
  40% {
    -webkit-transform: perspective(400px) rotateX(-10deg);
            transform: perspective(400px) rotateX(-10deg); }
  70% {
    -webkit-transform: perspective(400px) rotateX(10deg);
            transform: perspective(400px) rotateX(10deg); }
  100% {
    -webkit-transform: perspective(400px) rotateX(0deg);
            transform: perspective(400px) rotateX(0deg);
    opacity: 1; } }

/**********
* flipInY *
**********/
@-webkit-keyframes flipInY {
  0% {
    -webkit-transform: perspective(400px) rotateY(90deg);
    opacity: 0; }
  40% {
    -webkit-transform: perspective(400px) rotateY(-10deg); }
  70% {
    -webkit-transform: perspective(400px) rotateY(10deg); }
  100% {
    -webkit-transform: perspective(400px) rotateY(0deg);
    opacity: 1; } }

@keyframes flipInY {
  0% {
    -webkit-transform: perspective(400px) rotateY(90deg);
            transform: perspective(400px) rotateY(90deg);
    opacity: 0; }
  40% {
    -webkit-transform: perspective(400px) rotateY(-10deg);
            transform: perspective(400px) rotateY(-10deg); }
  70% {
    -webkit-transform: perspective(400px) rotateY(10deg);
            transform: perspective(400px) rotateY(10deg); }
  100% {
    -webkit-transform: perspective(400px) rotateY(0deg);
            transform: perspective(400px) rotateY(0deg);
    opacity: 1; } }

/*****************
* Out animations *
*****************/
/************
* bounceOut *
*************/
@-webkit-keyframes bounceOut {
  0% {
    -webkit-transform: scale(1); }
  25% {
    -webkit-transform: scale(0.95); }
  50% {
    opacity: 1;
    -webkit-transform: scale(1.1); }
  100% {
    opacity: 0;
    -webkit-transform: scale(0.3); } }

@keyframes bounceOut {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  25% {
    -webkit-transform: scale(0.95);
            transform: scale(0.95); }
  50% {
    opacity: 1;
    -webkit-transform: scale(1.1);
            transform: scale(1.1); }
  100% {
    opacity: 0;
    -webkit-transform: scale(0.3);
            transform: scale(0.3); } }

/************
* bounceOutUp *
*************/
@-webkit-keyframes bounceOutUp {
  0% {
    -webkit-transform: translateY(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateY(20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(-2000px); } }

@keyframes bounceOutUp {
  0% {
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateY(20px);
            transform: translateY(20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(-2000px);
            transform: translateY(-2000px); } }

/************
* bounceOutDown *
*************/
@-webkit-keyframes bounceOutDown {
  0% {
    -webkit-transform: translateY(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateY(-20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(2000px); } }

@keyframes bounceOutDown {
  0% {
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateY(-20px);
            transform: translateY(-20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(2000px);
            transform: translateY(2000px); } }

/************
* bounceOutLeft *
*************/
@-webkit-keyframes bounceOutLeft {
  0% {
    -webkit-transform: translateX(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateX(20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-2000px); } }

@keyframes bounceOutLeft {
  0% {
    -webkit-transform: translateX(0);
            transform: translateX(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateX(20px);
            transform: translateX(20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-2000px);
            transform: translateX(-2000px); } }

/************
* bounceOutRight *
*************/
@-webkit-keyframes bounceOutRight {
  0% {
    -webkit-transform: translateX(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateX(-20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(2000px); } }

@keyframes bounceOutRight {
  0% {
    -webkit-transform: translateX(0);
            transform: translateX(0); }
  20% {
    opacity: 1;
    -webkit-transform: translateX(-20px);
            transform: translateX(-20px); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(2000px);
            transform: translateX(2000px); } }

/************
* fadeOut *
*************/
@-webkit-keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

/************
* fadeOutUp *
*************/
@-webkit-keyframes fadeOutUp {
  0% {
    opacity: 1;
    -webkit-transform: translateY(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(-2000px); } }

@keyframes fadeOutUp {
  0% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(-2000px);
            transform: translateY(-2000px); } }

/************
* fadeOutDown *
*************/
@-webkit-keyframes fadeOutDown {
  0% {
    opacity: 1;
    -webkit-transform: translateY(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(2000px); } }

@keyframes fadeOutDown {
  0% {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateY(2000px);
            transform: translateY(2000px); } }

/************
* fadeOutLeft *
*************/
@-webkit-keyframes fadeOutLeft {
  0% {
    opacity: 1;
    -webkit-transform: translateX(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-2000px); } }

@keyframes fadeOutLeft {
  0% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-2000px);
            transform: translateX(-2000px); } }

/************
* fadeOutRight *
*************/
@-webkit-keyframes fadeOutRight {
  0% {
    opacity: 1;
    -webkit-transform: translateX(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(2000px); } }

@keyframes fadeOutRight {
  0% {
    opacity: 1;
    -webkit-transform: translateX(0);
            transform: translateX(0); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(2000px);
            transform: translateX(2000px); } }

/************
* flipOutX *
*************/
@-webkit-keyframes flipOutX {
  0% {
    -webkit-transform: perspective(400px) rotateX(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: perspective(400px) rotateX(90deg);
    opacity: 0; } }

@keyframes flipOutX {
  0% {
    -webkit-transform: perspective(400px) rotateX(0deg);
            transform: perspective(400px) rotateX(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: perspective(400px) rotateX(90deg);
            transform: perspective(400px) rotateX(90deg);
    opacity: 0; } }

/************
* flipOutY *
*************/
@-webkit-keyframes flipOutY {
  0% {
    -webkit-transform: perspective(400px) rotateY(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: perspective(400px) rotateY(90deg);
    opacity: 0; } }

@keyframes flipOutY {
  0% {
    -webkit-transform: perspective(400px) rotateY(0deg);
            transform: perspective(400px) rotateY(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: perspective(400px) rotateY(90deg);
            transform: perspective(400px) rotateY(90deg);
    opacity: 0; } }

/************
* lightSpeedOutRight *
*************/
@-webkit-keyframes lightSpeedOutRight {
  0% {
    -webkit-transform: translateX(0%) skewX(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(100%) skewX(-30deg);
    opacity: 0; } }

@keyframes lightSpeedOutRight {
  0% {
    -webkit-transform: translateX(0%) skewX(0deg);
            transform: translateX(0%) skewX(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(100%) skewX(-30deg);
            transform: translateX(100%) skewX(-30deg);
    opacity: 0; } }

/************
* lightSpeedOutLeft *
*************/
@-webkit-keyframes lightSpeedOutLeft {
  0% {
    -webkit-transform: translateX(0%) skewX(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(-100%) skewX(30deg);
    opacity: 0; } }

@keyframes lightSpeedOutLeft {
  0% {
    -webkit-transform: translateX(0%) skewX(0deg);
            transform: translateX(0%) skewX(0deg);
    opacity: 1; }
  100% {
    -webkit-transform: translateX(-100%) skewX(30deg);
            transform: translateX(-100%) skewX(30deg);
    opacity: 0; } }

/************
* rotateOut *
*************/
@-webkit-keyframes rotateOut {
  0% {
    -webkit-transform-origin: center center;
    -webkit-transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: center center;
    -webkit-transform: rotate(200deg);
    opacity: 0; } }

@keyframes rotateOut {
  0% {
    -webkit-transform-origin: center center;
            transform-origin: center center;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: center center;
            transform-origin: center center;
    -webkit-transform: rotate(200deg);
            transform: rotate(200deg);
    opacity: 0; } }

/************
* rotateOutUpLeft *
*************/
@-webkit-keyframes rotateOutUpLeft {
  0% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(-90deg);
    opacity: 0; } }

@keyframes rotateOutUpLeft {
  0% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; }
  100% {
    -transform-origin: left bottom;
    -transform: rotate(-90deg);
    opacity: 0; } }

/************
* rotateOutDownLeft *
*************/
@-webkit-keyframes rotateOutDownLeft {
  0% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: left bottom;
    -webkit-transform: rotate(90deg);
    opacity: 0; } }

@keyframes rotateOutDownLeft {
  0% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: left bottom;
            transform-origin: left bottom;
    -webkit-transform: rotate(90deg);
            transform: rotate(90deg);
    opacity: 0; } }

/************
* rotateOutUpRight *
*************/
@-webkit-keyframes rotateOutUpRight {
  0% {
    -webkit-transform-origin: right bottom;
    -webkit-transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: right bottom;
    -webkit-transform: rotate(90deg);
    opacity: 0; } }

@keyframes rotateOutUpRight {
  0% {
    -webkit-transform-origin: right bottom;
            transform-origin: right bottom;
    -webkit-transform: rotate(0);
            transform: rotate(0);
    opacity: 1; }
  100% {
    -webkit-transform-origin: right bottom;
            transform-origin: right bottom;
    -webkit-transform: rotate(90deg);
            transform: rotate(90deg);
    opacity: 0; } }

/************
* rollOut *
*************/
@-webkit-keyframes rollOut {
  0% {
    opacity: 1;
    -webkit-transform: translateX(0px) rotate(0deg); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(100%) rotate(120deg); } }

@keyframes rollOut {
  0% {
    opacity: 1;
    -webkit-transform: translateX(0px) rotate(0deg);
            transform: translateX(0px) rotate(0deg); }
  100% {
    opacity: 0;
    -webkit-transform: translateX(100%) rotate(120deg);
            transform: translateX(100%) rotate(120deg); } }

/* Wobble Horizontal */
@-webkit-keyframes wobble-horizontal {
  0% {
    -webkit-transform: translateX(0px);
    transform: translateX(0px); }
  5% {
    -webkit-transform: translateX(-6px);
    transform: translateX(-6px); }
  15% {
    -webkit-transform: translateX(4px);
    transform: translateX(4px); }
  20% {
    -webkit-transform: translateX(-2px);
    transform: translateX(-2px); }
  25% {
    -webkit-transform: translateX(1px);
    transform: translateX(1px); }
  30% {
    -webkit-transform: translateX(0);
    transform: translateX(0); } }

@keyframes wobble-horizontal {
  0% {
    -webkit-transform: translateX(0px);
    transform: translateX(0px); }
  5% {
    -webkit-transform: translateX(-6px);
    transform: translateX(-6px); }
  15% {
    -webkit-transform: translateX(4px);
    transform: translateX(4px); }
  20% {
    -webkit-transform: translateX(-2px);
    transform: translateX(-2px); }
  25% {
    -webkit-transform: translateX(1px);
    transform: translateX(1px); }
  30% {
    -webkit-transform: translateX(0);
    transform: translateX(0); } }

/*  about us page */
.about-left {
  font-size: 18px;
  padding-right: 22%;
  padding-top: 45px; }
  @media screen and (max-width: 991px) {
    .about-left {
      padding-right: 20px;
      padding-top: 20px; } }
  .about-left blockquot {
    position: relative;
    display: block;
    padding-left: 28px;
    font-size: 25px;
    font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
    line-height: 30px;
    margin-bottom: 30px; }
    @media screen and (max-width: 991px) {
      .about-left blockquot {
        font-size: 20px;
        line-height: 25px; } }
    .about-left blockquot:before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      background-color: #0055b8;
      width: 3px; }

.about-img {
  position: relative;
  padding-bottom: 55%; }
  .about-img:after {
    content: '';
    position: absolute;
    left: -23%;
    top: -40px;
    right: -66%;
    bottom: -50px;
    height: 600px;
    background-image: url("../assets/images/about-us-top.png");
    background-repeat: no-repeat;
    background-size: cover; }
    @media screen and (max-width: 991px) {
      .about-img:after {
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        height: 500px; } }
    @media screen and (max-width: 767px) {
      .about-img:after {
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        height: auto; } }

.about-us-top {
  position: relative; }

.about-play {
  position: absolute;
  left: 50%;
  top: 45%;
  width: 180px;
  height: 180px;
  border-radius: 50%;
  z-index: 3;
  cursor: pointer;
  box-shadow: 2px 18px 90px -35px rgba(0, 0, 0, 0.75);
  transition: -webkit-transform 0.3s;
  transition: transform 0.3s;
  transition: transform 0.3s, -webkit-transform 0.3s; }
  @media screen and (max-width: 991px) {
    .about-play {
      left: 40%;
      top: 70%; } }
  @media screen and (max-width: 767px) {
    .about-play {
      width: 100px;
      height: 100px;
      top: 83%;
      left: 32%; } }
  .about-play:hover {
    -webkit-transform: scale(0.9);
        -ms-transform: scale(0.9);
            transform: scale(0.9); }
  .about-play svg {
    width: 180px;
    height: 180px; }
    @media screen and (max-width: 767px) {
      .about-play svg {
        width: 100px;
        height: 100px; } }

.about-info {
  padding-top: 40px;
  border: 1px solid #e1e1e1;
  border-top: none;
  -webkit-box-shadow: 4px 33px 157px -50px rgba(0, 0, 0, 0.75);
  position: relative;
  margin-top: 90px;
  box-shadow: 4px 33px 157px -50px rgba(0, 0, 0, 0.75);
  margin-bottom: 70px;
  background-color: #fff;
  z-index: 2; }
  @media screen and (max-width: 767px) {
    .about-info {
      margin-top: 0; } }
  .about-info ul {
    padding: 0;
    margin: 0;
    padding-bottom: 35px;
    list-style-type: none; }
    .about-info ul:before, .about-info ul:after {
      content: " ";
      display: table; }
    .about-info ul:after {
      clear: both; }
    .about-info ul li {
      float: left;
      width: 25%;
      font-size: 18px; }
      @media screen and (max-width: 991px) {
        .about-info ul li {
          width: 50%;
          margin-bottom: 30px; } }
      @media screen and (max-width: 767px) {
        .about-info ul li {
          float: none;
          width: 100%; } }
      .about-info ul li span {
        display: block;
        font-size: 35px;
        color: #0055b8; }
      .about-info ul li p {
        margin: 0; }
    .about-info ul svg {
      width: 85px;
      height: 85px;
      display: inline-block;
      vertical-align: middle; }
    .about-info ul figure {
      margin-bottom: 10px; }
  .about-info--footer {
    background-color: #f8f8f8;
    border-top: 1px solid #e1e1e1;
    padding: 30px 0; }
    .about-info--footer span {
      display: block;
      font-size: 15px;
      color: #808080;
      margin-top: 10px; }

.about-people {
  text-align: center;
  padding: 60px 0;
  color: #fff;
  background-color: #45bc75; }
  @media screen and (max-width: 991px) {
    .about-people {
      padding: 30px 0; } }
  .about-people ul {
    padding: 0;
    margin: 0;
    padding-top: 75px;
    list-style-type: none; }
    .about-people ul:before, .about-people ul:after {
      content: " ";
      display: table; }
    .about-people ul:after {
      clear: both; }
    .about-people ul li {
      color: #003764;
      font-size: 18px;
      background-color: #fff;
      width: calc(25% - 12px);
      float: left;
      min-height: 468px; }
      @media screen and (max-width: 1100px) {
        .about-people ul li {
          width: calc(50% - 8px);
          margin-bottom: 50px;
          min-height: 400px;
          font-size: 16px; } }
      @media screen and (max-width: 767px) {
        .about-people ul li {
          float: none;
          width: 100%; } }
      .about-people ul li p {
        font-family: "HelveticaNeueCyr Roman", Arial, sans-serif;
        margin: 0; }
        .about-people ul li p span {
          display: block;
          color: #9a9a9a;
          font-size: 15px; }
      .about-people ul li:not(:last-child) {
        margin-right: 15px; }
        @media screen and (max-width: 1100px) {
          .about-people ul li:not(:last-child) {
            margin-right: 0; } }
      @media screen and (max-width: 1100px) {
        .about-people ul li:not(:nth-child(2n)) {
          margin-right: 15px; } }
  .about-people figure {
    display: inline-block;
    vertical-align: top;
    margin-top: -30px;
    margin-bottom: 20px;
    width: 160px;
    height: 160px;
    border-radius: 50%;
    box-shadow: 2px 18px 90px -35px rgba(0, 0, 0, 0.75); }
    .about-people figure img {
      width: 100%;
      height: 100%;
      border-radius: 50%; }
  .about-people blockquot {
    position: relative;
    display: block;
    padding-top: 50px;
    padding-left: 35px;
    padding-right: 35px;
    padding-bottom: 30px; }
    .about-people blockquot img {
      position: absolute;
      top: 15px;
      left: 50%;
      -webkit-transform: translate(-50%, 0);
      -ms-transform: translate(-50%, 0);
      transform: translate(-50%, 0); }

.about-important {
  background-color: #ecf8f1;
  padding: 65px 0;
  font-size: 0; }
  @media screen and (max-width: 767px) {
    .about-important {
      padding: 30px 0 0; } }
  .about-important-item {
    width: 50%;
    font-size: 17px;
    display: inline-block;
    vertical-align: top;
    margin-bottom: 40px;
    padding: 0 50px; }
    @media screen and (max-width: 767px) {
      .about-important-item {
        width: 100%;
        display: block; } }
  .about-important figure {
    position: relative;
    display: inline-block;
    vertical-align: top;
    width: 120px;
    height: 120px;
    text-align: center;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0px 9px 72px -19px rgba(0, 0, 0, 0.75);
    margin-bottom: 20px;
    line-height: 120px; }
    .about-important figure svg {
      vertical-align: middle;
      width: 70px;
      height: 70px; }

.about-different {
  padding: 60px 0; }
  @media screen and (max-width: 991px) {
    .about-different {
      padding: 30px 0; } }
  .about-different-wr {
    font-size: 0; }
  .about-different-item {
    width: calc(50% - 10px);
    padding: 30px;
    display: inline-block;
    vertical-align: top;
    border-radius: 5px;
    background-color: #0055b8;
    color: #fff;
    margin-bottom: 20px;
    font-size: 17px; }
    .about-different-item a {
      color: #fff;
      text-transform: lowercase;
      border: none;
      text-decoration: underline; }
    .about-different-item:not(:nth-child(2n)) {
      margin-right: 20px; }
      @media screen and (max-width: 767px) {
        .about-different-item:not(:nth-child(2n)) {
          margin-right: 0; } }
    @media screen and (max-width: 767px) {
      .about-different-item {
        display: block;
        width: 100%; } }
    .about-different-item figure {
      position: relative;
      display: inline-block;
      vertical-align: top;
      width: 120px;
      height: 120px;
      text-align: center;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0px 9px 72px -19px rgba(0, 0, 0, 0.75);
      margin-bottom: 20px;
      line-height: 120px; }
      .about-different-item figure svg {
        vertical-align: middle;
        /* position: absolute; 
                    top: 50%;   
                    left: 50%;  
                    @include translate(-50%, -50%); */
        width: 70px;
        height: 70px; }

.important-heading {
  font-size: 22px;
  margin-bottom: 15px;
  color: #1b63bd;
  font-family: "HelveticaNeueCyr Medium", Arial, sans-serif; }

.different-heading {
  font-family: "HelveticaNeueCyr Medium", Arial, sans-serif;
  font-size: 25px;
  margin-bottom: 15px; }

.small-about {
  position: absolute;
  z-index: 3; }
  @media screen and (max-width: 991px) {
    .small-about {
      display: none; } }

.small-about-1 {
  left: -23%;
  top: 0px; }

.small-about-2 {
  left: 19%;
  top: 30px; }

.small-about-3 {
  right: -45%;
  top: 40%; }

.small-about-4 {
  right: -32%;
  bottom: -80%; }

.our-team {
  padding: 70px 0 40px 0;
  background-color: #fff;
  text-align: center; }
  @media screen and (max-width: 991px) {
    .our-team {
      padding: 30px 0 0; } }
  .our-team__item {
    margin-bottom: 30px; }
    @media screen and (min-width: 767px) {
      .our-team__item-left {
        text-align: right; }
      .our-team__item-right {
        text-align: left; } }
    .our-team__item img {
      border-radius: 7px; }
      @media screen and (max-width: 991px) {
        .our-team__item img {
          width: 100%; } }
      @media screen and (max-width: 767px) {
        .our-team__item img {
          width: auto; } }
      @media screen and (max-width: 480px) {
        .our-team__item img {
          width: 100%; } }

.neangelu-labe {
  position: absolute;
  right: 0;
  bottom: 15px;
  font-size: 0; }
  @media screen and (max-width: 480px) {
    .neangelu-labe {
      bottom: 29px; } }

.neangelu-video-play {
  position: absolute;
  bottom: 2%;
  left: 29%;
  cursor: pointer;
  z-index: 3; }
  @media screen and (max-width: 1600px) {
    .neangelu-video-play {
      left: 26%; } }
  @media screen and (max-width: 1440px) {
    .neangelu-video-play {
      left: 23%; } }
  @media screen and (max-width: 1350px) {
    .neangelu-video-play {
      left: 18%;
      top: 130px;
      bottom: auto; } }
  @media screen and (max-width: 1199px) {
    .neangelu-video-play {
      left: 15%; } }
  @media screen and (max-width: 1100px) {
    .neangelu-video-play {
      left: 28%;
      bottom: 59%; } }
  @media screen and (max-width: 800px) {
    .neangelu-video-play {
      left: 32%;
      bottom: 6%; } }
  @media screen and (max-width: 767px) {
    .neangelu-video-play {
      display: none; } }
  @media screen and (max-width: 540px) {
    .neangelu-video-play {
      bottom: 67%;
      left: 32%; } }
  .neangelu-video-play img {
    width: 114px !important;
    height: 114px;
    /* animation: pulse 1s infinite;
	    	-webkit-animation: pulse 1s infinite;
	    	-moz-animation: pulse 1s infinite; */ }
    @media screen and (max-width: 1500px) {
      .neangelu-video-play img {
        width: 90px !important;
        height: 90px;
        margin-left: 15px; } }
    @media screen and (max-width: 1400px) {
      .neangelu-video-play img {
        width: 87px !important;
        margin-left: 26px; } }
    @media screen and (max-width: 1350px) {
      .neangelu-video-play img {
        margin-left: 15px; } }
    @media screen and (max-width: 1100px) {
      .neangelu-video-play img {
        width: 70px !important;
        height: 70px; } }
    @media screen and (max-width: 767px) {
      .neangelu-video-play img {
        width: 40px !important;
        height: 40px; } }
  .neangelu-video-play svg {
    display: block;
    margin-left: -75px; }
    @media screen and (max-width: 1500px) {
      .neangelu-video-play svg {
        margin-left: -48%; } }
    @media screen and (max-width: 1440px) {
      .neangelu-video-play svg {
        margin-left: -13%;
        width: 157px;
        -webkit-transform: rotate(-20deg);
            -ms-transform: rotate(-20deg);
                transform: rotate(-20deg); } }
    @media screen and (max-width: 1279px) {
      .neangelu-video-play svg {
        /* float: left; */
        margin-left: -55%; } }
    @media screen and (max-width: 1199px) {
      .neangelu-video-play svg {
        margin-left: -25%; } }
    @media screen and (max-width: 1100px) {
      .neangelu-video-play svg {
        margin-left: 0%;
        width: 98px;
        height: 70px;
        margin-top: 0;
        float: none;
        -webkit-transform: rotate(0deg);
        -ms-transform: rotate(-10deg);
            transform: rotate(-10deg); } }
    @media screen and (max-width: 767px) {
      .neangelu-video-play svg {
        display: none; } }

.neangelau-slider-text {
  display: none; }

@keyframes pulse {
  from {
    -webkit-transform: scale(0.5);
    -ms-transform: scale(0.5);
    transform: scale(0.5); }
  to {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1); } }

/*video animation*/
@keyframes fade-letter {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

@-webkit-keyframes fade-letter {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

/* .letter-arrow {
	animation-delay: 1.5s;
	animation: fade-letter 2s linear infinite;
	-moz-animation: fade-letter 2s linear infinite;
	-webkit-animation: fade-letter 2s linear infinite;
} */

/**
 * News
 */

.blog {
  margin-bottom: 90px;
  position: relative;
  z-index: 2; }

.february-header .authorize {
  padding-top: 16px; }

.february-header .header_h {
  height: 80px !important; }
  @media screen and (max-width: 1300px) {
    .february-header .header_h {
      height: 62px !important; } }

.february-header .header {
  height: 80px; }
  @media screen and (max-width: 1300px) {
    .february-header .header {
      height: 62px; } }
  @media screen and (max-width: 767px) {
    .february-header .header {
      height: 45px; } }

.february-header .header-group {
  padding-top: 16px; }
  @media screen and (max-width: 1300px) {
    .february-header .header-group {
      padding-top: 8px; } }
  @media screen and (max-width: 991px) {
    .february-header .header-group {
      padding-top: 0;
      vertical-align: top;
      display: block;
      float: right;
      margin-right: 0; } }

.february-header .header-logo {
  margin-top: 24px; }
  @media screen and (max-width: 1300px) {
    .february-header .header-logo {
      margin-top: 16px; } }
  @media screen and (max-width: 1199px) {
    .february-header .header-logo {
      margin-top: 20px; } }
  @media screen and (max-width: 767px) {
    .february-header .header-logo {
      margin-top: 9px; } }

@media screen and (max-width: 1300px) {
  .february-header .authorize {
    padding-top: 9px; } }

@media screen and (max-width: 991px) {
  .february-header .authorize {
    padding-top: 11px; } }

@media screen and (max-width: 767px) {
  .february-header .authorize {
    width: 80%;
    padding-top: 0; } }

@media screen and (max-width: 700px) {
  .february-header .authorize {
    width: 65%;
    padding-top: 3px; } }

@media screen and (max-width: 480px) {
  .february-header .authorize {
    float: right; } }

@media screen and (max-width: 340px) {
  .february-header .authorize {
    width: 47%; } }

@media screen and (max-width: 767px) {
  .february-header .navbar-toggle {
    margin-top: 3px; } }

.february-header .navbar-nav li a,
.february-header .navbar-nav li span {
  padding: 30px 17px; }
  @media screen and (max-width: 1300px) {
    .february-header .navbar-nav li a,
    .february-header .navbar-nav li span {
      padding: 22px 15px;
      line-height: 20px; } }
  @media screen and (max-width: 1199px) {
    .february-header .navbar-nav li a,
    .february-header .navbar-nav li span {
      font-size: 13px; } }
  @media screen and (max-width: 991px) {
    .february-header .navbar-nav li a,
    .february-header .navbar-nav li span {
      font-size: 14px; } }
  @media screen and (max-width: 767px) {
    .february-header .navbar-nav li a,
    .february-header .navbar-nav li span {
      padding: 10px 20px;
      display: inline-block; } }

.february-header .navbar-nav li [aria-expanded="false"] {
  background-position: 95% 36px; }
  @media screen and (max-width: 1500px) {
    .february-header .navbar-nav li [aria-expanded="false"] {
      padding-right: 20px; } }
  @media screen and (max-width: 1300px) {
    .february-header .navbar-nav li [aria-expanded="false"] {
      background-position: 95% 28px;
      padding-right: 20px; } }
  @media screen and (max-width: 767px) {
    .february-header .navbar-nav li [aria-expanded="false"] {
      background-position: 97% 16px; } }

.february-header .navbar-nav li [aria-expanded="true"] {
  background-position: 95% 36px; }
  @media screen and (max-width: 1500px) {
    .february-header .navbar-nav li [aria-expanded="true"] {
      padding-right: 20px; } }
  @media screen and (max-width: 1300px) {
    .february-header .navbar-nav li [aria-expanded="true"] {
      background-position: 95% 28px;
      padding-right: 20px; } }
  @media screen and (max-width: 767px) {
    .february-header .navbar-nav li [aria-expanded="true"] {
      background-position: 97% 16px; } }

.february-header .navbar-nav li.custom a,
.february-header .navbar-nav li.custom span {
  padding: 5px 12px 5px 10px; }

@-webkit-keyframes xxx {
  0% {
    bottom: -70px; }
  100% {
    bottom: 1300px; } }

@keyframes xxx {
  0% {
    bottom: -70px; }
  100% {
    bottom: 1300px; } }

@-webkit-keyframes moveUp {
  100% {
    -webkit-transform: translate(0, -150px);
            transform: translate(0, -150px); } }

@keyframes moveUp {
  100% {
    -webkit-transform: translate(0, -150px);
            transform: translate(0, -150px); } }

@-webkit-keyframes spin-round {
  0% {
    -webkit-transform: rotateY(0deg) translate(0, -150px);
            transform: rotateY(0deg) translate(0, -150px); }
  100% {
    -webkit-transform: rotateY(180deg) translate(0, -150px);
            transform: rotateY(180deg) translate(0, -150px); } }

@keyframes spin-round {
  0% {
    -webkit-transform: rotateY(0deg) translate(0, -150px);
            transform: rotateY(0deg) translate(0, -150px); }
  100% {
    -webkit-transform: rotateY(180deg) translate(0, -150px);
            transform: rotateY(180deg) translate(0, -150px); } }

@-webkit-keyframes skew {
  0% {
    -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
            transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
  100% {
    -webkit-transform: rotateX(36deg) rotateY(196deg) translate(-100%, -235px) skewX(10deg) scale(0.2);
            transform: rotateX(36deg) rotateY(196deg) translate(-100%, -235px) skewX(10deg) scale(0.2); } }

@keyframes skew {
  0% {
    -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
            transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
  100% {
    -webkit-transform: rotateX(36deg) rotateY(196deg) translate(-100%, -235px) skewX(10deg) scale(0.2);
            transform: rotateX(36deg) rotateY(196deg) translate(-100%, -235px) skewX(10deg) scale(0.2); } }

@media screen and (max-width: 1700px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-120%, -450px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-120%, -450px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-120%, -450px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-120%, -450px) skewX(10deg) scale(0.2); } } }

@media screen and (max-width: 1500px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-100%, -350px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-100%, -350px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-100%, -350px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-100%, -350px) skewX(10deg) scale(0.2); } } }

@media screen and (max-width: 1300px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-130%, -350px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-130%, -350px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-130%, -350px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-130%, -350px) skewX(10deg) scale(0.2); } } }

@media screen and (max-width: 1100px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-107%, -250px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-107%, -250px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-107%, -250px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-107%, -250px) skewX(10deg) scale(0.2); } } }

@media screen and (max-width: 991px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2); } } }

@media screen and (max-width: 767px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-50%, -100px) skewX(10deg) scale(0.2); } } }

@media screen and (max-width: 767px) and (max-height: 400px) {
  @-webkit-keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-96%, -220px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-96%, -220px) skewX(10deg) scale(0.2); } }
  @keyframes skew {
    0% {
      -webkit-transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1);
              transform: rotateX(36deg) rotateY(180deg) translate(0, -150px) skewX(10deg) scale(1); }
    100% {
      -webkit-transform: rotateX(50deg) rotateY(196deg) translate(-96%, -220px) skewX(10deg) scale(0.2);
              transform: rotateX(50deg) rotateY(196deg) translate(-96%, -220px) skewX(10deg) scale(0.2); } } }

.wish-list {
  position: relative;
  z-index: 3; }

.wish-item {
  background-color: #fff;
  margin-bottom: 20px;
  border-radius: 5px; }
  @media screen and (max-width: 767px) {
    .wish-item {
      margin-bottom: 10px; } }

.wish-name {
  text-transform: capitalize;
  font-family: "HelveticaNeueCyr Bold", Arial, sans-serif; }

.wish-heading {
  font-size: 18px;
  font-family: "HelveticaNeueCyr Bold", Arial, sans-serif;
  color: #0055b8;
  text-transform: capitalize;
  margin-bottom: 10px; }

.wish-like {
  color: #bec0c9;
  transition: color 0.3s; }
  .wish-like.active {
    color: #f05228; }
  .wish-like svg,
  .wish-like span {
    display: inline-block;
    vertical-align: middle; }
  .wish-like svg {
    width: 35px;
    height: 25px;
    margin-right: 10px;
    cursor: pointer; }
  .wish-like span {
    font-family: "HelveticaNeueCyr Medium", Arial, sans-serif; }

.icon {
  display: inline-block;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor; }

@keyframes wiggle {
  0% {
    -webkit-transform: rotate(4deg);
            transform: rotate(4deg); }
  50% {
    -webkit-transform: rotate(-4deg);
            transform: rotate(-4deg); }
  100% {
    -webkit-transform: rotate(4deg);
            transform: rotate(4deg); } }

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
            transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-30px);
            transform: translateY(-30px); }
  60% {
    -webkit-transform: translateY(-15px);
            transform: translateY(-15px); } }

@-webkit-keyframes bird {
  from {
    -webkit-transform: translate(0, -20px);
            transform: translate(0, -20px); }
  to {
    -webkit-transform: translate(0, 20px);
            transform: translate(0, 20px); } }

@keyframes bird {
  from {
    -webkit-transform: translate(0, -20px);
            transform: translate(0, -20px); }
  to {
    -webkit-transform: translate(0, 20px);
            transform: translate(0, 20px); } }

@-webkit-keyframes bird-wings {
  from {
    -webkit-transform: rotate(-10deg);
            transform: rotate(-10deg); }
  to {
    -webkit-transform: rotate(10deg);
            transform: rotate(10deg); } }

@keyframes bird-wings {
  from {
    -webkit-transform: rotate(-10deg);
            transform: rotate(-10deg); }
  to {
    -webkit-transform: rotate(10deg);
            transform: rotate(10deg); } }

@font-face {
  font-family: lg;
  src: url(fonts/lg.eot?n1z373);
  src: url(fonts/lg.eot?#iefixn1z373) format("embedded-opentype"), url(fonts/lg.woff?n1z373) format("woff"), url(fonts/lg.ttf?n1z373) format("truetype"), url(fonts/lg.svg?n1z373#lg) format("svg");
  font-weight: 400;
  font-style: normal; }

@-webkit-keyframes "lg-right-end" {
  0%,
  100% {
    left: 0; }
  50% {
    left: -30px; } }

@keyframes "lg-right-end" {
  0%,
  100% {
    left: 0; }
  50% {
    left: -30px; } }

@-webkit-keyframes "lg-left-end" {
  0%,
  100% {
    left: 0; }
  50% {
    left: 30px; } }

@keyframes "lg-left-end" {
  0%,
  100% {
    left: 0; }
  50% {
    left: 30px; } }

@font-face {
  font-family: VideoJS;
  src: url(../font/1.4.0/VideoJS.eot?#iefix) format("eot"); }

@font-face {
  font-family: VideoJS;
  src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAA4wAAoAAAAAFfAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAAA9AAAAD4AAABWUZFeBGNtYXAAAAE0AAAAOgAAAUriLxC2Z2x5ZgAAAXAAAAnnAAAO5OV/F/5oZWFkAAALWAAAACoAAAA2CsZ2fWhoZWEAAAuEAAAAGAAAACQOogcfaG10eAAAC5wAAAAPAAAAeNIAAABsb2NhAAALrAAAAD4AAAA+MMgtQm1heHAAAAvsAAAAHwAAACABLwB5bmFtZQAADAwAAAElAAACCtXH9aBwb3N0AAANNAAAAPkAAAF5vawAenicY2BkZ2CcwMDKwMFSyPKMgYHhF4RmjmEIZzzHwMDEwMrMgBUEpLmmMDh8ZPwoyw7iLmSHCDOCCADu/Qo9AAB4nGNgYGBmgGAZBkYGEHAB8hjBfBYGDSDNBqQZGZgYGD7K/v8PUvCREUTzM0DVAwEjG8OIBwCOWgbUAAB4nI1XfVBU1xV/574vlsUlj/14grDs48FuAgaR3X2LEnY3UZSgEkTwAySAgkIwI8bRfFDjTszYCWRMW9lNa4y2meokmq+2k5ia0dpkmknbkWgSSW3GyaaNf0RTx0wxX7A3Pe/tQmIgHXf3vXvvueeee+45v3POXQYY/PCD/CBDGAYkIE2sxg+OXSJmhmH1OaFX6MU5C5PDMCZi5Rg2i+ELGSthwM14NCbgYGSBIZfhFA1H6Zu0OS0NDkMVfg+npdFm+maCvigI0JBIQIMg0BdJGdTj9ylj7nr+b97+Hl8C1+H2xNAvjPqxjIgaKtItICkSnIISeo40QQls4xxjlzgHsnGGvi7BxQiMlSlkPMhfCh67rAUEUQ6CHxW2O7JARCkKnlUQ7UEIyAEQZe4MdDW9xr5OPFuKbubpRxcPDY8da4MOelDfAYJLW+sGKn/Vlmjfv5+NdB4oOfTazJn3tGxZtL9xFNZX7PPRUbjcRg/SMB2EL+gblXn7shbO/WUbF9u/H5XQ9eKO8iMMr9tY35qYoRi20wGuXV/CHaGDk2fdgHwCk5HUXQpCcgHfBV2NjV3jkq4PHTSUSBwuOQALvxPAps6fiftk6P6yJpcm5bB4dFkgoh195mbiSTnkL3jupq7jh4ZZdvjQRVB4PPx3SsVTu5D/6kd85RU66ttXAeuuXYN1E/Y2sMMzZkZiZNRZlRS/ynr9Xr8Cql2RVNbutXslYo7B9ngsFqcDbCQO22PxeIxcpgMxkh6PjUdwkvw6hvRpZeoCFKshDQzJVr++DWyLx+hAXJcGp3TJMV1ME45xCNvHLsWRrpOZSduOoG0zERuIIwuIkhNkBREglQKLiODD45FQE0BTiE214xE2wp8zOt9NjH3GRtDMk7Ehoq2tzCzGxdyMEQJuD0qGIrQ58ApoWQE3D2h1h6zwuB14wYFIDAA5CZ11jT+92gFZ7B7/p7+hV8jFxBl4aG03wLiVXtBbCylLfIJzkPUAvWAw0yvsVdKdBbC6nnruP/RFkHqWJLZ2Auxdtgy+6qTf7l1WswTJcJ6mGVxwXj92UtfU2WXUNX+qBUCxK6D4FR4f/cufG1sZbiSkMcwdMdoxBxTTEXIp4SCXMNhHoFjvTTFP4vkoPReNRmPRCTwa+3qY0DR7qn7Vjh612wRRTaI04HWCnZ+gIzvS/ZJP0+mynphCui4hzmG0id6+aLSv2BV3FQMYDTHrlGQ/SZ+q4ZdF8aLa5Ar8GW3tVNKEj13cF0buMaesx1i9CL/Uo1tM0h+74o9HjQ+UcPaxy8mH9ccwK8KpKA3rHdIUjTKpfIBxuokpxUGBIILm84ATvHh8tAIe2iZj8KvYwUOXawHMVNgxZvlwSa0z8Zkokkxn3ey2nYTsbMO3mPh8cji7zklsPLD9a9f2s2w/uSt/FgSytWzw5bmS3PielU1P56aGrlz6NzlnbT8h/Wtb+1OxIqxBbC9g7kINUbtAEDxsKWSCe46eltCPmaiUxy2IrODIB8EmixaQrU4IAQ6THg6BFpAdWsCquT16DkL9ccIC/FGeP5AuiDExe8bx+QtzWVsmHcm0kdzqecdn5IhRkTc/zfNPm3ns5sw4Pq86l9gyofh6jkTF5iFChjYbbzZQWFvYb8qZAWyGiV9ya+5bFgnzpuWt3FuX8KYMmsiYZepPseBgGhZcOMt0+4Q8fDOTftJjHIuhdaLsFXFM9AclTi9jbGRq8ZvIOykZei77kfo53eoppVPovbGiyV63p/p/dkWETTjmhjTIm8RP284b04bcNYlRsvO6Gp2JeaiIueVHsgJGF2aASlCQLuG8EsBomzb++/AXmwhaOoLhL7iQ4/uc449gWJ56/XWDARn74v/PL1bRBB4TBEyYrqezSkUPHaWjPWCm13ogAzJ66LVpbTEuXccDZlyXxBQ/IrzKOPS7gAkkIyZ0N6joE6M246aDsO1kgucTJ/EdFWA5pbAcTfoSP4hJeBCni7nEn5IclL4kpDgmMMuH8Kpk0+WrBUIeKCyWS0nPVz7NW86Hnl55GxR5KB3+9tszL+wVRulXNTUn6D8SJvIl3PzP46eZST/tQTllTDXTzmxCaTYna7eJAqcWuD1ulBXQsMz5fQEBCfowCF5FVDF/2yysB9OW5veVEtRAFOy41FoeJEiAOZhDiFstsKAwJ8Hijs72q1jWvWx+uKU5XFZDLx189OK8ojW1u0By5dtLHUN/rwkte68PnhnYVbt0bvWiub9w1+f4C0L3hIuXZ8+xlVSt0eb3tgQsmVZnem5R3U0uf/fmFdqiLTvY3nPnet5/v4f9pLB6QX2krnnFQ1tXtN+2ePlAaUNWcfiWwrncn4ca9ml3hFeHHm+u2bq4MhxUZs3bMH/3jgaPUtlVunFjg2/8yRzf3cHsssKZqlnOqyCWworWykW9lXnspk0ffrjpfCreIpjPWbwnFxt3PAkcQgkUuH1auUMf+txJQ0hK1k1zsNaqQdaLMxfoq9AGGxtJQ+fGw53cE/TY8pWhJruZHiMAcCexFS/eGDp6hntiXGE/gvI7163b29ExfiHxNsnqub/a6/QmPoAn4GpZ2c9cZRX5/57IWUNYuubiQBAddhuxAKe6PA5vuV5dkk0VXkMM3zk42W3Awrgka8LQgjZY+tQIffd5+vnHasnHL/cczldyS4r79i6su6Nu9oPQ8lbaid2Pt9/bXtTTynevq7bkPkITV47d+3NugOzo4M3y77Zxbnb2nhWrl0T/kO4u3H1ig33e1lD6JDYjiKkCHOioF0pZv6T6gxxipxLNhFc8xERA48vq5ZfXdL/QV6c8W3PfwjIsZyI3Csvo72e4FpTVwTv/UYNAKtY+8MB84vogZ1Xr5lW38iJdPZ74xunzO4Gk7BARIkytjlyCoPVoIb3IluMfAYRhEoAO2aGXKc2TNAJaSwdzQEeq7jC7TWYF2Y2jrEIXlyVEhunBs5t7K62a7Z6qB0923/+vPT2v7mwpqV/mTEsTiCB5zz735HOP9VbVWtKKZK08uDJ7vcQN02HogGegY5iNnKUHh12ti9/zzHvsauy+tx+e375j94LuA64MV/5MQbZVNT95/re7jlxZVaVuW5Nffsd9TXfOpXcv6m2Bn3x6FgXg/oz+P0h/ce8g2mTEWxVTzzQzrTruNCcRdbu6VY87gLVXc4uSjXfosak7XxWM4oyl+ockmzCFhJXaGwK8e6sCW2T3sLmPnh5qSZtx9JHFL6QBHGnsTjdtWQ8PFygWtQTIkrI84NILfQSC65FUMFsnOYFHEoSmUCD49a4rt3985PTsd8GzB/5KEnzmhhORgVOZPM+yb5KmpRu38jQqviH6826Lrdrxx6DZdFPo2fVbTiy9AUpDJ3SxGYvpK7u+Rhz8D4BCxssAeJxjYGRgYABiwcIjbvH8Nl8ZuNkZQOBSiOgBZJqdASzOwcAEogDqtAdOAAB4nGNgZGBgZwCChWASxGZkQAVyABOTANd4nGNnYGBgHwAMADNUANMAAAAAAAAOAFAAZgCyAMYA5gEeAUgBdAGcAfICLgKOAroDCgOOA7AD6gQ4BHwEuAToBQwFogXoBjYGbAbaB3IAAHicY2BkYGCQY8hlYGcAASYg5gJCBob/YD4DABa6AakAeJxdkE1qg0AYhl8Tk9AIoVDaVSmzahcF87PMARLIMoFAl0ZHY1BHdBJIT9AT9AQ9RQ9Qeqy+yteNMzDzfM+88w0K4BY/cNAMB6N2bUaPPBLukybCLvleeAAPj8JD+hfhMV7hC3u4wxs7OO4NzQSZcI/8Ltwnfwi75E/hAR7wJTyk/xYeY49fYQ/PztM+jbTZ7LY6OWdBJdX/pqs6NYWa+zMxa13oKrA6Uoerqi/JwtpYxZXJ1coUVmeZUWVlTjq0/tHacjmdxuL90OR8O0UEDYMNdtiSEpz5XQGqzlm30kzUdAYFFOb8R7NOZk0q2lwAyz1i7oAr1xoXvrOgtYhZx8wY5KRV269JZ5yGpmzPTjQhvY9je6vEElPOuJP3mWKnP5M3V+YAAAB4nG2P2XLCMAxFfYE4CWlZSveFP8hHOY4gHhw79VLav68hMNOH6kG60mg5YhM22pr9b1vGMMEUM2TgyFGgxBwVbnCLBZZYYY07bHCPBzziCc94wSve8I4PbGeDFj/VydVSOakpG0T0VH1ZHXuq+xhoftHaHq+yV+21o1P7brWLWnvpiExNJpBb/i18q8D9ZxSOcj8oY8iVPjZBBU2+kGIIypokuqTI+cx3qXMq7Z6PQIsx1DYGrQxtLul50YV50rVcCiNJc0enX4qdkNRYe8j2g46+SIMHapXJw1GFdIWH2DfalQknZeTDWsRW2bqlBK3ORIz9AqJUapQAAAA=) format("woff"), url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMlGRXgQAAAEoAAAAVmNtYXDiLxC2AAAB+AAAAUpnbHlm5X8X/gAAA4QAAA7kaGVhZArGdn0AAADQAAAANmhoZWEOogcfAAAArAAAACRobXR40gAAAAAAAYAAAAB4bG9jYTDILUIAAANEAAAAPm1heHABLwB5AAABCAAAACBuYW1l1cf1oAAAEmgAAAIKcG9zdL2sAHoAABR0AAABeQABAAAHAAAAAKEHAAAAAAAHAAABAAAAAAAAAAAAAAAAAAAAHgABAAAAAQAAEXIS2l8PPPUACwcAAAAAANJUFcAAAAAA0lQVwAAAAAAHAAcAAAAACAACAAAAAAAAAAEAAAAeAG0ABwAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQcAAZAABQAIBHEE5gAAAPoEcQTmAAADXABXAc4AAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA8QHxHQcAAAAAoQcAAAAAAAABAAAAAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAAAAAAAwAAAAMAAAAcAAEAAAAAAEQAAwABAAAAHAAEACgAAAAGAAQAAQACAADxHf//AAAAAPEB//8AAA8AAAEAAAAAAAAAAAEGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AUABmALIAxgDmAR4BSAF0AZwB8gIuAo4CugMKA44DsAPqBDgEfAS4BOgFDAWiBegGNgZsBtoHcgAAAAEAAAAABYsFiwACAAABEQECVQM2BYv76gILAAADAAAAAAZrBmsAAgAOABoAAAkCEwQAAxIABSQAEwIAASYAJzYANxYAFwYAAusBwP5Alf7D/loICAGmAT0BPQGmCAj+Wv7D/f6uBgYBUv39AVIGBv6uAjABUAFQAZsI/lr+w/7D/loICAGmAT0BPQGm+sgGAVL9/QFSBgb+rv39/q4AAAACAAAAAAVABYsAAwAHAAABIREpAREhEQHAASv+1QJVASsBdQQW++oEFgAAAAQAAAAABiAGIAAGABMAJAAnAAABLgEnFRc2NwYHFz4BNSYAJxUWEgEHASERIQERAQYHFT4BNxc3AQcXBNABZVW4A7sCJ3ElKAX+3+Wlzvu3XwFh/p8BKwF1AT5MXU6KO5lf/WCcnAOAZJ4rpbgYGGpbcUacVPQBYziaNP70Aetf/p/+QP6LAfb+wjsdmhJEMZhfBJacnAAAAQAAAAAEqwXWAAUAAAERIQERAQILASoBdv6KBGD+QP6LBKr+iwAAAAIAAAAABWYF1gAGAAwAAAEuAScRPgEBESEBEQEFZQFlVFRl/BEBKwF1/osDgGSeK/2mK54BRP5A/osEqv6LAAADAAAAAAYgBg8ABQAMABoAABMRIQERAQUuAScRPgEDFRYSFwYCBxU2ADcmAOABKwF1/osCxQFlVVVluqXOAwPOpeUBIQUF/t8EYP5A/osEqv6L4GSeK/2mK54C85o0/vS1tf70NJo4AWL19QFiAAAABAAAAAAFiwWLAAUACwARABcAAAEjESE1IwMzNTM1IQEjFSERIwMVMxUzEQILlgF24JaW4P6KA4DgAXaW4OCWAuv+ipYCCuCW/ICWAXYCoJbgAXYABAAAAAAFiwWLAAUACwARABcAAAEzFTMRIRMjFSERIwEzNTM1IRM1IxEhNQF14Jb+iuDgAXaWAcCW4P6KlpYBdgJV4AF2AcCWAXb76uCWAcDg/oqWAAAAAAIAAAAABdYF1gAPABMAAAEhDgEHER4BFyE+ATcRLgEDIREhBUD8gD9VAQFVPwOAP1UBAVU//IADgAXVAVU//IA/VQEBVT8DgD9V++wDgAAABgAAAAAGawZrAAcADAATABsAIAAoAAAJASYnDgEHASUuAScBBSEBNhI3JgUBBgIHFhchBR4BFwEzARYXPgE3AQK+AWROVIfwYQESA4416aH+7gLl/dABelxoAQH8E/7dXGgBAQ4CMP3kNemhARJ4/t1OVIfwYf7uA/ACaBIBAVhQ/id3pfY+/idL/XNkAQGTTU0B+GT+/5NNSEul9j4B2f4IEgEBWFAB2QAAAAUAAAAABmsF1gAPABMAFwAbAB8AAAEhDgEHER4BFyE+ATcRLgEBIRUhASE1IQUhNSE1ITUhBdX7VkBUAgJUQASqQFQCAlT7FgEq/tYC6v0WAuoBwP7WASr9FgLqBdUBVT/8gD9VAQFVPwOAP1X9rJX+1ZWVlZaVAAMAAAAABiAF1gAPACcAPwAAASEOAQcRHgEXIT4BNxEuAQEjNSMVMzUzFRQGByMuAScRPgE3Mx4BFQUjNSMVMzUzFQ4BByMuATURNDY3Mx4BFwWL++o/VAICVD8EFj9UAgJU/WtwlZVwKiDgICoBASog4CAqAgtwlZVwASog4CAqKiDgICoBBdUBVT/8gD9VAQFVPwOAP1X99yXgJUogKgEBKiABKiAqAQEqIEol4CVKICoBASogASogKgEBKiAAAAYAAAAABiAE9gADAAcACwAPABMAFwAAEzM1IxEzNSMRMzUjASE1IREhNSERFSE14JWVlZWVlQErBBX76wQV++sEFQM1lv5AlQHAlf5Alv5AlQJVlZUAAAABAAAAAAYgBmwALgAAASIGBwE2NCcBHgEzPgE3LgEnDgEHFBcBLgEjDgEHHgEXMjY3AQYHHgEXPgE3LgEFQCtKHv3sBwcCDx5OLF9/AgJ/X19/Agf98R5OLF9/AgJ/XyxOHgIUBQEDe1xcewMDewJPHxsBNxk2GQE0HSACf19ffwICf18bGf7NHCACf19ffwIgHP7KFxpcewICe1xdewAAAgAAAAAGWQZrAEMATwAAATY0Jzc+AScDLgEPASYvAS4BJyEOAQ8BBgcnJgYHAwYWHwEGFBcHDgEXEx4BPwEWHwEeARchPgE/ATY3FxY2NxM2JicFLgEnPgE3HgEXDgEFqwUFngoGB5YHGQ26OkQcAxQP/tYPFAIcRTm6DRoHlQcFC50FBZ0LBQeVBxoNujlFHAIUDwEqDxQCHEU5ug0aB5UHBQv9OG+UAgKUb2+UAgKUAzckSiR7CRoNAQMMCQVLLRzGDhEBAREOxhwtSwUJDP79DBsJeyRKJHsJGg3+/QwJBUstHMYOEQEBEQ7GHC1LBQkMAQMMGwlBApRvb5QCApRvb5QAAAAAAQAAAAAGawZrAAsAABMSAAUkABMCACUEAJUIAaYBPQE9AaYICP5a/sP+w/5aA4D+w/5aCAgBpgE9AT0BpggI/loAAAACAAAAAAZrBmsACwAXAAABBAADEgAFJAATAgABJgAnNgA3FgAXBgADgP7D/loICAGmAT0BPQGmCAj+Wv7D/f6uBgYBUv39AVIGBv6uBmsI/lr+w/7D/loICAGmAT0BPQGm+sgGAVL9/QFSBgb+rv39/q4AAAMAAAAABmsGawALABcAIwAAAQQAAxIABSQAEwIAASYAJzYANxYAFwYAAw4BBy4BJz4BNx4BA4D+w/5aCAgBpgE9AT0BpggI/lr+w/3+rgYGAVL9/QFSBgb+rh0Cf19ffwICf19ffwZrCP5a/sP+w/5aCAgBpgE9AT0BpvrIBgFS/f0BUgYG/q79/f6uAk9ffwICf19ffwICfwAAAAQAAAAABiAGIAAPABsAJQApAAABIQ4BBxEeARchPgE3ES4BASM1IxUjETMVMzU7ASEeARcRDgEHITczNSMFi/vqP1QCAlQ/BBY/VAICVP1rcJVwcJVwlgEqICoBASog/tZwlZUGIAJUP/vqP1QCAlQ/BBY/VPyClZUBwLu7ASog/tYgKgFw4AACAAAAAAZrBmsACwAXAAABBAADEgAFJAATAgATBwkBJwkBNwkBFwEDgP7D/loICAGmAT0BPQGmCAj+Wjhp/vT+9GkBC/71aQEMAQxp/vUGawj+Wv7D/sP+WggIAaYBPQE9Aab8EWkBC/71aQEMAQxp/vUBC2n+9AABAAAAAAXWBrYAFgAAAREJAREeARcOAQcuAScjFgAXNgA3JgADgP6LAXW+/QUF/b6+/QWVBgFR/v4BUQYG/q8FiwEq/ov+iwEqBP2/vv0FBf2+/v6vBgYBUf7+AVEAAAABAAAAAAU/BwAAFAAAAREjIgYdASEDIxEhESMRMzU0NjMyBT+dVjwBJSf+/s7//9Ctkwb0/vhISL3+2P0JAvcBKNq6zQAAAAAEAAAAAAaOBwAAMABFAGAAbAAAARQeAxUUBwYEIyImJyY1NDY3NiUuATU0NwYjIiY1NDY3PgEzIQcjHgEVFA4DJzI2NzY1NC4CIyIGBwYVFB4DEzI+AjU0LgEvASYvAiYjIg4DFRQeAgEzFSMVIzUjNTM1MwMfQFtaQDBI/uqfhOU5JVlKgwERIB8VLhaUy0g/TdNwAaKKg0pMMUVGMZImUBo1Ij9qQCpRGS8UKz1ZNjprWzcODxMeChwlThAgNWhvUzZGcX0Da9XVadTUaQPkJEVDUIBOWlN6c1NgPEdRii5SEipAKSQxBMGUUpo2QkBYP4xaSHNHO0A+IRs5ZjqGfVInITtlLmdnUjT8lxo0Xj4ZMCQYIwsXHTgCDiQ4XTtGazsdA2xs29ts2QADAAAAAAaABmwAAwAOACoAAAERIREBFgYrASImNDYyFgERIRE0JiMiBgcGFREhEhAvASEVIz4DMzIWAd3+tgFfAWdUAlJkZ6ZkBI/+t1FWP1UVC/63AgEBAUkCFCpHZz+r0ASP/CED3wEySWJik2Fh/N39yAISaXdFMx4z/dcBjwHwMDCQIDA4H+MAAAEAAAAABpQGAAAxAAABBgcWFRQCDgEEIyAnFjMyNy4BJxYzMjcuAT0BFhcuATU0NxYEFyY1NDYzMhc2NwYHNgaUQ18BTJvW/tKs/vHhIyvhsGmmHyEcKypwk0ROQk4seQFbxgi9hoxgbWAlaV0FaGJFDhyC/v3ut22RBIoCfWEFCxexdQQmAyyOU1hLlbMKJiSGvWYVOXM/CgAAAAEAAAAABYAHAAAiAAABFw4BBwYuAzURIzU+BDc+ATsBESEVIREUHgI3NgUwUBewWWitcE4hqEhyRDAUBQEHBPQBTf6yDSBDME4Bz+0jPgECOFx4eDoCINcaV11vVy0FB/5Y/P36HjQ1HgECAAEAAAAABoAGgABKAAABFAIEIyInNj8BHgEzMj4BNTQuASMiDgMVFBYXFj8BNjc2JyY1NDYzMhYVFAYjIiY3PgI1NCYjIgYVFBcDBhcmAjU0EiQgBBIGgM7+n9FvazsTNhRqPXm+aHfijmm2f1srUE0eCAgGAgYRM9Gpl6mJaz1KDgglFzYyPlYZYxEEzv7OAWEBogFhzgOA0f6fziBdR9MnOYnwlnLIfjpgfYZDaJ4gDCAfGAYXFD1al9mkg6ruVz0jdVkfMkJyVUkx/l5Ga1sBfOnRAWHOzv6fAAAHAAAAAAcABM8ADgAXACoAPQBQAFoAXQAAARE2HgIHDgEHBiYjJyY3FjY3NiYHERQFFjY3PgE3LgEnIwYfAR4BFw4BFxY2Nz4BNy4BJyMGHwEeARcUBhcWNjc+ATcuAScjBh8BHgEXDgEFMz8BFTMRIwYDJRUnAxyEzZRbCA2rgketCAEBqlRoCglxYwF+IiEOIysBAkswHQEECiQ0AgE+YyIhDiIsAQJLMB4BBQokNAE/YyIhDiIsAQJLMB4BBQokNAEBPvmD7kHhqs0s0gEnjgHJAv0FD2a9gIrADwUFAwPDAlVMZ3MF/pUHwgc1HTyWV325PgsJED+oY3G9TAc1HTyWV325PgsJED+oY3G9TAc1HTyWV325PgsJED+oY3G9UmQBZQMMR/61g/kBAAAAAAAQAMYAAQAAAAAAAQAHAAAAAQAAAAAAAgAHAAcAAQAAAAAAAwAHAA4AAQAAAAAABAAHABUAAQAAAAAABQALABwAAQAAAAAABgAHACcAAQAAAAAACgArAC4AAQAAAAAACwATAFkAAwABBAkAAQAOAGwAAwABBAkAAgAOAHoAAwABBAkAAwAOAIgAAwABBAkABAAOAJYAAwABBAkABQAWAKQAAwABBAkABgAOALoAAwABBAkACgBWAMgAAwABBAkACwAmAR5WaWRlb0pTUmVndWxhclZpZGVvSlNWaWRlb0pTVmVyc2lvbiAxLjBWaWRlb0pTR2VuZXJhdGVkIGJ5IHN2ZzJ0dGYgZnJvbSBGb250ZWxsbyBwcm9qZWN0Lmh0dHA6Ly9mb250ZWxsby5jb20AVgBpAGQAZQBvAEoAUwBSAGUAZwB1AGwAYQByAFYAaQBkAGUAbwBKAFMAVgBpAGQAZQBvAEoAUwBWAGUAcgBzAGkAbwBuACAAMQAuADAAVgBpAGQAZQBvAEoAUwBHAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAHMAdgBnADIAdAB0AGYAIABmAHIAbwBtACAARgBvAG4AdABlAGwAbABvACAAcAByAG8AagBlAGMAdAAuAGgAdAB0AHAAOgAvAC8AZgBvAG4AdABlAGwAbABvAC4AYwBvAG0AAAACAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAAECAQMBBAEFAQYBBwEIAQkBCgELAQwBDQEOAQ8BEAERARIBEwEUARUBFgEXARgBGQEaARsBHAEdAR4EcGxheQtwbGF5LWNpcmNsZQVwYXVzZQt2b2x1bWUtbXV0ZQp2b2x1bWUtbG93CnZvbHVtZS1taWQLdm9sdW1lLWhpZ2gQZnVsbHNjcmVlbi1lbnRlcg9mdWxsc2NyZWVuLWV4aXQGc3F1YXJlB3NwaW5uZXIJc3VidGl0bGVzCGNhcHRpb25zCGNoYXB0ZXJzBXNoYXJlA2NvZwZjaXJjbGUOY2lyY2xlLW91dGxpbmUTY2lyY2xlLWlubmVyLWNpcmNsZQJoZAZjYW5jZWwGcmVwbGF5CGZhY2Vib29rBWdwbHVzCGxpbmtlZGluB3R3aXR0ZXIGdHVtYmxyCXBpbnRlcmVzdBFhdWRpby1kZXNjcmlwdGlvbgAAAAAA) format("truetype");
  font-weight: 400;
  font-style: normal; }

video::-webkit-media-text-track-display {
  -ms-transform: translateY(-3em);
  -webkit-transform: translateY(-3em);
  transform: translateY(-3em); }

@keyframes vjs-spinner-spin {
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@-webkit-keyframes vjs-spinner-spin {
  100% {
    -webkit-transform: rotate(360deg); } }

@keyframes vjs-spinner-fade {
  0% {
    border-top-color: #73859f; }
  20% {
    border-top-color: #73859f; }
  35% {
    border-top-color: #fff; }
  60% {
    border-top-color: #73859f; }
  100% {
    border-top-color: #73859f; } }

@-webkit-keyframes vjs-spinner-fade {
  0% {
    border-top-color: #73859f; }
  20% {
    border-top-color: #73859f; }
  35% {
    border-top-color: #fff; }
  60% {
    border-top-color: #73859f; }
  100% {
    border-top-color: #73859f; } }

/*!
 * bootstrap-star-rating v4.0.2
 * http://plugins.krajee.com/star-rating
 *
 * Author: Kartik Visweswaran
 * Copyright: 2013 - 2017, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD 3-Clause
 * https://github.com/kartik-v/bootstrap-star-rating/blob/master/LICENSE.md
 */

/************************
 * Owl carousel
 *
 *
 */
.owl-carousel {
  position: relative; }

.owl-carousel .animated {
  -webkit-animation-duration: 1s;
  animation-duration: 1s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both; }

@-webkit-keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

.owl-carousel {
  display: none;
  width: 100%;
  z-index: 1; }

/*
    Colorbox Core Style:
    The following CSS is consistent between example themes and should not be altered.
*/

/* 
    User Style:
    Change the following styles to modify the appearance of Colorbox.  They are
    ordered & tabbed in a way that represents the nesting of the generated HTML.
*/

/* these elements are buttons, and may need to have additional styles reset to avoid unwanted base styles */

/* avoid outlines on :active (mouseclick), but preserve outlines on :focus (tabbed navigating) */

/*
  The following fixes a problem where IE7 and IE8 replace a PNG's alpha transparency with a black fill
  when an alpha filter (opacity change) is set on the element or ancestor element.  This style is not applied to or needed in IE9.
  See: http://jacklmoore.com/notes/ie-transparency-problems/
*/

[class^="group"] img {
  cursor: url(../images/icons/zoom-in.svg), auto; }

/* Preload images */
body:after {
  content: url(../images/close.png) url(../images/loading.gif) url(../images/prev.png) url(../images/next.png);
  display: none; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
